h2 Accessibility
h3 Keyboard Navigation
table.chi-table
  thead
    tr  
      th Key
      th Function
  tbody
    tr
      td <code>Tab</code>
      td Moves focus to the next focusable element.         
    tr
      td <code>Shift + Tab</code>
      td Moves focus to the previous focusable element.       
    tr
      td <code>Up Arrow</code>or<code>Shift</code>+<code>Up Arrow</code>
      td Increases the value.
    tr
      td <code>Down Arrow</code>or<code>Shift</code>+<code>Down Arrow</code>
      td Decreases the value.
    tr
      td <code>Enter</code>
      td Submits the entered value.
    
p.-text
  | For comprehensive details on keyboard support, refer to our <a href="https://lib.lumen.com/chi/5.64.0/foundations/accessibility/using-keyboard/" target="_blank">Keyboard Control Guide.</a>
p.-text
  | Visit <a href="https://webaim.org/techniques/keyboard/" target="_blank">WebAIM</a> for keyboard techniques.

.chi-grid
  .chi-col.-w-sm--12.-w-md--6.-w-lg--6.-mb--3
    .chi-card.-widget
      .chi-card__header 
        .chi-card__title.-text--normal Guidance for developers
      .chi-card__content 
        .chi-card__caption
          ul.-text
            li Ensure simplicity since not all browsers handle multiple labels linked to the same form element correctly.
            li Label Usage: Assign a label to each input field and make sure the <code>for=""</code> attribute of the label matches the <code>id=""</code> of the corresponding input. Remember, each id must be unique on the page, and each form element should have only one associated label.
            li Indicating Required Fields: Clearly mark required fields using indicators like an asterisk (*) or descriptive text to make them easily identifiable.
            li Help Text: Incorporate help text for all form fields, especially those with constraints. This text should be programmatically associated with the input, for example, using <code>aria-describedby</code>. This is particularly important for masked fields.
            li Test compatibility with various screen readers (like JAWS, NVDA, or VoiceOver) to ensure the number input component is announced correctly. Options should be clearly read out when navigated.
            li Error Validation: Fields with validation errors should use <code>aria-describedby</code> to ensure that error messages are accessible to assistive technologies. If an error message has an <code>id="my-error-message"</code>, the corresponding input should include <code>aria-describedby="my-error-message"</code>
  
  .chi-col.-w-sm--12.-w-md--6.-w-lg--6.-mb--3
    .chi-card.-widget
      .chi-card__header 
        .chi-card__title.-text--normal Guidance for designers
      .chi-card__content 
        .chi-card__caption 
          ul.-text
            li Design with simplicity to accommodate all browsers, minimizing complexities that could hinder accessibility.
            li Obvious Required Fields: Use visual cues, such as an asterisk (*) or supplementary text, to clearly mark required fields and make them easily distinguishable.
            li User-Friendly Help Text: Place help text or examples directly below or inside the number input field to guide users on the correct format.
            li Visible Error Feedback: Design error messages to appear clearly near the number input field when validation fails, using color, icons, or text to make them noticeable.
            li Sufficient Tap Targets: Ensure number input fields have large enough tap targets to accommodate users with different levels of dexterity, following touch-friendly design principles.
            li Use spacing, typography, and visual cues effectively.
            li Maintain consistency in the design of the number input to provide a cohesive user experience.

p.-text 
  | Find live examples of accessible inputs with different types in <a href="https://www.digitala11y.com/demos/accessibility-of-html-input-types-examples/" target="_blank">DigitalA11y project.</a>  

h3 Resources
ul.-text
  li
    a(href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number" target="_blank") Mozilla Resources for Developers: 
    | Information about the HTML <code>input-type="number"</code>
  li 
    a(href="https://a11y-style-guide.com/style-guide/section-forms.html#kssref-forms-text-fields" target="_blank") A11y style guide: 
    | Describes core principles for the accessible inputs and textarea.
  li  
    a(href="https://www.magentaa11y.com/checklist-web/number-input/" target="_blank") MagentaA11y: 
    | How to test a number input.

h3 Other recommendations
p.-text
  | Explore additional accessibility tips in the general <a href="https://lib.lumen.com/5.64.0/foundations/accessibility/overview" target="_blank">Accessibility Guide.</a>

h3 WCAG 2.2 Guidelines
ul.-text
  li
    a(href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content" target="_blank") Non-text Content: 
    | All non-text content that is presented to the user has a text alternative that serves the equivalent purpose. (Level A)
  li
    a(href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-content-structure-separation-programmatic" target="_blank") Info and Relationships: 
    | Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (Level A)
  li 
    a(href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-navigation-mechanisms-descriptive" target="_blank") Headings and Labels: 
    | Headings and labels describe topic or purpose. (Level AA)
  li
    a(href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-minimize-error-cues" target="_blank") Labels or Instructions: 
    | Labels or instructions are provided when content requires user input. (Level A)
  li
    a(href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-ensure-compat-rsv" target="_blank") Name, Role, Value: 
    | For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (Level A) 
