h2 Accessibility
h3 Keyboard Navigation
table.chi-table
  thead
    tr  
      th Key
      th Function
  tbody
    tr 
      td <code>Tab</code>
      td Moves keyboard focus to the switch.  
    tr
      td <code>Space</code>,<code>Enter</code>
      td Changes state of the switch to checked or not checked.
p.-text
  | For comprehensive details on keyboard support for toggle switch, refer to our <a href="https://lib.lumen.com/chi/6.16.0/foundations/accessibility/using-keyboard/" target="_blank">Keyboard Control Guide.</a>
p.-text
  | Visit <a href="https://webaim.org/techniques/keyboard/" target="_blank">WebAIM</a> for keyboard techniques.

.chi-grid
  .chi-col.-w-sm--12.-w-md--6.-w-lg--6.-mb--3
    .chi-card.-widget
      .chi-card__header 
        .chi-card__title.-text--normal Guidance for developers
      .chi-card__content 
        .chi-card__caption
          ul.-text
            li Ensure each toggle switch is accompanied by a label. Use the <code>aria-labelledby</code> attribute on the toggle switch that matches the id of the label element. This is crucial for screen reader users to understand the purpose of the switch.
            li Use <code>aria-checked</code> to indicate whether the toggle switch is in the "on" or "off" state. This attribute should dynamically change as the toggle state changes to keep assistive technologies informed.
            li Toggles should be operable using keyboard alone. Ensure that users can tab to the toggle switch and change its state using keyboard keys like <code>Space</code> or <code>Enter</code>.
            li Implement the toggle using a <code>button</code> element assigned with a <code>role="switch"</code>. This approach ensures that the element is recognized correctly by assistive technologies.
  
  .chi-col.-w-sm--12.-w-md--6.-w-lg--6.-mb--3
    .chi-card.-widget
      .chi-card__header 
        .chi-card__title.-text--normal Guidance for designers
      .chi-card__content 
        .chi-card__caption 
          ul.-text
            li Ensure that the toggle switch includes non-color visual indicators (e.g., text labels or distinctive shapes) to convey its state. This helps users with color vision deficiencies.
            li According to WCAG Success Criterion 3.2.2 (On Input), avoid designs where flipping a switch causes immediate changes in context or navigation. If such changes are necessary, provide clear warnings before the switch is used, or offer a way to undo the change.
            li Maintain high contrast ratios for all textual and graphical elements of the toggle switch to ensure legibility and visibility under various lighting conditions.
            li Ensure that toggle switches are large enough to be easily manipulated by users with limited dexterity, and spaced sufficiently to prevent accidental activation.

p.-text 
  | Find live examples in the <a href="https://a11y-style-guide.com/style-guide/section-forms.html#kssref-forms-toggles" target="_blank">A11y Style Guide</a>.  

h3 Roles and attributes
p.-text 
  | The following list provides essential roles and attributes you should consider to ensure our components are fully accessible across various interface scenarios.
table.chi-table
  thead
    tr
      th.-pr--10 Attribute
      th Element
      th Usage
  tbody
    tr
      td <code>aria-label</code>
      td <code>div</code>
      td Defines a string value that labels an interactive element. It is required props for controls without text content.
    tr
      td <code>aria-labelledby</code>
      td <code>div</code>
      td The aria-labelledby attribute identifies the element (or elements) that labels the element it is applied to. It is required props for controls without text content.

h3 Resources
ul.-text
  li
    a(href="https://www.w3.org/WAI/ARIA/apg/patterns/switch/" target="_blank") W3 Switch Example: 
    | Contains comprehensive details regarding the accessibility behavior of the switch .
  li  
    a(href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/switch_role" target="_blank") Mozilla Resources for Developers: 
    | Find examples of accessible switches.

h3 Other recommendations
p.-text
  | Explore additional accessibility tips in the general <a href="https://lib.lumen.com/chi/6.16.0/foundations/accessibility/overview" target="_blank">Accessibility Guide.</a>

h3 WCAG 2.2 Guidelines
ul.-text
  li
    a(href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content" target="_blank") Non-text Content: 
    | All non-text content that is presented to the user has a text alternative that serves the equivalent purpose. (Level A)
  li
    a(href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-content-structure-separation-programmatic" target="_blank") Info and Relationships: 
    | Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (Level A)
  li 
    a(href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-navigation-mechanisms-descriptive" target="_blank") Headings and Labels: 
    | Headings and labels describe topic or purpose. (Level AA)
  li
    a(href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-minimize-error-cues" target="_blank") Labels or Instructions: 
    | Labels or instructions are provided when content requires user input. (Level A)
  li
    a(href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-ensure-compat-rsv" target="_blank") Name, Role, Value: 
    | For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (Level A)    