h2 Accessibility
h3 Keyboard Navigation
table.chi-table
  thead
    tr  
      th Key
      th Function
  tbody
    tr
      td <code>Tab</code>
      td Moves focus to the next focusable element          
    tr
      td <code>Shift + Tab</code>
      td Moves focus to the previous focusable element       
    tr
      td <code>Enter</code>
      td Activates the link
p.-text
  | For comprehensive details on keyboard support for buttons, refer to our <a href="https://lib.lumen.com/chi/6.0.0/foundations/accessibility/using-keyboard/" target="_blank">Keyboard Control Guide.</a>
p.-text
  | Visit <a href="https://webaim.org/techniques/keyboard/" target="_blank">WebAIM</a> for keyboard techniques.

.chi-grid
  .chi-col.-w-sm--12.-w-md--6.-w-lg--6.-mb--3
    .chi-card.-widget
      .chi-card__header 
        .chi-card__title.-text--normal Guidance for developers
      .chi-card__content 
        .chi-card__caption
          ul.-text
            li Always start with the <code>a</code> tag for links. This tag is inherently designed to create hyperlinks, allowing users to navigate from one page or section to another.
            li Ensure every link has a valid href attribute. This attribute should contain the URL or anchor link the user will navigate to when the link is activated.
            li When using <code>target="_blank"</code> to open links in a new tab, add <code>rel="noopener noreferrer"</code> for security reasons and to protect user privacy.
            li Use ARIA roles and properties correctly to ensure assistive technologies can accurately convey the link's purpose. Avoid redundant roles like <code>role="link"</code> on anchor elements.
            li Avoid generic text like "click here" or "read more." Instead, use meaningful descriptions that convey the purpose of the link without needing surrounding content for context.
            li For links with generic text, use <code>aria-describedby</code> or <code>aria-labelledby</code> to associate the link with additional contextual text, providing more clarity on the link's purpose.
  
  .chi-col.-w-sm--12.-w-md--6.-w-lg--6.-mb--3
    .chi-card.-widget
      .chi-card__header 
        .chi-card__title.-text--normal Guidance for designers
      .chi-card__content 
        .chi-card__caption 
          ul.-text
            li Clear Link Text: Design with descriptive text for links. Avoid generic phrases like "click here," ensuring users understand the link's destination.
            li Visual Distinction: Ensure links are visually distinct from regular text through color, underlining, or other styling cues to indicate interactiveness.
            li Contrast Ratios: Maintain high contrast ratios between link text and its background to ensure readability for users with visual impairments.
            li Indicate Link Behavior: Visually indicate if a link will open in a new window or tab, using icons or text. This informs users of the expected behavior. 
            li Consistent Styling: Apply consistent styles for links across the application or website to avoid confusion about what is clickable.

p.-text 
  | Find live examples in the <a href="https://a11y-style-guide.com/style-guide/section-general.html#kssref-general-link-focus" target="_blank">A11y style guide</a>.  

h3 Roles and attributes
p.-text 
  | Below are some key considerations to ensure that our components are fully accessible in various scenarios within your interfaces. These points outline the necessary roles and attributes to keep in mind.
table.chi-table
  thead
    tr
      th Role
      th.-pr--10 Attribute
      th Element
      th Usage
  tbody
    tr
      td <code>link</code>
      td -
      td <code>span</code>,<code>img</code>
      td Identifies the <code>span</code>/<code>img</code> element as a link.
    tr
      td -
      td <code>tabIndex="0"</code>
      td <code>span</code>,<code>img</code>
      td Includes the link element in the page Tab sequence.
    tr 
      td -
      td <code>alt</code>
      td <code>img</code>
      td Defines the accessible name of the link.
    tr 
      td -
      td <code>aria-label</code>
      td <code>span</code>
      td Defines the accessible name of the link.

h3 Resources
ul.-text
  li
    a(href="https://www.w3.org/WAI/ARIA/apg/patterns/link/" target="_blank") W3 Link Example: 
    | Contains comprehensive details regarding the accessibility behavior of the link.
  li
    a(href="https://a11y-style-guide.com/style-guide/section-general.html" target="_blank") A11y Style Guide:  
    | Gives core recommendations for accessible links. 
  li  
    a(href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/link_role" target="_blank") Mozilla Resources for Developers: 
    | Find examples of accessible links.

h3 Other recommendations
p.-text
  | Explore additional accessibility tips in the general <a href="https://lib.lumen.com/chi/6.0.0/foundations/accessibility/overview" target="_blank">Accessibility Guide.</a>

h3 WCAG 2.2 Guidelines
ul.-text
  li
    a(href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content" target="_blank") Non-text Content: 
    | All non-text content that is presented to the user has a text alternative that serves the equivalent purpose. (Level A)
  li
    a(href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-content-structure-separation-programmatic" target="_blank") Info and Relationships: 
    | Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (Level A)
  li 
    a(href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-navigation-mechanisms-descriptive" target="_blank") Headings and Labels: 
    | Headings and labels describe topic or purpose. (Level AA)
  li
    a(href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-minimize-error-cues" target="_blank") Labels or Instructions: 
    | Labels or instructions are provided when content requires user input. (Level A)
  li
    a(href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-ensure-compat-rsv" target="_blank") Name, Role, Value: 
    | For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (Level A)    