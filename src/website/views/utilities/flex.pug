---
title: Flex
description: Use shorthand flex utility classes to manage the layout, alignment, and size of Chi components.
---

h2 Display
p.-text To enable flex, apply a flex display utility class. This will transform
  |  your element into a flexbox container and its direct children into flex items.
h3 Flexbox container
.example.-mb--3
  .-p--3.-show--example
    .-text.-p--2.-m--1.-d--flex -d--flex
  :code(lang="html")
    <div class="-d--flex"></div>
h3 Inline Flexbox container
.example.-mb--3
  .-p--3.-show--example
    .-text.-p--2.-m--1.-d--inline-flex -d--inline-flex
  :code(lang="html")
    <div class="-d--inline-flex"></div>

p.-text Target specific breakpoints with Display responsive classes.
ul.-mb--3
  li
    code -d--flex
  li
    code -d--inline-flex
  each type in ['sm', 'md', 'lg', 'xl']
    li
      code= '-d-' + type + '--flex'
    li
      code= '-d-' + type + '--inline-flex'

h2 Direction
p.-text Use direction utilities to define how items will be placed in flex containers.
h3 Row (default)
p.-text Use <code>-flex--row</code> to display items horizontally. In most cases this class
  |  can be omitted as it is the browsers default behavior.
.example.-mb--3
  .-p--3.-d--flex.-flex--row.-show--example
    .-text.-p--2 Item 1
    .-text.-p--2 Item 2
    .-text.-p--2 Item 3
  :code(lang="html")
    <div class="-d--flex -flex--row">
      <div>Item 1</div>
      <div>Item 2</div>
      <div>Item 3</div>
    </div>
h3 Row reverse
p.-text Use <code>-flex--row-reverse</code> to display the items horizontally in reverse.
.example.-mb--3
  .-p--3.-d--flex.-flex--row-reverse.-show--example
    .-text.-p--2 Item 1
    .-text.-p--2 Item 2
    .-text.-p--2 Item 3
  :code(lang="html")
    <div class="-d--flex -flex--row-reverse">
      <div>Item 1</div>
      <div>Item 2</div>
      <div>Item 3</div>
    </div>
h3 Column
p.-text Use <code>-flex--column</code> to display items vertically.
.example.-mb--3
  .-p--3.-d--flex.-flex--column.-show--example
    .-text.-p--2 Item 1
    .-text.-p--2 Item 2
    .-text.-p--2 Item 3
  :code(lang="html")
    <div class="-d--flex -flex--column">
      <div>Item 1</div>
      <div>Item 2</div>
      <div>Item 3</div>
    </div>
h3 Column reverse
p.-text Use <code>-flex--column-reverse</code> to display the items vertically in reverse.
.example.-mb--3
  .-p--3.-d--flex.-flex--column-reverse.-show--example
    .-text.-p--2 Item 1
    .-text.-p--2 Item 2
    .-text.-p--2 Item 3
  :code(lang="html")
    <div class="-d--flex -flex--column-reverse">
      <div>Item 1</div>
      <div>Item 2</div>
      <div>Item 3</div>
    </div>
p.-text Target specific breakpoints with Direction responsive classes.
ul.-mb--3
  li
    code -flex--row
  li
    code -flex--row-reverse
  li
    code -flex--column
  li
    code -flex--column-reverse
  each size in ['sm', 'md', 'lg', 'xl']
    each type in ['row', 'row-reverse', 'column', 'column-reverse']
      li
        code= '-flex-' + size + '--' + type

h2 Justify content
p.-text Use justify-content utilities to alter the alignment of flex items on the main axis.
.example.-mb--3
  .-p--3.-pb--1
    each type in ['start', 'end', 'center', 'between', 'around']
      .-mb--2.-d--flex.-show--example.-bg--grey-10(class='-justify-content--' + type)
        .-text.-p--2 Item 1
        .-text.-p--2 Item 2
        .-text.-p--2 Item 3
  :code(lang="html")
    <div class="-d--flex -justify-content--start"></div>
    <div class="-d--flex -justify-content--end"></div>
    <div class="-d--flex -justify-content--center"></div>
    <div class="-d--flex -justify-content--between"></div>
    <div class="-d--flex -justify-content--around"></div>
p.-text Target specific breakpoints with Justify content responsive classes.
ul.-mb--3
  each type in ['start', 'end', 'center', 'between', 'around']
    li
      code= '-justify-content--' + type
  each size in ['sm', 'md', 'lg', 'xl']
    each type in ['start', 'end', 'center', 'between', 'around']
      li
        code= '-justify-content-' + size + '--' + type

h2 Align items
p.-text Use align-items utilities to alter the alignment of flex items on the cross axis.
.example.-mb--3
  .-p--3.-pb--1
    each type in ['start', 'end', 'center', 'baseline', 'stretch']
      .-mb--2.-d--flex.-show--example.-bg--grey-10(class='-align-items--' + type, style='height:7rem;')
        .-text.-p--2 Item 1
        .-text.-p--2 Item 2
        .-text.-p--2 Item 3
  :code(lang="html")
    <div class="-d--flex -align-items--start"></div>
    <div class="-d--flex -align-items--end"></div>
    <div class="-d--flex -align-items--center"></div>
    <div class="-d--flex -align-items--baseline"></div>
    <div class="-d--flex -align-items--stretch"></div>
p.-text Target specific breakpoints with Align items responsive classes.
ul.-mb--3
  each type in ['start', 'end', 'center', 'baseline', 'stretch']
    li
      code= '-align-items--' + type
  each size in ['sm', 'md', 'lg', 'xl']
    each type in ['start', 'end', 'center', 'baseline', 'stretch']
      li
        code= '-align-items-' + size + '--' + type

h2 Align self
p.-text Use align-self utilities to alter the alignment of individual flex items on the cross axis.

h3 Start
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-show--example.-bg--grey-10(style="height:7rem;")
      .-text.-p--2 Item
      .-text.-p--2.-align-self--start Aligned Item
      .-text.-p--2 Item
  :code(lang="html")
    <div class="-d--flex">
      <div>Item</div>
      <div class="-align-self--start">Aligned Item</div>
      <div>Item</div>
    </div>
h3 End
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-show--example.-bg--grey-10(style="height:7rem;")
      .-text.-p--2 Item
      .-text.-p--2.-align-self--end Aligned Item
      .-text.-p--2 Item
  :code(lang="html")
    <div class="-d--flex">
      <div>Item</div>
      <div class="-align-self--end">Aligned Item</div>
      <div>Item</div>
    </div>
h3 Center
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-show--example.-bg--grey-10(style="height:7rem;")
      .-text.-p--2 Item
      .-text.-p--2.-align-self--center Aligned Item
      .-text.-p--2 Item
  :code(lang="html")
    <div class="-d--flex">
      <div>Item</div>
      <div class="-align-self--center">Aligned Item</div>
      <div>Item</div>
    </div>
h3 Baseline
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-show--example.-bg--grey-10(style="height:7rem;")
      .-text.-p--2 Item
      .-text.-p--2.-align-self--baseline Aligned Item
      .-text.-p--2 Item
  :code(lang="html")
    <div class="-d--flex">
      <div>Item</div>
      <div class="-align-self--baseline">Aligned Item</div>
      <div>Item</div>
    </div>
h3 Stretch (Browser default)
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-show--example.-bg--grey-10(style="height:7rem;")
      .-text.-p--2 Item
      .-text.-p--2.-align-self--stretch Aligned Item
      .-text.-p--2 Item
  :code(lang="html")
    <div class="-d--flex">
      <div>Item</div>
      <div class="-align-self--stretch">Aligned Item</div>
      <div>Item</div>
    </div>
p.-text Target specific breakpoints with Align self responsive classes.
ul.-mb--3
  each type in ['start', 'end', 'center', 'baseline', 'stretch']
    li
      code= '-align-self--' + type
  each size in ['sm', 'md', 'lg', 'xl']
    each type in ['start', 'end', 'center', 'baseline', 'stretch']
      li
        code= '-align-self-' + size + '--' + type

h2 Wrap
p.-text Use wrap utilities to define how flex items wrap in a flex container.
h3 No Wrap (default)
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-flex--nowrap.-align-items--start.-show--example.-bg--grey-10(style="height:116px;width:224px;")
      each item in new Array(4)
        .-text.-p--2 Item
  :code(lang="html")
    <div class="-d--flex -align-items--start -flex--nowrap" style="height:116px;width:224px;">
      <div>Item</div>
    </div>
h3 Wrap
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-flex--wrap.-align-items--start.-show--example.-bg--grey-10(style="width:224px;")
      each item in new Array(4)
        .-text.-p--2 Item
  :code(lang="html")
    <div class="-d--flex -align-items--start -flex--wrap" style="width:224px;">
      <div>Item</div>
    </div>
h3 Wrap Reverse
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-flex--wrap-reverse.-align-items--start.-show--example.-bg--grey-10(style="width:224px;")
      each item in new Array(4)
        .-text.-p--2 Item
  :code(lang="html")
    <div class="-d--flex -align-items--start -flex--wrap-reverse" style="width:224px;">
      <div>Item</div>
    </div>
p.-text Target specific breakpoints with Wrap responsive classes.
ul.-mb--3
  each type in ['nowrap', 'wrap', 'wrap-reverse']
    li
      code= '-flex--' + type
  each size in ['sm', 'md', 'lg', 'xl']
    each type in ['nowrap', 'wrap', 'wrap-reverse']
      li
        code= '-flex-' + size + '--' + type

h2 Align content
p.-text Use align-content utilities on flexbox containers to alter the alignment of flex items <strong>together</strong> on the cross axis.
h3 Start (default)
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-align-content--start.-flex--wrap.-show--example.-bg--grey-10(style="height:12rem;")
      each item in new Array(20)
        .-text.-p--2 Item
  :code(lang="html")
    <div class="-d--flex -align-content--start -flex--wrap">
      <div>Item</div>
    </div>
h3 End
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-align-content--end.-flex--wrap.-show--example.-bg--grey-10(style="height:12rem;")
      each item in new Array(20)
        .-text.-p--2 Item
  :code(lang="html")
    <div class="-d--flex -align-content--end -flex--wrap">
      <div>Item</div>
    </div>
h3 Center
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-align-content--center.-flex--wrap.-show--example.-bg--grey-10(style="height:12rem;")
      each item in new Array(20)
        .-text.-p--2 Item
  :code(lang="html")
    <div class="-d--flex -align-content--center -flex--wrap">
      <div>Item</div>
    </div>
h3 Around
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-align-content--around.-flex--wrap.-show--example.-bg--grey-10(style="height:12rem;")
      each item in new Array(20)
        .-text.-p--2 Item
  :code(lang="html")
    <div class="-d--flex -align-content--around -flex--wrap">
      <div>Item</div>
    </div>
h3 Between
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-align-content--between.-flex--wrap.-show--example.-bg--grey-10(style="height:12rem;")
      each item in new Array(20)
        .-text.-p--2 Item
  :code(lang="html")
    <div class="-d--flex -align-content--between -flex--wrap">
      <div>Item</div>
    </div>
h3 Stretch
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-align-content--stretch.-flex--wrap.-show--example.-bg--grey-10(style="height:12rem;")
      each item in new Array(20)
        .-text.-p--2 Item
  :code(lang="html")
    <div class="-d--flex -align-content--stretch -flex--wrap">
      <div>Item</div>
    </div>

p.-text Target specific breakpoints with Align content responsive classes.
ul.-mb--3
  each type in ['start', 'end', 'center', 'around', 'between', 'stretch']
    li
      code= '-align-content--' + type
  each size in ['sm', 'md', 'lg', 'xl']
    each type in ['start', 'end', 'center', 'around', 'between', 'stretch']
      li
        code= '-align-content-' + size + '--' + type

h2 Fill
p.-text Use the <code>-flex--fill</code> class on flexbox items to display as equal widths while taking up all available horizontal space.
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-show--example.-bg--grey-10
      each item in new Array(3)
        .-text.-p--2.-flex--fill Item
  :code(lang="html")
    <div class="-d--flex">
      <div class="-flex--fill">Item</div>
      <div class="-flex--fill">Item</div>
      <div class="-flex--fill">Item</div>
    </div>
p.-text Target specific breakpoints with Fill responsive classes.
ul.-mb--3
  li
    code -flex--fill
  each size in ['sm', 'md', 'lg', 'xl']
    li
      code= '-flex-' + size + '--fill'

h2 Grow
p.-text Use the <code>-flex--grow*</code> class to toggle a flex item's ability to grow and take up all available space.
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-show--example.-bg--grey-10
      .-text.-p--2.-flex--grow1 Item
      .-text.-p--2 Item
      .-text.-p--2 Item
  :code(lang="html")
    <div class="-d--flex">
      <div class="-flex--grow1">Item</div>
      <div>Item</div>
      <div>Item</div>
    </div>
p.-text Target specific breakpoints with Fill responsive classes.
ul.-mb--3
  li
    code -flex--grow0
  li
    code -flex--grow1
  each size in ['sm', 'md', 'lg', 'xl']
    li
      code= '-flex-' + size + '--grow0'
    li
      code= '-flex-' + size + '--grow1'
h2 Shrink
p.-text Use the <code>-flex--shrink*</code> class to toggle a flex item's ability to shrink when its size is larger than its container.
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-show--example.-bg--grey-10
      .-text.-p--2(style="width:100%;") Item
      .-text.-p--2.-flex--shrink1 Shrink Item
  :code(lang="html")
    <div class="-d--flex">
      <div style="width:100%;">Item</div>
      <div class="-flex--shrink1">Shrink Item</div>
    </div>
p.-text Target specific breakpoints with Shrink responsive classes.
ul.-mb--3
  li
    code -flex--shrink0
  li
    code -flex--shrink1
  each size in ['sm', 'md', 'lg', 'xl']
    li
      code= '-flex-' + size + '--shrink0'
    li
      code= '-flex-' + size + '--shrink1'
h2 Basis
p.-text Use the <code>-flex--basis*</code> class to specify the initial size of the flex item, before any available space is distributed according to the flex factors.
p.-text
  | Flex-basis utility classes can be defined using the format <code>-flex-basis-{breakpoint}--{value}</code>.
  | Breakpoints supported are <code>sm</code>, <code>md</code>, <code>lg</code>, and <code>xl</code>.

h3 Target all breakpoints
p.-text Flex-basis utility classes with no breakpoint defined apply to all screen sizes.
section.chi-table.-bordered.-mt--3.-mb--3
  div
    table.-text(cellpadding='0', cellspacing='0')
      thead
        tr
          th
            div Flex-basis Class
          th
            div Value
      tbody
        each type in ['auto', '0', '*']
          tr
            td(width='40%')
              code= '-flex-basis--' + type
            td
              if (type == 'auto')
                code= 'flex-basis: ' + type + ';'
              else if (type == '0')
                code= 'flex-basis: ' + type + ';'
              else
                = 'can be incremented by 5%'

h3 Target specific breakpoints
p.-text To target a specific breakpoint, add the breakpoint abbreviation to the class.
section.chi-table.-bordered.-mt--3.-mb--3
  div
    table(cellpadding='0', cellspacing='0')
      thead
        tr
          th
            div Flex-basis Class
          th
            div Value
      tbody
        each size in ['sm', 'md', 'lg', 'xl']
          each type in ['auto', '0', '*']
            tr
              td.-text(width='40%')
                code= '-flex-basis-' + size + '--' + type
              td
                if (type == 'auto')
                  | Visible only from <code>#{size}</code>
                else if (type == '0')
                  | Visible only from <code>#{size}</code>
                else
                  | Visible only from <code>#{size}</code>, can be incremented by 5%

h3 Examples
.example.-mb--3
  .-p--3.-pb--1
    .-mb--2.-d--flex.-show--example.-bg--grey-10
      .-text.-p--2.-flex-basis--25 -flex-basis--25
    .-mb--2.-d--flex.-show--example.-bg--grey-10
      .-text.-p--2.-flex-basis--50 -flex-basis--50
    .-mb--2.-d--flex.-show--example.-bg--grey-10
      .-text.-p--2.-flex-basis-md--75 -flex-basis-md--75
    .-d--flex.-show--example.-bg--grey-10
      .-text.-p--2.-flex-basis-xl--50 -flex-basis-xl--50
  :code(lang="html")
    <!-- flex-basis 25% on all breakpoints -->
    <div class="-d--flex">
      <div class="-flex-basis--25"></div>
    </div>
    <!-- flex-basis 50% on all breakpoints -->
    <div class="-d--flex">
      <div class="-flex-basis--50"></div>
    </div>
    <!-- flex-basis 75% from md -->
    <div class="-d--flex">
      <div class="-flex-basis-md--75"></div>
    </div>
    <!-- flex-basis 50% from xl -->
    <div class="-d--flex">
      <div class="-flex-basis-xl--50"></div>
    </div>
