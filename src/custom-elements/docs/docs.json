{
  "timestamp": "2024-02-22T06:45:48",
  "compiler": {
    "name": "@stencil/core",
    "version": "4.12.3",
    "typescriptVersion": "5.3.3"
  },
  "components": [
    {
      "filePath": "src/components/alert/alert.tsx",
      "encapsulation": "scoped",
      "tag": "chi-alert",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "center",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "center",
          "reflectToAttr": true,
          "docs": "to center the alert content.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": true,
          "docs": "to make the alert dismissible.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"info\" | \"muted\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "AlertColors",
            "resolved": "\"danger\" | \"info\" | \"muted\" | \"success\" | \"warning\"",
            "references": {
              "AlertColors": {
                "location": "import",
                "path": "../../constants/color",
                "id": "src/constants/color.ts::AlertColors"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "to set alert state.",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "muted",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expirationTime",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "expiration-time",
          "reflectToAttr": true,
          "docs": "to set the alert expiration time (seconds).",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "to avoid the necessity of adding <chi-icon> to alert markup.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mutable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "mutable",
          "reflectToAttr": true,
          "docs": "to hide the alert when dismissed.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "to set alert size { sm, md, lg }.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spinner",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "spinner",
          "reflectToAttr": true,
          "docs": "To render alert with Spinner",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "title",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "title",
          "reflectToAttr": false,
          "docs": "To define alert title",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "to set alert type { bubble, banner, toast }.",
          "docsTags": [],
          "default": "'bubble'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "dismissAlert",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "custom event when trying to dismiss an alert.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "chi-icon",
        "chi-spinner",
        "chi-button"
      ],
      "dependencyGraph": {
        "chi-alert": [
          "chi-icon",
          "chi-spinner",
          "chi-button"
        ],
        "chi-button": [
          "chi-icon"
        ]
      }
    },
    {
      "filePath": "src/components/badge/badge.tsx",
      "encapsulation": "scoped",
      "tag": "chi-badge",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "to set color of a badge { primary, success, warning, danger, dark, muted, secondary, light, accent-1, accent-2, accent-3, accent-4, accent-5 }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "to set size of a badge { xs or sm }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTransform",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-transform",
          "reflectToAttr": true,
          "docs": "to transform the badge text { uppercase, lowercase, capitalize }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textWeight",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-weight",
          "reflectToAttr": true,
          "docs": "to set weight of the badge text { normal, semi-bold, bold }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "to set variant of a badge { outline, flat }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/brand/brand.tsx",
      "encapsulation": "scoped",
      "tag": "chi-brand",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "to set brand color { black, white, inverse }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "logo",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "logo",
          "reflectToAttr": true,
          "docs": "to set logo of brand { lumen, centurylink, brightspeed, colt }.",
          "docsTags": [],
          "default": "'lumen'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "to set size of brand.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "to set brand type { black, white, inverse }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/button/button.tsx",
      "encapsulation": "scoped",
      "tag": "chi-button",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "alternativeText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "alternative-text",
          "reflectToAttr": true,
          "docs": "to provide alternative text in case of icon buttons.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "center",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "center",
          "reflectToAttr": true,
          "docs": "to center align the text.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "to set button color { primary, secondary, danger, dark, light }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "to disable chi-button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "extraClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "extra-class",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fluid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "fluid",
          "reflectToAttr": true,
          "docs": "to render a button to fill the parent space.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "to set button size { xs, sm, md, lg, xl }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "to set button type { float, close, icon }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "uppercase",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "uppercase",
          "reflectToAttr": true,
          "docs": "to render a button with uppercase text.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "to set variant of a button { outline, flat }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chiClick",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "to emit a custom event when button is clicked.",
          "docsTags": []
        },
        {
          "event": "chiMouseEnter",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "to emit a custom event when the mouse pointer is moved onto the button.",
          "docsTags": []
        },
        {
          "event": "chiMouseLeave",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "to emit a custom event when the mouse pointer is moved out of the button.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "chi-alert",
        "chi-carousel",
        "chi-dropdown",
        "chi-popover"
      ],
      "dependencies": [
        "chi-icon"
      ],
      "dependencyGraph": {
        "chi-button": [
          "chi-icon"
        ],
        "chi-alert": [
          "chi-button"
        ],
        "chi-carousel": [
          "chi-button"
        ],
        "chi-dropdown": [
          "chi-button"
        ],
        "chi-popover": [
          "chi-button"
        ]
      }
    },
    {
      "filePath": "src/components/carousel/carousel.tsx",
      "encapsulation": "scoped",
      "tag": "chi-carousel",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autoplay",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autoplay",
          "reflectToAttr": false,
          "docs": "To set the autoplay for the carousel",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dots",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "dots",
          "reflectToAttr": false,
          "docs": "To render Carousel with dot controllers",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interval",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "interval",
          "reflectToAttr": false,
          "docs": "To set the interval for the autoplay",
          "docsTags": [],
          "default": "5",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noButtonControllers",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "no-button-controllers",
          "reflectToAttr": false,
          "docs": "To render Carousel without Button Controllers",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pagination",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "pagination",
          "reflectToAttr": false,
          "docs": "To render Carousel with pagination indicators",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "single",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "single",
          "reflectToAttr": false,
          "docs": "To render Carousel with a single item per view",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chiViewChange",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user navigates to another view",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "chi-button",
        "chi-icon"
      ],
      "dependencyGraph": {
        "chi-carousel": [
          "chi-button",
          "chi-icon"
        ],
        "chi-button": [
          "chi-icon"
        ]
      }
    },
    {
      "filePath": "src/components/checkbox/checkbox.tsx",
      "encapsulation": "scoped",
      "tag": "chi-checkbox",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "To render the checkbox in checked state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "To disable the checkbox",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "indeterminate",
          "reflectToAttr": false,
          "docs": "To add indeterminate state to checkbox",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "To provide checkbox label as a string",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "To render the checkbox input with a respective name attribute",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "To indicate which form field is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"danger\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "ChiStates",
            "resolved": "\"danger\" | \"success\" | \"warning\"",
            "references": {
              "ChiStates": {
                "location": "import",
                "path": "../../constants/states",
                "id": "src/constants/states.ts::ChiStates"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "To indicate the state",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chiChange",
          "detail": "boolean | string",
          "bubbles": true,
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user selects or deselects the checkbox",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/date/date.tsx",
      "encapsulation": "scoped",
      "tag": "chi-date",
      "readme": "# chi-date\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "excludedDates",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "excluded-dates",
          "reflectToAttr": true,
          "docs": "To specify which dates to disable",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "excludedWeekdays",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "excluded-weekdays",
          "reflectToAttr": true,
          "docs": "To specify which days of week to disable",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
          "complexType": {
            "original": "DateFormats",
            "resolved": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
            "references": {
              "DateFormats": {
                "location": "import",
                "path": "../../constants/constants",
                "id": "src/constants/constants.ts::DateFormats"
              }
            }
          },
          "mutable": false,
          "attr": "format",
          "reflectToAttr": true,
          "docs": "Date format used in the attributes and how it will be shown to the user.",
          "docsTags": [],
          "default": "'MM/DD/YYYY'",
          "values": [
            {
              "value": "DD/MM/YYYY",
              "type": "string"
            },
            {
              "value": "MM/DD/YYYY",
              "type": "string"
            },
            {
              "value": "YYYY/MM/DD",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "\"de\" | \"en\" | \"es\" | \"fr\" | \"ja\" | \"pt\" | \"zh\"",
          "complexType": {
            "original": "DataLocales",
            "resolved": "\"de\" | \"en\" | \"es\" | \"fr\" | \"ja\" | \"pt\" | \"zh\"",
            "references": {
              "DataLocales": {
                "location": "import",
                "path": "../../constants/constants",
                "id": "src/constants/constants.ts::DataLocales"
              }
            }
          },
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": true,
          "docs": "Locale to use in date picker",
          "docsTags": [],
          "default": "'en'",
          "values": [
            {
              "value": "de",
              "type": "string"
            },
            {
              "value": "en",
              "type": "string"
            },
            {
              "value": "es",
              "type": "string"
            },
            {
              "value": "fr",
              "type": "string"
            },
            {
              "value": "ja",
              "type": "string"
            },
            {
              "value": "pt",
              "type": "string"
            },
            {
              "value": "zh",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "Maximum eligible date",
          "docsTags": [],
          "default": "'12/31/2099'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "Minimum eligible date",
          "docsTags": [],
          "default": "'01/01/1900'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": true,
          "docs": "To allow the user to select multiple dates",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Selected date in the date picker",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getDate",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getDate() => Promise<string>",
          "parameters": [],
          "docs": "Gets date",
          "docsTags": []
        },
        {
          "name": "setDate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(date: any) => Promise<void>",
            "parameters": [
              {
                "name": "date",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setDate(date: any) => Promise<void>",
          "parameters": [
            {
              "name": "date",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "Sets date",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "chiDateChange",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Date change value event",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "chi-date-picker"
      ],
      "dependencies": [
        "chi-icon"
      ],
      "dependencyGraph": {
        "chi-date": [
          "chi-icon"
        ],
        "chi-date-picker": [
          "chi-date"
        ]
      }
    },
    {
      "filePath": "src/components/date-picker/date-picker.tsx",
      "encapsulation": "scoped",
      "tag": "chi-date-picker",
      "readme": "# chi-date-picker\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Indicates whether the dropdown calendar is open or closed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "to disable chi-date-picker.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "excludedDates",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "excluded-dates",
          "reflectToAttr": true,
          "docs": "To specify which dates to disable",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "excludedWeekdays",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "excluded-weekdays",
          "reflectToAttr": true,
          "docs": "To specify which days of week to disable",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
          "complexType": {
            "original": "DateFormats",
            "resolved": "\"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY/MM/DD\"",
            "references": {
              "DateFormats": {
                "location": "import",
                "path": "../../constants/constants",
                "id": "src/constants/constants.ts::DateFormats"
              }
            }
          },
          "mutable": false,
          "attr": "format",
          "reflectToAttr": true,
          "docs": "Date format used in the attributes and how it will be shown to the user.",
          "docsTags": [],
          "default": "'MM/DD/YYYY'",
          "values": [
            {
              "value": "DD/MM/YYYY",
              "type": "string"
            },
            {
              "value": "MM/DD/YYYY",
              "type": "string"
            },
            {
              "value": "YYYY/MM/DD",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helperMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-message",
          "reflectToAttr": true,
          "docs": "To display an additional helper text message below the Date Picker",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "locale",
          "type": "\"de\" | \"en\" | \"es\" | \"fr\" | \"ja\" | \"pt\" | \"zh\"",
          "complexType": {
            "original": "DataLocales",
            "resolved": "\"de\" | \"en\" | \"es\" | \"fr\" | \"ja\" | \"pt\" | \"zh\"",
            "references": {
              "DataLocales": {
                "location": "import",
                "path": "../../constants/constants",
                "id": "src/constants/constants.ts::DataLocales"
              }
            }
          },
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": true,
          "docs": "Locale to use in date picker",
          "docsTags": [],
          "default": "'en'",
          "values": [
            {
              "value": "de",
              "type": "string"
            },
            {
              "value": "en",
              "type": "string"
            },
            {
              "value": "es",
              "type": "string"
            },
            {
              "value": "fr",
              "type": "string"
            },
            {
              "value": "ja",
              "type": "string"
            },
            {
              "value": "pt",
              "type": "string"
            },
            {
              "value": "zh",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "Maximum eligible date",
          "docsTags": [],
          "default": "'12/31/2099'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "Minimum eligible date",
          "docsTags": [],
          "default": "'01/01/1900'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minutesStep",
          "type": "1 | 10 | 15 | 20 | 30 | 5",
          "complexType": {
            "original": "TimePickerTimeSteps",
            "resolved": "1 | 10 | 15 | 20 | 30 | 5",
            "references": {
              "TimePickerTimeSteps": {
                "location": "import",
                "path": "../../constants/constants",
                "id": "src/constants/constants.ts::TimePickerTimeSteps"
              }
            }
          },
          "mutable": false,
          "attr": "minutes-step",
          "reflectToAttr": true,
          "docs": "Renders minutes in stepped format. Defaults to 15 min steps if no value\nis provided (see examples in docs).",
          "docsTags": [],
          "default": "15",
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "10",
              "type": "number"
            },
            {
              "value": "15",
              "type": "number"
            },
            {
              "value": "20",
              "type": "number"
            },
            {
              "value": "30",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "string",
          "complexType": {
            "original": "DatePickerModes",
            "resolved": "string",
            "references": {
              "DatePickerModes": {
                "location": "import",
                "path": "../../constants/constants",
                "id": "src/constants/constants.ts::DatePickerModes"
              }
            }
          },
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": true,
          "docs": "To render Date Picker with Time Picker",
          "docsTags": [],
          "default": "'date'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": true,
          "docs": "To allow the user to select multiple dates",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"danger\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "ChiStates",
            "resolved": "\"danger\" | \"success\" | \"warning\"",
            "references": {
              "ChiStates": {
                "location": "import",
                "path": "../../constants/states",
                "id": "src/constants/states.ts::ChiStates"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": true,
          "docs": "To define state color of Date Picker",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "timeFormat",
          "type": "\"12hr\" | \"24hr\"",
          "complexType": {
            "original": "TimePickerFormats",
            "resolved": "\"12hr\" | \"24hr\"",
            "references": {
              "TimePickerFormats": {
                "location": "import",
                "path": "../../constants/constants",
                "id": "src/constants/constants.ts::TimePickerFormats"
              }
            }
          },
          "mutable": false,
          "attr": "time-format",
          "reflectToAttr": true,
          "docs": "To specify format for the Time Picker. Applicable only if mode is equal to 'datetime'",
          "docsTags": [],
          "values": [
            {
              "value": "12hr",
              "type": "string"
            },
            {
              "value": "24hr",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Selected date in the date picker",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getDate",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getDate() => Promise<string>",
          "parameters": [],
          "docs": "Gets date",
          "docsTags": []
        },
        {
          "name": "resetDate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "resetDate() => Promise<void>",
          "parameters": [],
          "docs": "Resets date",
          "docsTags": []
        },
        {
          "name": "setDate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(date: any) => Promise<void>",
            "parameters": [
              {
                "name": "date",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setDate(date: any) => Promise<void>",
          "parameters": [
            {
              "name": "date",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "Sets date",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "chiDateChange",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Date change value event",
          "docsTags": []
        },
        {
          "event": "chiDateInvalid",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered if the date value introduced by the user is invalid",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "chiDateChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "chiPopoverShow",
          "capture": false,
          "passive": false
        },
        {
          "event": "chiTimeChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "chi-date",
        "chi-time",
        "chi-popover",
        "chi-helper-message",
        "chi-icon"
      ],
      "dependencyGraph": {
        "chi-date-picker": [
          "chi-date",
          "chi-time",
          "chi-popover",
          "chi-helper-message",
          "chi-icon"
        ],
        "chi-date": [
          "chi-icon"
        ],
        "chi-popover": [
          "chi-button"
        ],
        "chi-button": [
          "chi-icon"
        ],
        "chi-helper-message": [
          "chi-icon"
        ]
      }
    },
    {
      "filePath": "src/components/drawer/drawer.tsx",
      "encapsulation": "scoped",
      "tag": "chi-drawer",
      "readme": "# chi-drawer\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "to open or close the drawer",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "backdrop",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "backdrop",
          "reflectToAttr": true,
          "docs": "to add a backdrop behind the drawer, which covers the viewport",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noHeader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "no-header",
          "reflectToAttr": true,
          "docs": "to remove the space for the header",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "nonClosable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "non-closable",
          "reflectToAttr": true,
          "docs": "To render Drawer without a close button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "portal",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "portal",
          "reflectToAttr": true,
          "docs": "to define portal style of the Drawer header",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "to set position of the drawer { top, right, bottom or left }",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "preventAutoHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "prevent-auto-hide",
          "reflectToAttr": true,
          "docs": "to prevent closing when the user clicked outside the Drawer",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "title",
          "type": "string",
          "mutable": false,
          "attr": "title",
          "reflectToAttr": true,
          "docs": "to define drawer title. Not compatible with no-header",
          "docsTags": [],
          "default": false,
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "Hides the drawer",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "Shows the drawer.",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "toggle() => Promise<void>",
          "parameters": [],
          "docs": "Toggles active state (show/hide)",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "chiDrawerHidden",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Drawer has been hidden to the user. The animation has completed.",
          "docsTags": []
        },
        {
          "event": "chiDrawerHide",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Drawer hide method has executed, but the closing animation has not started yet",
          "docsTags": []
        },
        {
          "event": "chiDrawerShow",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Drawer show method has executed, but the showing animation has not started yet",
          "docsTags": []
        },
        {
          "event": "chiDrawerShown",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Drawer has been shown to the user and is fully visible. The animation has completed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "chi-icon"
      ],
      "dependencyGraph": {
        "chi-drawer": [
          "chi-icon"
        ]
      }
    },
    {
      "filePath": "src/components/dropdown/dropdown.tsx",
      "encapsulation": "scoped",
      "tag": "chi-dropdown",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "To set the state of Dropdown",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "animateChevron",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "animate-chevron",
          "reflectToAttr": false,
          "docs": "To animate the chevron of Dropdown",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "button",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "button",
          "reflectToAttr": false,
          "docs": "To provide the value of base-style button as trigger of the Dropdown",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "color",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "To set the color of the button. The value is directly passed to\nchi-button element if present  { primary, secondary, danger, dark, light }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "To enable the description of Dropdown menu item",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "to disable chi-button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fluid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "fluid",
          "reflectToAttr": false,
          "docs": "To render Dropdowns that span the full width of the parent container",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fontWeight",
          "type": "\"normal\"",
          "complexType": {
            "original": "FontWeight",
            "resolved": "\"normal\"",
            "references": {
              "FontWeight": {
                "location": "import",
                "path": "../../constants/types",
                "id": "src/constants/types.ts::FontWeight"
              }
            }
          },
          "mutable": false,
          "attr": "font-weight",
          "reflectToAttr": true,
          "docs": "To set weight of the button text { normal }.",
          "docsTags": [],
          "values": [
            {
              "value": "normal",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hover",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hover",
          "reflectToAttr": false,
          "docs": "To configure activation on hover of the Dropdown with base-style button trigger",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "Placement",
            "resolved": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "Placement": {
                "location": "import",
                "path": "popper.js",
                "id": ""
              }
            }
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "To set position of the Dropdown",
          "docsTags": [],
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "preventAutoHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "prevent-auto-hide",
          "reflectToAttr": true,
          "docs": "To prevent hiding of the Dropdown when clicking outside its bounds",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "preventItemSelected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "prevent-item-selected",
          "reflectToAttr": false,
          "docs": "To prevent emitting the event chiDropdownItemSelected when an item is clicked",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reference",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "reference",
          "reflectToAttr": true,
          "docs": "To provide selector of an external reference element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "to set button size { xs, sm, md, lg, xl }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "uppercase",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "uppercase",
          "reflectToAttr": false,
          "docs": "to render a button with uppercase text.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "To set the variant of the button. The value is directly passed to\nchi-button element if present { outline, flat }",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "visibleItems",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "visible-items",
          "reflectToAttr": false,
          "docs": "To provide number of items in the dropdown to be displayed, and apply scroll if needed",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "Hides the dropdown",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "Shows the dropdown",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "toggle() => Promise<void>",
          "parameters": [],
          "docs": "Toggles active state (show/hide)",
          "docsTags": []
        },
        {
          "name": "updatePopper",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "updatePopper() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "chiDropdownHide",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when hiding the Dropdown",
          "docsTags": []
        },
        {
          "event": "chiDropdownItemSelected",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when select an item in the dropdown menu",
          "docsTags": []
        },
        {
          "event": "chiDropdownKeyDown",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when press key to up/down the Dropdown menu items",
          "docsTags": []
        },
        {
          "event": "chiDropdownShow",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when showing the Dropdown",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "chi-search-input",
        "chi-tabs"
      ],
      "dependencies": [
        "chi-button"
      ],
      "dependencyGraph": {
        "chi-dropdown": [
          "chi-button"
        ],
        "chi-button": [
          "chi-icon"
        ],
        "chi-search-input": [
          "chi-dropdown"
        ],
        "chi-tabs": [
          "chi-dropdown"
        ]
      }
    },
    {
      "filePath": "src/components/expansion-panel/expansion-panel.tsx",
      "encapsulation": "scoped",
      "tag": "chi-expansion-panel",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "bordered",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "bordered",
          "reflectToAttr": true,
          "docs": "to set the panel style to bordered",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": true,
          "docs": "to set expansion panel state. Possible values are: {'done', 'active', 'pending' (default value), and 'disabled'}",
          "docsTags": [],
          "default": "'pending'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateIcon",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "state-icon",
          "reflectToAttr": true,
          "docs": "to render a state icon within the panel",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateIconTooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "state-icon-tooltip",
          "reflectToAttr": true,
          "docs": "to render a state tooltip",
          "docsTags": [],
          "default": "EPANEL_TOOLTIP_CONTENT",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": true,
          "docs": "to set a step number next to the title of the panel",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "title",
          "type": "string",
          "mutable": false,
          "attr": "title",
          "reflectToAttr": true,
          "docs": "to define expansion panel title.",
          "docsTags": [],
          "default": false,
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/helper-message/helper-message.tsx",
      "encapsulation": "scoped",
      "tag": "chi-helper-message",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "state",
          "type": "\"danger\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "ChiStates",
            "resolved": "\"danger\" | \"success\" | \"warning\"",
            "references": {
              "ChiStates": {
                "location": "import",
                "path": "../../constants/states",
                "id": "src/constants/states.ts::ChiStates"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": true,
          "docs": "To define state color of message text",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "chi-date-picker",
        "chi-number-input",
        "chi-text-input",
        "chi-textarea"
      ],
      "dependencies": [
        "chi-icon"
      ],
      "dependencyGraph": {
        "chi-helper-message": [
          "chi-icon"
        ],
        "chi-date-picker": [
          "chi-helper-message"
        ],
        "chi-number-input": [
          "chi-helper-message"
        ],
        "chi-text-input": [
          "chi-helper-message"
        ],
        "chi-textarea": [
          "chi-helper-message"
        ]
      }
    },
    {
      "filePath": "src/components/icon/icon.tsx",
      "encapsulation": "scoped",
      "tag": "chi-icon",
      "readme": "# chi-icon\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"grey\" | \"info\" | \"light\" | \"muted\" | \"navy\" | \"orange\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "IconColors",
            "resolved": "\"danger\" | \"dark\" | \"grey\" | \"info\" | \"light\" | \"muted\" | \"navy\" | \"orange\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
            "references": {
              "IconColors": {
                "location": "import",
                "path": "../../constants/color",
                "id": "src/constants/color.ts::IconColors"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "OPTIONAL. Color of the Icon.",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "muted",
              "type": "string"
            },
            {
              "value": "navy",
              "type": "string"
            },
            {
              "value": "orange",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "extraClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "extra-class",
          "reflectToAttr": true,
          "docs": "OPTIONAL classes",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Icon to be rendered.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "IconSizes",
            "resolved": "string",
            "references": {
              "IconSizes": {
                "location": "import",
                "path": "../../constants/size",
                "id": "src/constants/size.ts::IconSizes"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "OPTIONAL. Size of the Icon.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "chi-alert",
        "chi-button",
        "chi-carousel",
        "chi-date",
        "chi-date-picker",
        "chi-drawer",
        "chi-helper-message",
        "chi-number-input",
        "chi-text-input",
        "chi-textarea",
        "chi-time-picker"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "chi-alert": [
          "chi-icon"
        ],
        "chi-button": [
          "chi-icon"
        ],
        "chi-carousel": [
          "chi-icon"
        ],
        "chi-date": [
          "chi-icon"
        ],
        "chi-date-picker": [
          "chi-icon"
        ],
        "chi-drawer": [
          "chi-icon"
        ],
        "chi-helper-message": [
          "chi-icon"
        ],
        "chi-number-input": [
          "chi-icon"
        ],
        "chi-text-input": [
          "chi-icon"
        ],
        "chi-textarea": [
          "chi-icon"
        ],
        "chi-time-picker": [
          "chi-icon"
        ]
      }
    },
    {
      "filePath": "src/components/label/label.tsx",
      "encapsulation": "scoped",
      "tag": "chi-label",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "for",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "for",
          "reflectToAttr": true,
          "docs": "To indicate ID of target form control web component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optional",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "optional",
          "reflectToAttr": true,
          "docs": "To indicate which form field is optional.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "To indicate which form field is required.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "OPTIONAL. Size of the label. { xs, sm, md, lg, xl }.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/link/link.tsx",
      "encapsulation": "scoped",
      "tag": "chi-link",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "alternativeText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "alternative-text",
          "reflectToAttr": true,
          "docs": "to provide alternative text in case of icon links.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cta",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "cta",
          "reflectToAttr": true,
          "docs": "to render a link as a prominent call to action.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "to disable a link.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "download",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "download",
          "reflectToAttr": true,
          "docs": "to prompt users to save a page or document instead of navigating to it.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "to set a link's destination url.",
          "docsTags": [],
          "default": "'#'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hreflang",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hreflang",
          "reflectToAttr": true,
          "docs": "to set the language of a link's destination url.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noHoverUnderline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "no-hover-underline",
          "reflectToAttr": true,
          "docs": "to remove a link's underline on hover.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": true,
          "docs": "to set the relationship between the current page and the linked page.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "to set size of a link { xs, sm, md, lg, xl }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": true,
          "docs": "to set target of a link.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/app-layout/app-layout.tsx",
      "encapsulation": "scoped",
      "tag": "chi-main",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "backlink",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "backlink",
          "reflectToAttr": true,
          "docs": "To define app layout back link",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "backlinkHref",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "backlink-href",
          "reflectToAttr": true,
          "docs": "to set a links destination url",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "string",
          "complexType": {
            "original": "AppLayoutFormats",
            "resolved": "string",
            "references": {
              "AppLayoutFormats": {
                "location": "import",
                "path": "../../constants/constants",
                "id": "src/constants/constants.ts::AppLayoutFormats"
              }
            }
          },
          "mutable": false,
          "attr": "format",
          "reflectToAttr": true,
          "docs": "to set app layout format { base, no-margin, fixed-width }.",
          "docsTags": [],
          "default": "'base'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headerBackground",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "header-background",
          "reflectToAttr": true,
          "docs": "To define app layout header background",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subtitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "subtitle",
          "reflectToAttr": true,
          "docs": "To define app layout subtitle",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "title",
          "type": "string",
          "mutable": false,
          "attr": "title",
          "reflectToAttr": true,
          "docs": "to define app layout title.",
          "docsTags": [],
          "default": false,
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chiBacklinkClick",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "The user has clicked the backlink",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/marketing-icon/marketing-icon.tsx",
      "encapsulation": "scoped",
      "tag": "chi-marketing-icon",
      "readme": "# chi-marketing-icon\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "extraClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "extra-class",
          "reflectToAttr": true,
          "docs": "OPTIONAL classes",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Icon to be rendered.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "MarketingIconSizes",
            "resolved": "string",
            "references": {
              "MarketingIconSizes": {
                "location": "import",
                "path": "../../constants/size",
                "id": "src/constants/size.ts::MarketingIconSizes"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "OPTIONAL. Size of the Icon { xs, sm, md, lg }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"filled\" | \"outline\"",
          "complexType": {
            "original": "ChiMarketingIconModes",
            "resolved": "\"filled\" | \"outline\"",
            "references": {
              "ChiMarketingIconModes": {
                "location": "import",
                "path": "../../constants/types",
                "id": "src/constants/types.ts::ChiMarketingIconModes"
              }
            }
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "To render Marketing icon as filled or outline",
          "docsTags": [],
          "default": "'filled'",
          "values": [
            {
              "value": "filled",
              "type": "string"
            },
            {
              "value": "outline",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/number-input/number-input.tsx",
      "encapsulation": "scoped",
      "tag": "chi-number-input",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "used to determine if component is disabled or not",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "used to set component's expanded mode",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helperMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-message",
          "reflectToAttr": true,
          "docs": "To display an additional helper text message below the Number Input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputstyle",
          "type": "\"danger\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "ChiStates",
            "resolved": "\"danger\" | \"success\" | \"warning\"",
            "references": {
              "ChiStates": {
                "location": "import",
                "path": "../../constants/states",
                "id": "src/constants/states.ts::ChiStates"
              }
            }
          },
          "mutable": false,
          "attr": "inputstyle",
          "reflectToAttr": false,
          "docs": "used to provide an input style like 'danger'. Mostly used for testing purposes",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "used to set a maximum allowed value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "used to set a minimum allowed value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "preventValueMutation",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "prevent-value-mutation",
          "reflectToAttr": true,
          "docs": "If set, component value won't be updated by itself.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "used to determine if component is required or not",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "used to determine component's size",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "state",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "used to provide an input state like 'hover' or 'focus'. Mostly used for testing purposes",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": true,
          "docs": "used to set a step to indicate the expected granularity",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "used to hold the value of the number input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chiBlur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the element has lost focus.",
          "docsTags": []
        },
        {
          "event": "chiChange",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when an alteration to the element's value is committed by the user",
          "docsTags": []
        },
        {
          "event": "chiClick",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user clicks on increment/decrement button.",
          "docsTags": []
        },
        {
          "event": "chiFocus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user sets focus on the element.",
          "docsTags": []
        },
        {
          "event": "chiInput",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user changed the element's value but did not commit the change yet",
          "docsTags": []
        },
        {
          "event": "chiNumberInvalid",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the element's value committed by the user is an invalid number",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "chi-icon",
        "chi-helper-message"
      ],
      "dependencyGraph": {
        "chi-number-input": [
          "chi-icon",
          "chi-helper-message"
        ],
        "chi-helper-message": [
          "chi-icon"
        ]
      }
    },
    {
      "filePath": "src/components/pagination/pagination.tsx",
      "encapsulation": "scoped",
      "tag": "chi-pagination",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "ariaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "aria-label",
          "reflectToAttr": false,
          "docs": "To define aria label of pagination",
          "docsTags": [],
          "default": "'Pagination'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "compact",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": false,
          "docs": "To define compact style of pagination",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "currentPage",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "current-page",
          "reflectToAttr": false,
          "docs": "To define current page of pagination",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "firstLast",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "first-last",
          "reflectToAttr": false,
          "docs": "To add First page / Last page icon buttons",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverse",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inverse",
          "reflectToAttr": false,
          "docs": "To render inverse styled pagination",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pageJumper",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "page-jumper",
          "reflectToAttr": false,
          "docs": "To add jump to page text input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pageSize",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "page-size",
          "reflectToAttr": false,
          "docs": "To allow use select number of items to show per page",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pages",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "pages",
          "reflectToAttr": false,
          "docs": "To define number of pages to render",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "results",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "results",
          "reflectToAttr": false,
          "docs": "To show number of result items",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "To define size of pagination elements",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chiPageChange",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user navigates to another page by clicking pagination item buttons or changing value of Page Jumper input",
          "docsTags": []
        },
        {
          "event": "chiPageSizeChange",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user changes items per page value",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/phone-input/phone-input.tsx",
      "encapsulation": "scoped",
      "tag": "chi-phone-input",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "defaultCountry",
          "type": "\"RS\" | \"ME\" | \"AC\" | \"AD\" | \"AE\" | \"AF\" | \"AG\" | \"AI\" | \"AL\" | \"AM\" | \"AO\" | \"AR\" | \"AS\" | \"AT\" | \"AU\" | \"AW\" | \"AX\" | \"AZ\" | \"BA\" | \"BB\" | \"BD\" | \"BE\" | \"BF\" | \"BG\" | \"BH\" | \"BI\" | \"BJ\" | \"BL\" | \"BM\" | \"BN\" | \"BO\" | \"BQ\" | \"BR\" | \"BS\" | \"BT\" | \"BW\" | \"BY\" | \"BZ\" | \"CA\" | \"CC\" | \"CD\" | \"CF\" | \"CG\" | \"CH\" | \"CI\" | \"CK\" | \"CL\" | \"CM\" | \"CN\" | \"CO\" | \"CR\" | \"CU\" | \"CV\" | \"CW\" | \"CX\" | \"CY\" | \"CZ\" | \"DE\" | \"DJ\" | \"DK\" | \"DM\" | \"DO\" | \"DZ\" | \"EC\" | \"EE\" | \"EG\" | \"EH\" | \"ER\" | \"ES\" | \"ET\" | \"FI\" | \"FJ\" | \"FK\" | \"FM\" | \"FO\" | \"FR\" | \"GA\" | \"GB\" | \"GD\" | \"GE\" | \"GF\" | \"GG\" | \"GH\" | \"GI\" | \"GL\" | \"GM\" | \"GN\" | \"GP\" | \"GQ\" | \"GR\" | \"GT\" | \"GU\" | \"GW\" | \"GY\" | \"HK\" | \"HN\" | \"HR\" | \"HT\" | \"HU\" | \"ID\" | \"IE\" | \"IL\" | \"IM\" | \"IN\" | \"IO\" | \"IQ\" | \"IR\" | \"IS\" | \"IT\" | \"JE\" | \"JM\" | \"JO\" | \"JP\" | \"KE\" | \"KG\" | \"KH\" | \"KI\" | \"KM\" | \"KN\" | \"KP\" | \"KR\" | \"KW\" | \"KY\" | \"KZ\" | \"LA\" | \"LB\" | \"LC\" | \"LI\" | \"LK\" | \"LR\" | \"LS\" | \"LT\" | \"LU\" | \"LV\" | \"LY\" | \"MA\" | \"MC\" | \"MD\" | \"MF\" | \"MG\" | \"MH\" | \"MK\" | \"ML\" | \"MM\" | \"MN\" | \"MO\" | \"MP\" | \"MQ\" | \"MR\" | \"MS\" | \"MT\" | \"MU\" | \"MV\" | \"MW\" | \"MX\" | \"MY\" | \"MZ\" | \"NA\" | \"NC\" | \"NE\" | \"NF\" | \"NG\" | \"NI\" | \"NL\" | \"NO\" | \"NP\" | \"NR\" | \"NU\" | \"NZ\" | \"OM\" | \"PA\" | \"PE\" | \"PF\" | \"PG\" | \"PH\" | \"PK\" | \"PL\" | \"PM\" | \"PR\" | \"PS\" | \"PT\" | \"PW\" | \"PY\" | \"QA\" | \"RE\" | \"RO\" | \"RU\" | \"RW\" | \"SA\" | \"SB\" | \"SC\" | \"SD\" | \"SE\" | \"SG\" | \"SH\" | \"SI\" | \"SJ\" | \"SK\" | \"SL\" | \"SM\" | \"SN\" | \"SO\" | \"SR\" | \"SS\" | \"ST\" | \"SV\" | \"SX\" | \"SY\" | \"SZ\" | \"TA\" | \"TC\" | \"TD\" | \"TG\" | \"TH\" | \"TJ\" | \"TK\" | \"TL\" | \"TM\" | \"TN\" | \"TO\" | \"TR\" | \"TT\" | \"TV\" | \"TW\" | \"TZ\" | \"UA\" | \"UG\" | \"US\" | \"UY\" | \"UZ\" | \"VA\" | \"VC\" | \"VE\" | \"VG\" | \"VI\" | \"VN\" | \"VU\" | \"WF\" | \"WS\" | \"XK\" | \"YE\" | \"YT\" | \"ZA\" | \"ZM\" | \"ZW\"",
          "complexType": {
            "original": "CountryCode",
            "resolved": "\"RS\" | \"ME\" | \"AC\" | \"AD\" | \"AE\" | \"AF\" | \"AG\" | \"AI\" | \"AL\" | \"AM\" | \"AO\" | \"AR\" | \"AS\" | \"AT\" | \"AU\" | \"AW\" | \"AX\" | \"AZ\" | \"BA\" | \"BB\" | \"BD\" | \"BE\" | \"BF\" | \"BG\" | \"BH\" | \"BI\" | \"BJ\" | \"BL\" | \"BM\" | \"BN\" | \"BO\" | \"BQ\" | \"BR\" | \"BS\" | \"BT\" | \"BW\" | \"BY\" | \"BZ\" | \"CA\" | \"CC\" | \"CD\" | \"CF\" | \"CG\" | \"CH\" | \"CI\" | \"CK\" | \"CL\" | \"CM\" | \"CN\" | \"CO\" | \"CR\" | \"CU\" | \"CV\" | \"CW\" | \"CX\" | \"CY\" | \"CZ\" | \"DE\" | \"DJ\" | \"DK\" | \"DM\" | \"DO\" | \"DZ\" | \"EC\" | \"EE\" | \"EG\" | \"EH\" | \"ER\" | \"ES\" | \"ET\" | \"FI\" | \"FJ\" | \"FK\" | \"FM\" | \"FO\" | \"FR\" | \"GA\" | \"GB\" | \"GD\" | \"GE\" | \"GF\" | \"GG\" | \"GH\" | \"GI\" | \"GL\" | \"GM\" | \"GN\" | \"GP\" | \"GQ\" | \"GR\" | \"GT\" | \"GU\" | \"GW\" | \"GY\" | \"HK\" | \"HN\" | \"HR\" | \"HT\" | \"HU\" | \"ID\" | \"IE\" | \"IL\" | \"IM\" | \"IN\" | \"IO\" | \"IQ\" | \"IR\" | \"IS\" | \"IT\" | \"JE\" | \"JM\" | \"JO\" | \"JP\" | \"KE\" | \"KG\" | \"KH\" | \"KI\" | \"KM\" | \"KN\" | \"KP\" | \"KR\" | \"KW\" | \"KY\" | \"KZ\" | \"LA\" | \"LB\" | \"LC\" | \"LI\" | \"LK\" | \"LR\" | \"LS\" | \"LT\" | \"LU\" | \"LV\" | \"LY\" | \"MA\" | \"MC\" | \"MD\" | \"MF\" | \"MG\" | \"MH\" | \"MK\" | \"ML\" | \"MM\" | \"MN\" | \"MO\" | \"MP\" | \"MQ\" | \"MR\" | \"MS\" | \"MT\" | \"MU\" | \"MV\" | \"MW\" | \"MX\" | \"MY\" | \"MZ\" | \"NA\" | \"NC\" | \"NE\" | \"NF\" | \"NG\" | \"NI\" | \"NL\" | \"NO\" | \"NP\" | \"NR\" | \"NU\" | \"NZ\" | \"OM\" | \"PA\" | \"PE\" | \"PF\" | \"PG\" | \"PH\" | \"PK\" | \"PL\" | \"PM\" | \"PR\" | \"PS\" | \"PT\" | \"PW\" | \"PY\" | \"QA\" | \"RE\" | \"RO\" | \"RU\" | \"RW\" | \"SA\" | \"SB\" | \"SC\" | \"SD\" | \"SE\" | \"SG\" | \"SH\" | \"SI\" | \"SJ\" | \"SK\" | \"SL\" | \"SM\" | \"SN\" | \"SO\" | \"SR\" | \"SS\" | \"ST\" | \"SV\" | \"SX\" | \"SY\" | \"SZ\" | \"TA\" | \"TC\" | \"TD\" | \"TG\" | \"TH\" | \"TJ\" | \"TK\" | \"TL\" | \"TM\" | \"TN\" | \"TO\" | \"TR\" | \"TT\" | \"TV\" | \"TW\" | \"TZ\" | \"UA\" | \"UG\" | \"US\" | \"UY\" | \"UZ\" | \"VA\" | \"VC\" | \"VE\" | \"VG\" | \"VI\" | \"VN\" | \"VU\" | \"WF\" | \"WS\" | \"XK\" | \"YE\" | \"YT\" | \"ZA\" | \"ZM\" | \"ZW\"",
            "references": {
              "CountryCode": {
                "location": "import",
                "path": "libphonenumber-js",
                "id": ""
              }
            }
          },
          "mutable": false,
          "attr": "default-country",
          "reflectToAttr": true,
          "docs": "To set a default country as a two letter ISO country code",
          "docsTags": [],
          "default": "'US'",
          "values": [
            {
              "value": "RS",
              "type": "string"
            },
            {
              "value": "ME",
              "type": "string"
            },
            {
              "value": "AC",
              "type": "string"
            },
            {
              "value": "AD",
              "type": "string"
            },
            {
              "value": "AE",
              "type": "string"
            },
            {
              "value": "AF",
              "type": "string"
            },
            {
              "value": "AG",
              "type": "string"
            },
            {
              "value": "AI",
              "type": "string"
            },
            {
              "value": "AL",
              "type": "string"
            },
            {
              "value": "AM",
              "type": "string"
            },
            {
              "value": "AO",
              "type": "string"
            },
            {
              "value": "AR",
              "type": "string"
            },
            {
              "value": "AS",
              "type": "string"
            },
            {
              "value": "AT",
              "type": "string"
            },
            {
              "value": "AU",
              "type": "string"
            },
            {
              "value": "AW",
              "type": "string"
            },
            {
              "value": "AX",
              "type": "string"
            },
            {
              "value": "AZ",
              "type": "string"
            },
            {
              "value": "BA",
              "type": "string"
            },
            {
              "value": "BB",
              "type": "string"
            },
            {
              "value": "BD",
              "type": "string"
            },
            {
              "value": "BE",
              "type": "string"
            },
            {
              "value": "BF",
              "type": "string"
            },
            {
              "value": "BG",
              "type": "string"
            },
            {
              "value": "BH",
              "type": "string"
            },
            {
              "value": "BI",
              "type": "string"
            },
            {
              "value": "BJ",
              "type": "string"
            },
            {
              "value": "BL",
              "type": "string"
            },
            {
              "value": "BM",
              "type": "string"
            },
            {
              "value": "BN",
              "type": "string"
            },
            {
              "value": "BO",
              "type": "string"
            },
            {
              "value": "BQ",
              "type": "string"
            },
            {
              "value": "BR",
              "type": "string"
            },
            {
              "value": "BS",
              "type": "string"
            },
            {
              "value": "BT",
              "type": "string"
            },
            {
              "value": "BW",
              "type": "string"
            },
            {
              "value": "BY",
              "type": "string"
            },
            {
              "value": "BZ",
              "type": "string"
            },
            {
              "value": "CA",
              "type": "string"
            },
            {
              "value": "CC",
              "type": "string"
            },
            {
              "value": "CD",
              "type": "string"
            },
            {
              "value": "CF",
              "type": "string"
            },
            {
              "value": "CG",
              "type": "string"
            },
            {
              "value": "CH",
              "type": "string"
            },
            {
              "value": "CI",
              "type": "string"
            },
            {
              "value": "CK",
              "type": "string"
            },
            {
              "value": "CL",
              "type": "string"
            },
            {
              "value": "CM",
              "type": "string"
            },
            {
              "value": "CN",
              "type": "string"
            },
            {
              "value": "CO",
              "type": "string"
            },
            {
              "value": "CR",
              "type": "string"
            },
            {
              "value": "CU",
              "type": "string"
            },
            {
              "value": "CV",
              "type": "string"
            },
            {
              "value": "CW",
              "type": "string"
            },
            {
              "value": "CX",
              "type": "string"
            },
            {
              "value": "CY",
              "type": "string"
            },
            {
              "value": "CZ",
              "type": "string"
            },
            {
              "value": "DE",
              "type": "string"
            },
            {
              "value": "DJ",
              "type": "string"
            },
            {
              "value": "DK",
              "type": "string"
            },
            {
              "value": "DM",
              "type": "string"
            },
            {
              "value": "DO",
              "type": "string"
            },
            {
              "value": "DZ",
              "type": "string"
            },
            {
              "value": "EC",
              "type": "string"
            },
            {
              "value": "EE",
              "type": "string"
            },
            {
              "value": "EG",
              "type": "string"
            },
            {
              "value": "EH",
              "type": "string"
            },
            {
              "value": "ER",
              "type": "string"
            },
            {
              "value": "ES",
              "type": "string"
            },
            {
              "value": "ET",
              "type": "string"
            },
            {
              "value": "FI",
              "type": "string"
            },
            {
              "value": "FJ",
              "type": "string"
            },
            {
              "value": "FK",
              "type": "string"
            },
            {
              "value": "FM",
              "type": "string"
            },
            {
              "value": "FO",
              "type": "string"
            },
            {
              "value": "FR",
              "type": "string"
            },
            {
              "value": "GA",
              "type": "string"
            },
            {
              "value": "GB",
              "type": "string"
            },
            {
              "value": "GD",
              "type": "string"
            },
            {
              "value": "GE",
              "type": "string"
            },
            {
              "value": "GF",
              "type": "string"
            },
            {
              "value": "GG",
              "type": "string"
            },
            {
              "value": "GH",
              "type": "string"
            },
            {
              "value": "GI",
              "type": "string"
            },
            {
              "value": "GL",
              "type": "string"
            },
            {
              "value": "GM",
              "type": "string"
            },
            {
              "value": "GN",
              "type": "string"
            },
            {
              "value": "GP",
              "type": "string"
            },
            {
              "value": "GQ",
              "type": "string"
            },
            {
              "value": "GR",
              "type": "string"
            },
            {
              "value": "GT",
              "type": "string"
            },
            {
              "value": "GU",
              "type": "string"
            },
            {
              "value": "GW",
              "type": "string"
            },
            {
              "value": "GY",
              "type": "string"
            },
            {
              "value": "HK",
              "type": "string"
            },
            {
              "value": "HN",
              "type": "string"
            },
            {
              "value": "HR",
              "type": "string"
            },
            {
              "value": "HT",
              "type": "string"
            },
            {
              "value": "HU",
              "type": "string"
            },
            {
              "value": "ID",
              "type": "string"
            },
            {
              "value": "IE",
              "type": "string"
            },
            {
              "value": "IL",
              "type": "string"
            },
            {
              "value": "IM",
              "type": "string"
            },
            {
              "value": "IN",
              "type": "string"
            },
            {
              "value": "IO",
              "type": "string"
            },
            {
              "value": "IQ",
              "type": "string"
            },
            {
              "value": "IR",
              "type": "string"
            },
            {
              "value": "IS",
              "type": "string"
            },
            {
              "value": "IT",
              "type": "string"
            },
            {
              "value": "JE",
              "type": "string"
            },
            {
              "value": "JM",
              "type": "string"
            },
            {
              "value": "JO",
              "type": "string"
            },
            {
              "value": "JP",
              "type": "string"
            },
            {
              "value": "KE",
              "type": "string"
            },
            {
              "value": "KG",
              "type": "string"
            },
            {
              "value": "KH",
              "type": "string"
            },
            {
              "value": "KI",
              "type": "string"
            },
            {
              "value": "KM",
              "type": "string"
            },
            {
              "value": "KN",
              "type": "string"
            },
            {
              "value": "KP",
              "type": "string"
            },
            {
              "value": "KR",
              "type": "string"
            },
            {
              "value": "KW",
              "type": "string"
            },
            {
              "value": "KY",
              "type": "string"
            },
            {
              "value": "KZ",
              "type": "string"
            },
            {
              "value": "LA",
              "type": "string"
            },
            {
              "value": "LB",
              "type": "string"
            },
            {
              "value": "LC",
              "type": "string"
            },
            {
              "value": "LI",
              "type": "string"
            },
            {
              "value": "LK",
              "type": "string"
            },
            {
              "value": "LR",
              "type": "string"
            },
            {
              "value": "LS",
              "type": "string"
            },
            {
              "value": "LT",
              "type": "string"
            },
            {
              "value": "LU",
              "type": "string"
            },
            {
              "value": "LV",
              "type": "string"
            },
            {
              "value": "LY",
              "type": "string"
            },
            {
              "value": "MA",
              "type": "string"
            },
            {
              "value": "MC",
              "type": "string"
            },
            {
              "value": "MD",
              "type": "string"
            },
            {
              "value": "MF",
              "type": "string"
            },
            {
              "value": "MG",
              "type": "string"
            },
            {
              "value": "MH",
              "type": "string"
            },
            {
              "value": "MK",
              "type": "string"
            },
            {
              "value": "ML",
              "type": "string"
            },
            {
              "value": "MM",
              "type": "string"
            },
            {
              "value": "MN",
              "type": "string"
            },
            {
              "value": "MO",
              "type": "string"
            },
            {
              "value": "MP",
              "type": "string"
            },
            {
              "value": "MQ",
              "type": "string"
            },
            {
              "value": "MR",
              "type": "string"
            },
            {
              "value": "MS",
              "type": "string"
            },
            {
              "value": "MT",
              "type": "string"
            },
            {
              "value": "MU",
              "type": "string"
            },
            {
              "value": "MV",
              "type": "string"
            },
            {
              "value": "MW",
              "type": "string"
            },
            {
              "value": "MX",
              "type": "string"
            },
            {
              "value": "MY",
              "type": "string"
            },
            {
              "value": "MZ",
              "type": "string"
            },
            {
              "value": "NA",
              "type": "string"
            },
            {
              "value": "NC",
              "type": "string"
            },
            {
              "value": "NE",
              "type": "string"
            },
            {
              "value": "NF",
              "type": "string"
            },
            {
              "value": "NG",
              "type": "string"
            },
            {
              "value": "NI",
              "type": "string"
            },
            {
              "value": "NL",
              "type": "string"
            },
            {
              "value": "NO",
              "type": "string"
            },
            {
              "value": "NP",
              "type": "string"
            },
            {
              "value": "NR",
              "type": "string"
            },
            {
              "value": "NU",
              "type": "string"
            },
            {
              "value": "NZ",
              "type": "string"
            },
            {
              "value": "OM",
              "type": "string"
            },
            {
              "value": "PA",
              "type": "string"
            },
            {
              "value": "PE",
              "type": "string"
            },
            {
              "value": "PF",
              "type": "string"
            },
            {
              "value": "PG",
              "type": "string"
            },
            {
              "value": "PH",
              "type": "string"
            },
            {
              "value": "PK",
              "type": "string"
            },
            {
              "value": "PL",
              "type": "string"
            },
            {
              "value": "PM",
              "type": "string"
            },
            {
              "value": "PR",
              "type": "string"
            },
            {
              "value": "PS",
              "type": "string"
            },
            {
              "value": "PT",
              "type": "string"
            },
            {
              "value": "PW",
              "type": "string"
            },
            {
              "value": "PY",
              "type": "string"
            },
            {
              "value": "QA",
              "type": "string"
            },
            {
              "value": "RE",
              "type": "string"
            },
            {
              "value": "RO",
              "type": "string"
            },
            {
              "value": "RU",
              "type": "string"
            },
            {
              "value": "RW",
              "type": "string"
            },
            {
              "value": "SA",
              "type": "string"
            },
            {
              "value": "SB",
              "type": "string"
            },
            {
              "value": "SC",
              "type": "string"
            },
            {
              "value": "SD",
              "type": "string"
            },
            {
              "value": "SE",
              "type": "string"
            },
            {
              "value": "SG",
              "type": "string"
            },
            {
              "value": "SH",
              "type": "string"
            },
            {
              "value": "SI",
              "type": "string"
            },
            {
              "value": "SJ",
              "type": "string"
            },
            {
              "value": "SK",
              "type": "string"
            },
            {
              "value": "SL",
              "type": "string"
            },
            {
              "value": "SM",
              "type": "string"
            },
            {
              "value": "SN",
              "type": "string"
            },
            {
              "value": "SO",
              "type": "string"
            },
            {
              "value": "SR",
              "type": "string"
            },
            {
              "value": "SS",
              "type": "string"
            },
            {
              "value": "ST",
              "type": "string"
            },
            {
              "value": "SV",
              "type": "string"
            },
            {
              "value": "SX",
              "type": "string"
            },
            {
              "value": "SY",
              "type": "string"
            },
            {
              "value": "SZ",
              "type": "string"
            },
            {
              "value": "TA",
              "type": "string"
            },
            {
              "value": "TC",
              "type": "string"
            },
            {
              "value": "TD",
              "type": "string"
            },
            {
              "value": "TG",
              "type": "string"
            },
            {
              "value": "TH",
              "type": "string"
            },
            {
              "value": "TJ",
              "type": "string"
            },
            {
              "value": "TK",
              "type": "string"
            },
            {
              "value": "TL",
              "type": "string"
            },
            {
              "value": "TM",
              "type": "string"
            },
            {
              "value": "TN",
              "type": "string"
            },
            {
              "value": "TO",
              "type": "string"
            },
            {
              "value": "TR",
              "type": "string"
            },
            {
              "value": "TT",
              "type": "string"
            },
            {
              "value": "TV",
              "type": "string"
            },
            {
              "value": "TW",
              "type": "string"
            },
            {
              "value": "TZ",
              "type": "string"
            },
            {
              "value": "UA",
              "type": "string"
            },
            {
              "value": "UG",
              "type": "string"
            },
            {
              "value": "US",
              "type": "string"
            },
            {
              "value": "UY",
              "type": "string"
            },
            {
              "value": "UZ",
              "type": "string"
            },
            {
              "value": "VA",
              "type": "string"
            },
            {
              "value": "VC",
              "type": "string"
            },
            {
              "value": "VE",
              "type": "string"
            },
            {
              "value": "VG",
              "type": "string"
            },
            {
              "value": "VI",
              "type": "string"
            },
            {
              "value": "VN",
              "type": "string"
            },
            {
              "value": "VU",
              "type": "string"
            },
            {
              "value": "WF",
              "type": "string"
            },
            {
              "value": "WS",
              "type": "string"
            },
            {
              "value": "XK",
              "type": "string"
            },
            {
              "value": "YE",
              "type": "string"
            },
            {
              "value": "YT",
              "type": "string"
            },
            {
              "value": "ZA",
              "type": "string"
            },
            {
              "value": "ZM",
              "type": "string"
            },
            {
              "value": "ZW",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "To disable Phone input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dynamicValue",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "dynamic-value",
          "reflectToAttr": true,
          "docs": "To define dynamic value of Phone input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "excludedCountries",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "excluded-countries",
          "reflectToAttr": true,
          "docs": "To define two letter ISO country codes to exclude from Phone input dropdown",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helperMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-message",
          "reflectToAttr": true,
          "docs": "To display an additional helper text message below the Phone input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputMask",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "input-mask",
          "reflectToAttr": true,
          "docs": "To set only numbers in the Phone Input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": true,
          "docs": "To define placeholder of Phone input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
          "complexType": {
            "original": "TextInputSizes",
            "resolved": "\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
            "references": {
              "TextInputSizes": {
                "location": "import",
                "path": "../../constants/size",
                "id": "src/constants/size.ts::TextInputSizes"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "To define size of Phone input",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"danger\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "ChiStates",
            "resolved": "\"danger\" | \"success\" | \"warning\"",
            "references": {
              "ChiStates": {
                "location": "import",
                "path": "../../constants/states",
                "id": "src/constants/states.ts::ChiStates"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": true,
          "docs": "To define state color of Phone input",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "To define value of Phone input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chiChange",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when an alteration to the element's value is committed by the user",
          "docsTags": []
        },
        {
          "event": "chiInput",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user changed the element's value but did not commit the change yet",
          "docsTags": []
        },
        {
          "event": "chiNumberInvalid",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the element's value committed by the user is an invalid phone number for the selected prefix",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "chi-search-input",
        "chi-text-input"
      ],
      "dependencyGraph": {
        "chi-phone-input": [
          "chi-search-input",
          "chi-text-input"
        ],
        "chi-search-input": [
          "chi-dropdown"
        ],
        "chi-dropdown": [
          "chi-button"
        ],
        "chi-button": [
          "chi-icon"
        ],
        "chi-text-input": [
          "chi-icon",
          "chi-spinner",
          "chi-helper-message"
        ],
        "chi-helper-message": [
          "chi-icon"
        ]
      }
    },
    {
      "filePath": "src/components/popover/popover.tsx",
      "encapsulation": "scoped",
      "tag": "chi-popover",
      "readme": "# chi-popover\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "to open or close the popover",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "arrow",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "arrow",
          "reflectToAttr": true,
          "docs": "to add an arrow between the popover and the reference element",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": true,
          "docs": "to add a close button to the popover",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "drag",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "drag",
          "reflectToAttr": true,
          "docs": "to allow the user to manually change the position of the popover",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "modal",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "modal",
          "reflectToAttr": true,
          "docs": "To define modal style of the Popover",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "portal",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "portal",
          "reflectToAttr": true,
          "docs": "To define portal style of the Popover",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "Placement",
            "resolved": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "Placement": {
                "location": "import",
                "path": "popper.js",
                "id": ""
              }
            }
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "to set position of the popover { top, top-start, top-end, right, right-start, right-end, bottom, bottom-start, bottom-end, left, left-start, left-end }",
          "docsTags": [],
          "default": "'top'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "preventAutoHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "prevent-auto-hide",
          "reflectToAttr": true,
          "docs": "Prevents closing the popover when clicking out of its bounds",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reference",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "reference",
          "reflectToAttr": true,
          "docs": "CSS Selector to the reference Element. I.e. #id > p",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "title",
          "type": "string",
          "mutable": false,
          "attr": "title",
          "reflectToAttr": true,
          "docs": "to define popover title.",
          "docsTags": [],
          "default": false,
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "To define popover variant { text, custom }",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "Hides the popover",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "Shows the popover.",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "toggle() => Promise<void>",
          "parameters": [],
          "docs": "Toggles active state (show/hide)",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "chiPopoverHidden",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Popover has been hidden to the user. The animation has completed.",
          "docsTags": []
        },
        {
          "event": "chiPopoverHide",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Popover hide method has executed, but the closing animation has not started yet",
          "docsTags": []
        },
        {
          "event": "chiPopoverShow",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Popover show method has executed, but the showing animation has not started yet",
          "docsTags": []
        },
        {
          "event": "chiPopoverShown",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Popover has been shown to the user and is fully visible. The animation has completed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "chi-date-picker",
        "chi-time-picker"
      ],
      "dependencies": [
        "chi-button"
      ],
      "dependencyGraph": {
        "chi-popover": [
          "chi-button"
        ],
        "chi-button": [
          "chi-icon"
        ],
        "chi-date-picker": [
          "chi-popover"
        ],
        "chi-time-picker": [
          "chi-popover"
        ]
      }
    },
    {
      "filePath": "src/components/progress/progress.tsx",
      "encapsulation": "scoped",
      "tag": "chi-progress",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "to set the max value of a progress bar.",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": true,
          "docs": "to indicate a progress bar state { info, warning, danger, success }.",
          "docsTags": [],
          "default": "'info'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "to set the value of a progress bar.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/search-input/search-input.tsx",
      "encapsulation": "scoped",
      "tag": "chi-search-input",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "To disable Search input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "menuItems",
          "type": "DropdownMenuItem[]",
          "complexType": {
            "original": "DropdownMenuItem[]",
            "resolved": "DropdownMenuItem[]",
            "references": {
              "DropdownMenuItem": {
                "location": "import",
                "path": "../../constants/types",
                "id": "src/constants/types.ts::DropdownMenuItem"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "To set the list of items to be used in the dropdown menu in autocomplete mode",
          "docsTags": [],
          "values": [
            {
              "type": "DropdownMenuItem[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"autocomplete\"",
          "complexType": {
            "original": "SearchInputModes",
            "resolved": "\"autocomplete\"",
            "references": {
              "SearchInputModes": {
                "location": "import",
                "path": "../../constants/types",
                "id": "src/constants/types.ts::SearchInputModes"
              }
            }
          },
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": true,
          "docs": "To set the mode to search input",
          "docsTags": [],
          "values": [
            {
              "value": "autocomplete",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "To define name of Search input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": true,
          "docs": "To define placeholder of Search input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "preventValueMutation",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "prevent-value-mutation",
          "reflectToAttr": true,
          "docs": "To disable Value attribute mutation",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "To render Search Input in readonly mode",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
          "complexType": {
            "original": "TextInputSizes",
            "resolved": "\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
            "references": {
              "TextInputSizes": {
                "location": "import",
                "path": "../../constants/size",
                "id": "src/constants/size.ts::TextInputSizes"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "To define size of Search input",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "To define value of Search input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "visibleItems",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "visible-items",
          "reflectToAttr": true,
          "docs": "To provide number of items in the dropdown to be displayed, and apply scroll if needed",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hideList",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "hideList() => Promise<void>",
          "parameters": [],
          "docs": "Hide the autocomplete menu list",
          "docsTags": []
        },
        {
          "name": "showList",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLInputElement": {
                "location": "global",
                "id": "global::HTMLInputElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "showList() => Promise<void>",
          "parameters": [],
          "docs": "Show the autocomplete menu list",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "chiBlur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the element has lost focus.",
          "docsTags": []
        },
        {
          "event": "chiChange",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when an alteration to the element's value is committed by the user",
          "docsTags": []
        },
        {
          "event": "chiClean",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user clicked the X button.",
          "docsTags": []
        },
        {
          "event": "chiFocus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user sets focus on the element.",
          "docsTags": []
        },
        {
          "event": "chiInput",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user changed the element's value but did not commit the change yet",
          "docsTags": []
        },
        {
          "event": "chiSearch",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user clicked the Search button.",
          "docsTags": []
        },
        {
          "event": "chiSearchInputItemSelected",
          "detail": "DropdownMenuItem",
          "bubbles": true,
          "complexType": {
            "original": "DropdownMenuItem",
            "resolved": "DropdownMenuItem",
            "references": {
              "DropdownMenuItem": {
                "location": "import",
                "path": "../../constants/types",
                "id": "src/constants/types.ts::DropdownMenuItem"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user clicked in one of the autocomplete elements",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "chi-phone-input"
      ],
      "dependencies": [
        "chi-dropdown"
      ],
      "dependencyGraph": {
        "chi-search-input": [
          "chi-dropdown"
        ],
        "chi-dropdown": [
          "chi-button"
        ],
        "chi-button": [
          "chi-icon"
        ],
        "chi-phone-input": [
          "chi-search-input"
        ]
      }
    },
    {
      "filePath": "src/components/spinner/spinner.tsx",
      "encapsulation": "scoped",
      "tag": "chi-spinner",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "backdrop",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "backdrop",
          "reflectToAttr": true,
          "docs": "to render spinners on dark or light backgrounds.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "to set color of a spinner { primary, dark, success, warning, danger, muted }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "to set size of a spinner { xs, sm, sm--2, sm--3, md, lg, xl, xxl }.",
          "docsTags": [],
          "default": "'sm'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "chi-alert",
        "chi-text-input"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "chi-alert": [
          "chi-spinner"
        ],
        "chi-text-input": [
          "chi-spinner"
        ]
      }
    },
    {
      "filePath": "src/components/toggle-switch/toggle-switch.tsx",
      "encapsulation": "scoped",
      "tag": "chi-switch",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "used to check the toggle switch.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "used to disable the toggle switch.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "extraClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "extra-class",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-label",
          "reflectToAttr": true,
          "docs": "used to disable the toggle labels.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "to set a label for the toggle switch.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "OPTIONAL. Size of the label. { xs, sm }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "toggle",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "emitting a custom event toggle.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tabs/tabs.tsx",
      "encapsulation": "scoped",
      "tag": "chi-tabs",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activeTab",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "active-tab",
          "reflectToAttr": false,
          "docs": "To provide ID of the active tab",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "border",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "border",
          "reflectToAttr": false,
          "docs": "To enable border",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverse",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inverse",
          "reflectToAttr": false,
          "docs": "To set inverse style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "seeMoreMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "see-more-message",
          "reflectToAttr": false,
          "docs": "To configure See more Dropdown trigger message",
          "docsTags": [],
          "default": "TABS_SEE_MORE_DEFAULT_MESSAGE",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
          "complexType": {
            "original": "TabsSizes",
            "resolved": "\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
            "references": {
              "TabsSizes": {
                "location": "import",
                "path": "../../constants/size",
                "id": "src/constants/size.ts::TabsSizes"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "To set tab size { xs, sm, md, lg, xl }.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "slidingBorder",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "sliding-border",
          "reflectToAttr": false,
          "docs": "To enable animation of the border",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "solid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "solid",
          "reflectToAttr": false,
          "docs": "To enable solid style of Tabs",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabs",
          "type": "TabTrigger[]",
          "complexType": {
            "original": "TabTrigger[]",
            "resolved": "TabTrigger[]",
            "references": {
              "TabTrigger": {
                "location": "import",
                "path": "../../constants/types",
                "id": "src/constants/types.ts::TabTrigger"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "To provide the data for Tabs",
          "docsTags": [],
          "values": [
            {
              "type": "TabTrigger[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "vertical",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "vertical",
          "reflectToAttr": false,
          "docs": "To enable vertical variant of Tabs",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chiTabChange",
          "detail": "TabTrigger",
          "bubbles": true,
          "complexType": {
            "original": "TabTrigger",
            "resolved": "TabTrigger",
            "references": {
              "TabTrigger": {
                "location": "import",
                "path": "../../constants/types",
                "id": "src/constants/types.ts::TabTrigger"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user activates a tab",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "chiDropdownHide",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "chi-dropdown"
      ],
      "dependencyGraph": {
        "chi-tabs": [
          "chi-dropdown"
        ],
        "chi-dropdown": [
          "chi-button"
        ],
        "chi-button": [
          "chi-icon"
        ]
      }
    },
    {
      "filePath": "src/components/text-input/text-input.tsx",
      "encapsulation": "scoped",
      "tag": "chi-text-input",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "To disable Text input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "extraClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "extra-class",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helperMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-message",
          "reflectToAttr": true,
          "docs": "To display an additional helper text message below the Text input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconLeft",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-left",
          "reflectToAttr": true,
          "docs": "To add a left positioned icon",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconLeftColor",
          "type": "\"danger\" | \"dark\" | \"grey\" | \"info\" | \"light\" | \"muted\" | \"navy\" | \"orange\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "IconColors",
            "resolved": "\"danger\" | \"dark\" | \"grey\" | \"info\" | \"light\" | \"muted\" | \"navy\" | \"orange\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
            "references": {
              "IconColors": {
                "location": "import",
                "path": "../../constants/color",
                "id": "src/constants/color.ts::IconColors"
              }
            }
          },
          "mutable": false,
          "attr": "icon-left-color",
          "reflectToAttr": true,
          "docs": "To define color of left icon",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "muted",
              "type": "string"
            },
            {
              "value": "navy",
              "type": "string"
            },
            {
              "value": "orange",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRight",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-right",
          "reflectToAttr": true,
          "docs": "To add a right positioned icon",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRightColor",
          "type": "\"danger\" | \"dark\" | \"grey\" | \"info\" | \"light\" | \"muted\" | \"navy\" | \"orange\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "IconColors",
            "resolved": "\"danger\" | \"dark\" | \"grey\" | \"info\" | \"light\" | \"muted\" | \"navy\" | \"orange\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
            "references": {
              "IconColors": {
                "location": "import",
                "path": "../../constants/color",
                "id": "src/constants/color.ts::IconColors"
              }
            }
          },
          "mutable": false,
          "attr": "icon-right-color",
          "reflectToAttr": true,
          "docs": "To define color of right icon",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "muted",
              "type": "string"
            },
            {
              "value": "navy",
              "type": "string"
            },
            {
              "value": "orange",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "To define name of Text input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": true,
          "docs": "To define placeholder of Text input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "preventValueMutation",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "prevent-value-mutation",
          "reflectToAttr": true,
          "docs": "To disable Value attribute mutation",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "To prevent the Text input value from being changed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
          "complexType": {
            "original": "TextInputSizes",
            "resolved": "\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
            "references": {
              "TextInputSizes": {
                "location": "import",
                "path": "../../constants/size",
                "id": "src/constants/size.ts::TextInputSizes"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "To define size of Text input",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "spinner",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "spinner",
          "reflectToAttr": true,
          "docs": "To render Text Input with Spinner",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"danger\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "ChiStates",
            "resolved": "\"danger\" | \"success\" | \"warning\"",
            "references": {
              "ChiStates": {
                "location": "import",
                "path": "../../constants/states",
                "id": "src/constants/states.ts::ChiStates"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": true,
          "docs": "To define state color of Text input",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"date\" | \"datetime\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
          "complexType": {
            "original": "TextInputTypes",
            "resolved": "\"date\" | \"datetime\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
            "references": {
              "TextInputTypes": {
                "location": "import",
                "path": "../../constants/constants",
                "id": "src/constants/constants.ts::TextInputTypes"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "To define type of Text input",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "datetime",
              "type": "string"
            },
            {
              "value": "datetime-local",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "month",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "time",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "week",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "To define value of Text input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chiBlur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the element has lost focus.",
          "docsTags": []
        },
        {
          "event": "chiChange",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when an alteration to the element's value is committed by the user",
          "docsTags": []
        },
        {
          "event": "chiFocus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user sets focus on the element.",
          "docsTags": []
        },
        {
          "event": "chiInput",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user changed the element's value but did not commit the change yet",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "chi-phone-input"
      ],
      "dependencies": [
        "chi-icon",
        "chi-spinner",
        "chi-helper-message"
      ],
      "dependencyGraph": {
        "chi-text-input": [
          "chi-icon",
          "chi-spinner",
          "chi-helper-message"
        ],
        "chi-helper-message": [
          "chi-icon"
        ],
        "chi-phone-input": [
          "chi-text-input"
        ]
      }
    },
    {
      "filePath": "src/components/textarea/textarea.tsx",
      "encapsulation": "scoped",
      "tag": "chi-textarea",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "To disable Textarea",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helperMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-message",
          "reflectToAttr": true,
          "docs": "To display an additional helper text message below the Textarea",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconLeft",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-left",
          "reflectToAttr": true,
          "docs": "To add a left positioned icon",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconLeftColor",
          "type": "\"danger\" | \"dark\" | \"grey\" | \"info\" | \"light\" | \"muted\" | \"navy\" | \"orange\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "IconColors",
            "resolved": "\"danger\" | \"dark\" | \"grey\" | \"info\" | \"light\" | \"muted\" | \"navy\" | \"orange\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
            "references": {
              "IconColors": {
                "location": "import",
                "path": "../../constants/color",
                "id": "src/constants/color.ts::IconColors"
              }
            }
          },
          "mutable": false,
          "attr": "icon-left-color",
          "reflectToAttr": true,
          "docs": "To define color of left icon",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "muted",
              "type": "string"
            },
            {
              "value": "navy",
              "type": "string"
            },
            {
              "value": "orange",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRight",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-right",
          "reflectToAttr": true,
          "docs": "To add a right positioned icon",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRightColor",
          "type": "\"danger\" | \"dark\" | \"grey\" | \"info\" | \"light\" | \"muted\" | \"navy\" | \"orange\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "IconColors",
            "resolved": "\"danger\" | \"dark\" | \"grey\" | \"info\" | \"light\" | \"muted\" | \"navy\" | \"orange\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
            "references": {
              "IconColors": {
                "location": "import",
                "path": "../../constants/color",
                "id": "src/constants/color.ts::IconColors"
              }
            }
          },
          "mutable": false,
          "attr": "icon-right-color",
          "reflectToAttr": true,
          "docs": "To define color of right icon",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "muted",
              "type": "string"
            },
            {
              "value": "navy",
              "type": "string"
            },
            {
              "value": "orange",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "To define name of Textarea",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": true,
          "docs": "To define placeholder of Textarea",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "To prevent Textarea value from being changed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
          "complexType": {
            "original": "TextInputSizes",
            "resolved": "\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
            "references": {
              "TextInputSizes": {
                "location": "import",
                "path": "../../constants/size",
                "id": "src/constants/size.ts::TextInputSizes"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "To define size of Textarea",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "state",
          "type": "\"danger\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "ChiStates",
            "resolved": "\"danger\" | \"success\" | \"warning\"",
            "references": {
              "ChiStates": {
                "location": "import",
                "path": "../../constants/states",
                "id": "src/constants/states.ts::ChiStates"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": true,
          "docs": "To define state color of Textarea",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "To read value of Textarea",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chiBlur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the element has lost focus.",
          "docsTags": []
        },
        {
          "event": "chiChange",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when an alteration to the element's value is committed by the user",
          "docsTags": []
        },
        {
          "event": "chiFocus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user sets focus on the element.",
          "docsTags": []
        },
        {
          "event": "chiInput",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user changed the element's value but did not commit the change yet",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "chi-icon",
        "chi-helper-message"
      ],
      "dependencyGraph": {
        "chi-textarea": [
          "chi-icon",
          "chi-helper-message"
        ],
        "chi-helper-message": [
          "chi-icon"
        ]
      }
    },
    {
      "filePath": "src/components/time/time.tsx",
      "encapsulation": "scoped",
      "tag": "chi-time",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "displaySeconds",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "display-seconds",
          "reflectToAttr": true,
          "docs": "Displaying seconds column",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "\"12hr\" | \"24hr\"",
          "complexType": {
            "original": "TimePickerFormats",
            "resolved": "\"12hr\" | \"24hr\"",
            "references": {
              "TimePickerFormats": {
                "location": "import",
                "path": "../../constants/constants",
                "id": "src/constants/constants.ts::TimePickerFormats"
              }
            }
          },
          "mutable": false,
          "attr": "format",
          "reflectToAttr": true,
          "docs": "To render Time Picker in 24 hours format",
          "docsTags": [],
          "default": "'12hr'",
          "values": [
            {
              "value": "12hr",
              "type": "string"
            },
            {
              "value": "24hr",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minutesStep",
          "type": "1 | 10 | 15 | 20 | 30 | 5",
          "complexType": {
            "original": "TimePickerTimeSteps",
            "resolved": "1 | 10 | 15 | 20 | 30 | 5",
            "references": {
              "TimePickerTimeSteps": {
                "location": "import",
                "path": "../../constants/constants",
                "id": "src/constants/constants.ts::TimePickerTimeSteps"
              }
            }
          },
          "mutable": false,
          "attr": "minutes-step",
          "reflectToAttr": true,
          "docs": "Renders minutes in stepped format. Defaults to 15 min steps if no value\nis provided (see examples in docs).",
          "docsTags": [],
          "default": "15",
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "10",
              "type": "number"
            },
            {
              "value": "15",
              "type": "number"
            },
            {
              "value": "20",
              "type": "number"
            },
            {
              "value": "30",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "secondsStep",
          "type": "1 | 10 | 15 | 20 | 30 | 5",
          "complexType": {
            "original": "TimePickerTimeSteps",
            "resolved": "1 | 10 | 15 | 20 | 30 | 5",
            "references": {
              "TimePickerTimeSteps": {
                "location": "import",
                "path": "../../constants/constants",
                "id": "src/constants/constants.ts::TimePickerTimeSteps"
              }
            }
          },
          "mutable": false,
          "attr": "seconds-step",
          "reflectToAttr": true,
          "docs": "Renders seconds in stepped format. Defaults to 10 seconds if\nno value is provided (see examples in docs).",
          "docsTags": [],
          "default": "15",
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "10",
              "type": "number"
            },
            {
              "value": "15",
              "type": "number"
            },
            {
              "value": "20",
              "type": "number"
            },
            {
              "value": "30",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Selected time in the time picker",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chiTimeChange",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Time change value event",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "chi-date-picker",
        "chi-time-picker"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "chi-date-picker": [
          "chi-time"
        ],
        "chi-time-picker": [
          "chi-time"
        ]
      }
    },
    {
      "filePath": "src/components/time-picker/time-picker.tsx",
      "encapsulation": "scoped",
      "tag": "chi-time-picker",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Indicates whether the time picker popover is open or closed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "To disable chi-time-picker.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "displaySeconds",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "display-seconds",
          "reflectToAttr": true,
          "docs": "Displaying seconds column",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "\"12hr\" | \"24hr\"",
          "complexType": {
            "original": "TimePickerFormats",
            "resolved": "\"12hr\" | \"24hr\"",
            "references": {
              "TimePickerFormats": {
                "location": "import",
                "path": "../../constants/constants",
                "id": "src/constants/constants.ts::TimePickerFormats"
              }
            }
          },
          "mutable": false,
          "attr": "format",
          "reflectToAttr": true,
          "docs": "To define format of Time Picker.",
          "docsTags": [],
          "default": "'12hr'",
          "values": [
            {
              "value": "12hr",
              "type": "string"
            },
            {
              "value": "24hr",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minutesStep",
          "type": "1 | 10 | 15 | 20 | 30 | 5",
          "complexType": {
            "original": "TimePickerTimeSteps",
            "resolved": "1 | 10 | 15 | 20 | 30 | 5",
            "references": {
              "TimePickerTimeSteps": {
                "location": "import",
                "path": "../../constants/constants",
                "id": "src/constants/constants.ts::TimePickerTimeSteps"
              }
            }
          },
          "mutable": false,
          "attr": "minutes-step",
          "reflectToAttr": true,
          "docs": "Renders minutes in stepped format. Defaults to 15 min steps if no value\nis provided (see examples in docs).",
          "docsTags": [],
          "default": "15",
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "10",
              "type": "number"
            },
            {
              "value": "15",
              "type": "number"
            },
            {
              "value": "20",
              "type": "number"
            },
            {
              "value": "30",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "secondsStep",
          "type": "1 | 10 | 15 | 20 | 30 | 5",
          "complexType": {
            "original": "TimePickerTimeSteps",
            "resolved": "1 | 10 | 15 | 20 | 30 | 5",
            "references": {
              "TimePickerTimeSteps": {
                "location": "import",
                "path": "../../constants/constants",
                "id": "src/constants/constants.ts::TimePickerTimeSteps"
              }
            }
          },
          "mutable": false,
          "attr": "seconds-step",
          "reflectToAttr": true,
          "docs": "Renders seconds in stepped format. Defaults to 10 seconds if\nno value is provided (see examples in docs).",
          "docsTags": [],
          "default": "15",
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "10",
              "type": "number"
            },
            {
              "value": "15",
              "type": "number"
            },
            {
              "value": "20",
              "type": "number"
            },
            {
              "value": "30",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Selected time of Time Picker",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getTime",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getTime() => Promise<string>",
          "parameters": [],
          "docs": "Gets time",
          "docsTags": []
        },
        {
          "name": "setTime",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(time: string) => Promise<void>",
            "parameters": [
              {
                "name": "time",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setTime(time: string) => Promise<void>",
          "parameters": [
            {
              "name": "time",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "Sets time",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "chiPopoverShow",
          "capture": false,
          "passive": false
        },
        {
          "event": "chiTimeChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "chi-popover",
        "chi-time",
        "chi-icon"
      ],
      "dependencyGraph": {
        "chi-time-picker": [
          "chi-popover",
          "chi-time",
          "chi-icon"
        ],
        "chi-popover": [
          "chi-button"
        ],
        "chi-button": [
          "chi-icon"
        ]
      }
    }
  ],
  "typeLibrary": {
    "src/constants/color.ts::AlertColors": {
      "declaration": "\"info\" | \"success\" | \"muted\" | \"warning\" | \"danger\"",
      "docstring": "",
      "path": "src/constants/color.ts"
    },
    "src/constants/constants.ts::AppLayoutFormats": {
      "declaration": "string",
      "docstring": "",
      "path": "src/constants/constants.ts"
    },
    "src/constants/states.ts::ChiStates": {
      "declaration": "\"success\" | \"warning\" | \"danger\"",
      "docstring": "",
      "path": "src/constants/states.ts"
    },
    "src/constants/constants.ts::DataLocales": {
      "declaration": "\"es\" | \"en\" | \"pt\" | \"fr\" | \"de\" | \"ja\" | \"zh\"",
      "docstring": "",
      "path": "src/constants/constants.ts"
    },
    "src/constants/constants.ts::DateFormats": {
      "declaration": "\"MM/DD/YYYY\" | \"DD/MM/YYYY\" | \"YYYY/MM/DD\"",
      "docstring": "",
      "path": "src/constants/constants.ts"
    },
    "src/constants/constants.ts::DatePickerModes": {
      "declaration": "string",
      "docstring": "",
      "path": "src/constants/constants.ts"
    },
    "src/constants/constants.ts::TimePickerFormats": {
      "declaration": "\"12hr\" | \"24hr\"",
      "docstring": "",
      "path": "src/constants/constants.ts"
    },
    "src/constants/constants.ts::TimePickerTimeSteps": {
      "declaration": "1 | 5 | 10 | 15 | 20 | 30",
      "docstring": "",
      "path": "src/constants/constants.ts"
    },
    "src/constants/types.ts::FontWeight": {
      "declaration": "\"normal\"",
      "docstring": "",
      "path": "src/constants/types.ts"
    },
    "src/constants/color.ts::IconColors": {
      "declaration": "\"info\" | \"success\" | \"muted\" | \"primary\" | \"warning\" | \"danger\" | \"navy\" | \"orange\" | \"light\" | \"dark\" | \"grey\" | \"secondary\"",
      "docstring": "",
      "path": "src/constants/color.ts"
    },
    "src/constants/size.ts::IconSizes": {
      "declaration": "string",
      "docstring": "",
      "path": "src/constants/size.ts"
    },
    "src/constants/size.ts::MarketingIconSizes": {
      "declaration": "string",
      "docstring": "",
      "path": "src/constants/size.ts"
    },
    "src/constants/types.ts::ChiMarketingIconModes": {
      "declaration": "\"filled\" | \"outline\"",
      "docstring": "",
      "path": "src/constants/types.ts"
    },
    "src/constants/size.ts::TextInputSizes": {
      "declaration": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"",
      "docstring": "",
      "path": "src/constants/size.ts"
    },
    "src/constants/types.ts::SearchInputModes": {
      "declaration": "\"autocomplete\"",
      "docstring": "",
      "path": "src/constants/types.ts"
    },
    "src/constants/types.ts::DropdownMenuItem": {
      "declaration": "export interface DropdownMenuItem {\n  title: string;\n  href: string;\n}",
      "docstring": "",
      "path": "src/constants/types.ts"
    },
    "src/constants/types.ts::TabTrigger": {
      "declaration": "export interface TabTrigger {\n  children: TabTrigger[];\n  parent?: TabTrigger;\n  id: string;\n  label?: string;\n  overflow: boolean;\n  target?: string;\n  href?: string;\n}",
      "docstring": "",
      "path": "src/constants/types.ts"
    },
    "src/constants/size.ts::TabsSizes": {
      "declaration": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"",
      "docstring": "",
      "path": "src/constants/size.ts"
    },
    "src/constants/constants.ts::TextInputTypes": {
      "declaration": "\"number\" | \"time\" | \"text\" | \"datetime\" | \"date\" | \"datetime-local\" | \"email\" | \"month\" | \"password\" | \"search\" | \"tel\" | \"url\" | \"week\"",
      "docstring": "",
      "path": "src/constants/constants.ts"
    }
  }
}