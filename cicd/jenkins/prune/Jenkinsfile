try {
  library(
    identifier: 'jsl-jenkins-shared-library-local@stable',
    retriever: modernSCM(
      [
        $class: 'GitSCMSource',
        remote: "/app/jenkins/git/jsl-jenkins-shared-library.git",
        extensions: [
          [$class: 'WipeWorkspace']
        ]
      ]
    )
  ) _
} catch (Exception Ex) {
  library(
    identifier: 'jsl-jenkins-shared-library@stable',
    retriever: modernSCM(
      [
        $class: 'GitSCMSource',
        remote: "https://github.com/CenturyLink/jsl-jenkins-shared-library.git",
        credentialsId: 'GITHUB_APP_CREDENTIALS',
        extensions: [[$class: 'WipeWorkspace']]
      ]
    )
  ) _
}

pipeline {
  environment {
    GITHUB_TOKEN_CREDENTIALS = 'GITHUB_APP_CREDENTIALS'
    GITHUB_SSH_CREDENTIALS = 'SCMAUTO_SSH_DEVOPS_PIPELINE'
    DOCKER_CREDENTIALS = 'nexus-secrets'
    KUBE_CREDENTIALS_TEST = 'kube-secret-test'
    KUBE_CREDENTIALS = "kube-secret"
    SONARQUBE_CREDENTIALS = 'sonartokenprod'
    GCP_CREDENTIALS = ''
    JIRA_CREDENTIALS = 'jira-credentials'
    MSTEAMS_CREDENTIALS = 'TEAMS-SECRET'
    QUALITY_GATE_CREDENTIALS = 'qg-creds'
    AUTHORIZED_USERS = ''
    DEPLOY_AUTH_TOKEN = ''
    NEXUS_NPM_CREDENTIALS = 'nexus-npm-secret'

    PROJECT_MAL = "CHI"
    PROJECT_NAME = 'ux-chi'
    DOCKER_REPO = 'chi'

    BRANCH_NAME = GIT_BRANCH.split('/')[-1].trim().toLowerCase()
    COMMIT_ID = GIT_COMMIT.substring(0,7).trim().toLowerCase()

    PULL_REQUEST="pr-${env.CHANGE_ID}"
    IMAGE_NAME = "${env.PROJECT_NAME}"
    IMAGE_TAG = "${env.PULL_REQUEST}"

    KUBE_DOCKER_SECRET_NAME = "${env.PROJECT_NAME}-${env.PULL_REQUEST}"
    KUBE_DOCKER_SECRET_NAME_TEST = "${env.PROJECT_NAME}-${env.BRANCH_NAME}"
    PROD_BRANCH="main"
  }
  agent {
    label 'Docker-enabled'
  }
  options {
    timestamps()
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr:'100', daysToKeepStr: '30'))
    preserveStashes(buildCount: 10)
    disableConcurrentBuilds()
  }
  triggers {
    cron('H 23 * * *')
  }
  stages {
      stage('Cleanup') {
      agent {
        label 'Docker-enabled'
      }
      steps {
        script {
          def closed_prs = jslGetClosedPRs()

          if (closed_prs.size() != 0) {
            closed_prs.each {
              jslProcessClosedPR(it)
            }
          } else {
            println "There are no closed PRs in the time slice to check."
          }
        }
      }
    }
  }
  post {
    success {
      jslNotification('success')
    }
    failure {
      jslNotification('failure')
    }
    unstable {
      jslNotification('unestable')
    }
  }
}
