try {
  library(
    identifier: 'jsl-jenkins-shared-library-local@stable',
    retriever: modernSCM(
      [
        $class: 'GitSCMSource',
        remote: "/app/jenkins/git/jsl-jenkins-shared-library.git",
        extensions: [
          [$class: 'WipeWorkspace']
        ]
      ]
    )
  ) _
} catch (Exception Ex) {
  library(
    identifier: 'jsl-jenkins-shared-library@stable',
    retriever: modernSCM(
      [
        $class: 'GitSCMSource',
        remote: "https://github.com/CenturyLink/jsl-jenkins-shared-library.git",
        credentialsId: 'GITHUB_APP_CREDENTIALS',
        extensions: [[$class: 'WipeWorkspace']]
      ]
    )
  ) _
}

pipeline {
  agent {
    label 'Docker-enabled'
  }
  options {
    timestamps()
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr:'100', daysToKeepStr: '30'))
    preserveStashes(buildCount: 10)
    disableConcurrentBuilds()
  }
  environment {
    // Project variables
    PROJECT_NAME = 'ux-chi'
    PROJECT_MAL = 'CHI'
    DOCKER_REPO = 'chi'

    // Branch variables
    PROD_BRANCH = 'master'
    BRANCH_NAME = GIT_BRANCH.split('/')[-1].trim().toLowerCase()
    COMMIT_ID = GIT_COMMIT.substring(0,7).trim().toLowerCase()
    PULL_REQUEST="pr-${env.CHANGE_ID}"

    // Github variables
    GITHUB_TOKEN_CREDENTIALS = 'GITHUB_APP_CREDENTIALS'
    GITHUB_SSH_CREDENTIALS = 'SCMAUTO_SSH_DEVOPS_PIPELINE'
    GITHUB_ALTER_CREDENTIALS = 'JCTOKEN'
    GITHUB_PUBLISH_TOKEN_CREDENTIALS = 'allyourbotsarebelongtous-token'
    
    // Docker variables
    DOCKER_CREDENTIALS = 'nexus-secrets'
    DOCKER_NODE20 = "nexusprod.corp.intranet:4567/jsl-docker-standard-images/node20_agent:latest"
    DOCKER_JIRA = "nexusprod.corp.intranet:4567/jsl-docker-standard-images/jira_agent:latest"

    // K8s variables
    KUBE_CREDENTIALS = 'kube-secret'
    KUBE_CREDENTIALS_TEST = 'kube-secret-test'
    IMAGE_NAME = "${env.PROJECT_NAME}"
    IMAGE_TAG = "${env.PULL_REQUEST}"
    KUBE_DOCKER_SECRET_NAME = "${env.PROJECT_NAME}-${env.PULL_REQUEST}"
    KUBE_DOCKER_SECRET_NAME_TEST = "${env.PROJECT_NAME}-${env.BRANCH_NAME}"
    NGINX_DOCKERFILE = './cicd/nginx/Dockerfile'
    
    // Sonarqube variables
    SONARQUBE_CREDENTIALS = 'sonarcicdent'
    QUALITY_GATE_CREDENTIALS = 'CRUMBS-FILE'
    SONARQUBE_PROPERTIES = "./cicd/sonarqube/sonar-project.properties"

    // ServiceNow variables
    SERVICE_NOW_CREDENTIALS = 'snow-credentials'
    SERVICE_NOW_HOST = 'mysupportdesk.service-now.com'
    DEVOPS_GCR_PREPROD_PAYLOAD = '{"u_implementers": "AC04119,AC59437,AC96088", "u_testers": "AB62977"}'

    // Release tags variables
    RC_TAG_PATTERN =  /(.*##RC##.*)/
    PROMOTE_TAG_PATTERN =  /(.*##PROMOTE##.*)/
    DEPLOY_TAG_PATTERN =  /(.*##DEPLOYMENT##.*)/

    // Other variables
    JIRA_CREDENTIALS = 'jira-credentials'
    MSTEAMS_CREDENTIALS = 'TEAMS-SECRET'
    NEXUS_NPM_CREDENTIALS = 'nexus-npm-secret'
  
    // Tests variables
    REPORTS_NON_RESPONSIVE_CI = "reports/ci_report/non_responsive/xunit.xml"
    CYPRESS_CACHE_FOLDER = ".cypress-bin"

    // Scripts
    VERSION_CHECK_SCRIPT = './cicd/jenkins/scripts/versionCheck.sh'
    CLEAN_SCRIPT = './cicd/jenkins/scripts/assetsServer/clean.sh'
    CHECK_FOLDER_SCRIPT = './cicd/jenkins/scripts/assetsServer/checkFolder.sh'

    // Empty variables
    GCP_CREDENTIALS = ''
    AUTHORIZED_USERS = ''
    DEPLOY_AUTH_TOKEN = ''
  }
  stages {
    stage('Summary') {
      steps {
        script {
          printSummary()
        }
      }
    }
    stage('GitHub Security') {
      steps {
        script {
          jslGitHubSecurityAlert()
        }
      }
    }
    stage('Linting') {
      when {
        beforeAgent true
        allOf {
          not { tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP" }
          not { tag pattern: RC_TAG_PATTERN, comparator: "REGEXP" }
          not { branch PROD_BRANCH }
        }
      }
      agent {
        docker {
          image DOCKER_NODE20
        }
      }
      steps {
        script {
          jslNpmWrapper('ci', GITHUB_PUBLISH_TOKEN_CREDENTIALS)
          // TODO: Fix linting
          // jslNpmWrapper('run lint:scss', GITHUB_PUBLISH_TOKEN_CREDENTIALS)
        }
      }
    }
    stage ('Build Chi') {
      when {
        beforeAgent true
        allOf {
          not { tag pattern: RC_TAG_PATTERN, comparator: "REGEXP" }
          not { tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP" }
        }
      }
      agent {
        docker {
          image DOCKER_NODE20
        }
      }
      steps {
        script {
          jslNpmWrapper('ci', GITHUB_PUBLISH_TOKEN_CREDENTIALS)
          jslNpmWrapper('run build', GITHUB_PUBLISH_TOKEN_CREDENTIALS)

          sendBuildInfo()

          stash name: "chi_build", includes: "dist/**"
        }
      }
    }
    stage ('Backstop tests') {
      when {
        beforeAgent true
        allOf {
          not { tag pattern: RC_TAG_PATTERN, comparator: "REGEXP" }
          not { tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP" }
          not { tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP" }
        }
      }
      agent {
        docker {
          image DOCKER_NODE20
        }
      }
      steps {
        script {
          jslNpmWrapper('run tests:visual:run', GITHUB_PUBLISH_TOKEN_CREDENTIALS)

          stashAndArchiveCiReports()
        }
      }
    }
    stage ('E2E tests') {
      when {
        beforeAgent true
        allOf {
          not { tag pattern: RC_TAG_PATTERN, comparator: "REGEXP" }
          not { tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP" }
          not { tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP" }
        }
      }
      agent {
        docker {
          image DOCKER_NODE20
        }
      }
      steps {
        script {
          jslNpmWrapper('ci', GITHUB_PUBLISH_TOKEN_CREDENTIALS)
          jslNpmWrapper('run tests:e2e', GITHUB_PUBLISH_TOKEN_CREDENTIALS)
        }
      }
    }
    stage('Sonarqube') {
      when {
        beforeAgent true
        allOf {
          not { tag pattern: RC_TAG_PATTERN, comparator: "REGEXP" }
          not { tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP" }
          not { tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP" }
        }
      }
      parallel {
        stage('Coverage') {
          agent {
            docker {
              image DOCKER_NODE20
            }
          }
          steps {
            // TODO: Improve to have nyc, coverage (folder) & lcov.info
            jslQualityGateCodeCoverage(SONARQUBE_PROPERTIES)
          }
        }
        stage('Static Analysis') {
          agent {
            docker {
              image DOCKER_NODE20
            }
          }
          steps {
            jslSonarQubeStaticAnalysis(SONARQUBE_PROPERTIES, SONARQUBE_CREDENTIALS)
          }
        }
      }
    }
    stage('QualityGate') {
      when {
        beforeAgent true
        allOf {
          not { tag pattern: RC_TAG_PATTERN, comparator: "REGEXP" }
          not { tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP" }
          not { tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP" }
        }
      }
      agent {
        docker {
          image DOCKER_NODE20
        }
      }
      steps {
        script {
          jslQualityGate()
        }
      }
    }
    stage('QualityGate1') {
      when {
        beforeAgent true
        allOf {
          not { tag pattern: RC_TAG_PATTERN, comparator: "REGEXP" }
          not { tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP" }
          not { tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP" }
        }
      }
      agent {
        docker {
          image DOCKER_JIRA
        }
      }
      steps {
        script {
          def isTestAvailable = true
          
          try {
            unstash name: "non_responsive_ci"
          } catch (Exception e) {
            isTestAvailable = false
          }
            
          if (isTestAvailable) {
            jslCheckQualityGates(REPORTS_NON_RESPONSIVE_CI, 'QualityGate1-Unit')
          }
        }
      }
    }
    stage('Deploy to K8s') {
      when {
        beforeAgent true
        allOf {
          not { tag pattern: RC_TAG_PATTERN, comparator: "REGEXP" }
          not { tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP" }
          not { tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP" }
        }
      }
      steps {
        script {
          def packageJson = readJSON file: 'package.json'
          def chiManifest = 'chiManifest.yml'
          def chiManifestFile = "./${chiManifest}"

          sh "rm -rf ./dist"
          unstash name: 'chi_build'

          jslBuildAndPushToNexus(NGINX_DOCKERFILE)

          sh "rm -rf ${chiManifestFile}"

          jslGenerateManifestForSimpleNginx(chiManifestFile)
          jslDeployK8s(chiManifestFile)
          
          archiveArtifacts artifacts: chiManifest, fingerprint: true

          if (env.CHANGE_ID != null) {
            jslDeploymentContractValidationWrite("development")
            jslJiraSendDeploymentInfo('development', true)
          }
        }
      }
    }
    stage('Release - Check version') {
       when {
        beforeAgent true
        anyOf {
          branch PROD_BRANCH
          tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP"
        }
      }
      steps {
        script {
          packageVersionCheck()
        }
      }
    }
    stage('Release - RC') {
      when {
        beforeAgent true
        tag pattern: RC_TAG_PATTERN, comparator: "REGEXP"
      }
      steps {
        script {
          promoteDeployTagGCR()
        }
      }
    }
    stage('Release - Deployment') {
      when {
        beforeAgent true
        anyOf {
          tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP"
        }
      }
      stages {
        stage('Authorize') {
          steps {
            script {
              // TODO: Get credentials for this
              echo "Gotta get the credentials for this"
              // jslDeploymentControlKnob()
            }
          }
        }
        stage('Github release') {
          agent {
            docker {
              image DOCKER_NODE20
            }
          }
          steps {
            script {
              if (isVersionBump()) {
                unstash name: "chi_build"

                gitHubRelease()
              }
            }
          }
        }
        stage('Publish AssetServer') {
          agent {
            docker {
              image DOCKER_NODE20
            }
          }
          steps {
            script {
              def isDeploymentTag = env.TAG_NAME && env.TAG_NAME.toString().contains("##DEPLOYMENT##")
              
              if (isDeploymentTag) {
                def packageJson = readJSON file: 'package.json'

                sh "rm -rf dist node_modules"

                unstash name: "chi_build"

                sh(script: """
                    chmod +x ${CLEAN_SCRIPT}
                    ${CLEAN_SCRIPT}
                """, label: "Cleaning before pushing to AssetsServer")

                jslGitHubCloneRepo('ux-chi-AssetsServer')

                env.CHECK = sh(script: """
                    chmod +x ${CHECK_FOLDER_SCRIPT}
                    ${CHECK_FOLDER_SCRIPT} ${packageJson.version}
                """, returnStdout: true).trim()

                createAndOpenPullRequest(packageJson.version)
              }

              def deploymentInfo = isDeploymentTag ? 
                [environment: "production", previousCommit: jslGCRTagCommit("DEPLOYMENT", 2)] : 
                [environment: "staging", previousCommit: jslGCRTagCommit()]
              def changeLog = jslAuditChangelog(true, env.GIT_COMMIT, deploymentInfo.previousCommit)

              jslDeploymentContractValidationWrite(deploymentInfo.environment)
              jslJiraSendDeploymentInfo(deploymentInfo.environment, true, env.BRANCH_NAME, changeLog)
            }
          }
        }
        stage('Prod smoke tests') {
          agent {
            docker {
              image DOCKER_NODE20
            }
          }
          stages {
            stage('Smoke Test') {
              steps {
                script {
                  sh "rm -rf cypress/reports/smokeTests && mkdir -p cypress/reports/smokeTests"
                  
                  smokeTestChecker()

                  stash name: 'smokeTests', includes:"cypress/reports/smokeTests/**"
                  
                  jslPublishTestResults('cypress/reports/smokeTests/**')
                }
              }
            }
            stage('Quality Gate 7') {
              when {
                expression { return env.SMOKE_TEST_FAILURE != null && env.VERSION != null }
              }
              steps {
                script {
                  unstash 'smokeTests'

                  jslPostQualityGate7Validation("'cypress/reports/smokeTests/*.xml'")
                }
              }
            }
          }
        }
      }
    }
    stage('Adoption Stats') {
      when {
        beforeAgent true
        allOf {
          not { tag pattern: RC_TAG_PATTERN, comparator: "REGEXP" }
          not { tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP" }
        }
      }
      agent {
        docker {
          image DOCKER_JIRA
        }
      }
      steps {
        script {
          def isDeploymentTag = env.TAG_NAME && env.TAG_NAME.toString().indexOf("##DEPLOYMENT##") != -1;

          if (isDeploymentTag) {
            env.DEVOPS_GCR_PREPROD_BRANCH = env.PROD_BRANCH
            jslAdoptionMain('cypress/reports/smokeTests/*.xml')

            zip zipFile: 'smoke_tests.zip', dir: 'cypress/reports/smokeTests'
            echo "Updating DevOpsGCR"

            if (env.SMOKE_TEST_FAILURE == "false") {
              echo "Deployment success"
              jslGCRDevOpsUpdate('SUCCEEDS', ['smoke_tests.zip'])
            } else {
              echo "Failures detected in deployment"
              jslGCRDevOpsUpdate('FAILED', ['smoke_tests.zip'], "SmokeTests failed AFTER deployment")
            }
          } else {
            try {
              sh "rm -rf reports/ci_report/*"
              
              unstash name: "non_responsive_ce_ci"
              unstash name: "non_responsive_ci"
              unstash name: "responsive_ci"
              
              sh """
                cat reports/ci_report/responsive/xunit.xml > reports/ci_report/xunitfinal.xml
                cat reports/ci_report/non_responsive/xunit.xml >> reports/ci_report/xunitfinal.xml
                cat reports/ci_report/non_responsive_ce/xunit.xml >> reports/ci_report/xunitfinal.xml
              """
            } catch (Exception exc) {
              sh "mkdir -p reports/ci_report"
              sh "touch reports/ci_report/xunitfinal.xml"
            }
          }

          if (isVersionBump()) {
            env.DEVOPS_GCR_PREPROD_BRANCH = env.PROD_BRANCH
          }
          
          jslAdoptionMain('reports/ci_report/xunitfinal.xml')
        }
      }
    }
  }
  post {
    success {
      script {
        def endpointBranch = BRANCH_NAME == env.PROD_BRANCH ? BRANCH_NAME : PULL_REQUEST
        def endpointMessage = "You can check this PRs instance in https://nginx-${endpointBranch}-ux-chi.kubeodc-test.corp.intranet/ (internal)"
        
        jslNotification('success')
        jslGitHubMessage(endpointMessage, env.CHANGE_ID)
      }
    }
    unstable {
      script {
        jslNotification('unstable')
      }
    }
    failure {
      script {
        gcrPostFailure()
        jslNotification('failure')
      }
    }
    aborted {
      script {
        jslNotification('aborted')
      }
    }
  }
}

// This function is called to print the summary of the pipeline
def printSummary() {
  env.GITHUB_ORGANIZATION = jslGitGetRepoOwner()

  echo """
  PROJECT_NAME: ${env.PROJECT_NAME}
  GIT_BRANCH: ${env.GIT_BRANCH}
  GIT_COMMIT: ${env.GIT_COMMIT}
  BRANCH_NAME: ${env.BRANCH_NAME}
  COMMIT_ID: ${env.COMMIT_ID}
  PULL_REQUEST: ${env.PULL_REQUEST}
  CHANGE_ID: ${env.CHANGE_ID}
  TAG: ${env.TAG_NAME}
  PROD_BRANCH: ${env.PROD_BRANCH}

  GITHUB_ORGANIZATION: ${env.GITHUB_ORGANIZATION}
  """
}

// This function is called to send the build info to JIRA
def sendBuildInfo() {
  echo "/dist & /dist/components"
  
  sh """
  ls -la ${pwd()}/dist
  ls -la ${pwd()}/dist/components
  """

  jslJiraSendBuildInfo()
}

// This function is called to stash and archive the CI reports
def stashAndArchiveCiReports() {
  def tests = ["non_responsive", "responsive", "non_responsive_ce"]
  def reportBasePath = "reports/ci_report/"
  def htmlBasePath = "reports/html_report/"

  tests.each { test ->
    stash name: "${test}_ci", includes: "${reportBasePath}${test}/**"

    archiveArtifacts artifacts: "${htmlBasePath}${test}/**", fingerprint: true
    jslPublishTestResults("${reportBasePath}${test}/xunit.xml")
  }
}

// This function is called when the pipeline fails
// - It will update the GCR as cancelled / backed out
// - It will update the DEVOPS_GCR_PREPROD_BRANCH with the PROD_BRANCH
def gcrPostFailure() {
  def gcrInProgress = env.TAG_NAME == null ? env.GCR_NUMBER : env.TAG_NAME
        
  if (gcrInProgress) {
    echo "DEVOPS GCR of ${gcrInProgress} will be updated as cancelled / backed out. Please review your backout plan."
    env.DEVOPS_GCR_PREPROD_BRANCH = env.PROD_BRANCH
    jslGCRDevOpsFallbackUpdate("The job ${env.BUILD_URL} failed unexpectly")
  }
}

// This function is called to promote the RC tag to the DEPLOYMENT tag
def promoteDeployTagGCR() {
  def tagAttributes = jslGCRGetTagAttributes()
  
  jslGCRTag('PROMOTE', tagAttributes['tsMark'], tagAttributes['gcrNumber'], env.COMMIT_ID, env.PROD_BRANCH)
  
  def tagName = jslGCRTag('DEPLOYMENT', tagAttributes['tsMark'], tagAttributes['gcrNumber'], env.COMMIT_ID, env.PROD_BRANCH)
  def currentJob = env.JOB_NAME.toString()
  def currentBaseName = env.JOB_BASE_NAME.toString()
  def pathJob = currentJob - currentBaseName

  jslTriggerRemoteJob(tagName.trim(), "/${pathJob}/".toString(), false, false, 6)
}

// This function is called to check the package.json version
def packageVersionCheck() {
  sh(script: """
    chmod +x ${VERSION_CHECK_SCRIPT}
    ${VERSION_CHECK_SCRIPT} 
  """, label: "Check package.json version")
  
  stash name: "chi_version_bump", includes: "chi_version_bump"
}

// This function is called to check if the version bump exists
def isVersionBump() {
  def isVersionBumpResult = false

  try {
    unstash name: 'chi_version_bump'
  } catch (Exception e) {
    echo "chi_version_bump file does not exist"
    return false
  }

  def versionBump = readFile(file: 'chi_version_bump').trim()

  echo "Publish condition: GIT_BRANCH is _${env.GIT_BRANCH?.trim()?.toLowerCase()}_"
  echo "Publish condition: currentResult is _${currentBuild?.currentResult?.toLowerCase()}_"
  echo "Publish condition: versionBump is _${versionBump}_"

  isVersionBumpResult = versionBump == "yes" &&
                        currentBuild?.currentResult?.toLowerCase() == "success" &&
                        (['origin/master', 'origin/main', 'master', 'main', env.PROD_BRANCH].contains(env.GIT_BRANCH?.trim()?.toLowerCase()) || 
                        (env.TAG_NAME?.toString()?.indexOf("##DEPLOYMENT##") != -1))


  if (isVersionBumpResult) {
    env.VERSION_BUMP_SCOPE = 'chi'
  }

  return isVersionBumpResult
}

// This function is called to create a GitHub release
def gitHubRelease() {
  def latestRelease = 'true'
 
  def packageJsonPath = "package.json"
  def packageFile = readJSON file: packageJsonPath
  def packageVersion = packageFile['version']
  def plainVersion = packageVersion.tokenize('-')[0]

  def versionMajor = plainVersion.tokenize('.')[0]
  def versionMinor = plainVersion.tokenize('.')[1] ? plainVersion.tokenize('.')[1] : '0'
  def versionPatch = plainVersion.tokenize('.')[2] ? plainVersion.tokenize('.')[2] : '0'

  def versionMajorOld = versionMajor.toInteger() == 0 ? '0' : versionMinor.toInteger() == 0 ? (versionMajor.toInteger() - 1).toString() : versionMajor
  def versionMinorOld = versionMinor.toInteger() == 0 ? '0' : versionPatch.toInteger() == 0 ? (versionMinor.toInteger() - 1).toString() : versionMinor
  def versionPatchOld = versionPatch.toInteger() == 0 ? '0' : (versionPatch.toInteger() - 1).toString()
  
  def classifier = ''
  def publishVersion = "v${versionMajor}.${versionMinor}.${versionPatch}${classifier}"

  sh script: """#!/bin/bash
    echo "READING CHANGELOG FOR VERSION: ${publishVersion}"
    echo "${publishVersion}" > shortCHANGELOG.md
    echo "" >> shortCHANGELOG.md
    sed -n -e "/${versionMajor}.${versionMinor}.${versionPatch}/,/${versionMajorOld}.${versionMinorOld}.${versionPatchOld}/ p" dist/CHANGELOG.md | head -n -2 >> shortCHANGELOG.md
  """
  
  def releaseNotes = readFile "shortCHANGELOG.md"
  
  env.VERSION = publishVersion
  env.GITHUB_USER='lumen-jenkins-prod'

  def repoOwner = jslGitGetRepoOwner()
  def repoName = jslGitGetRepoName()
  def releaseId = jslGitHubReleaseCreate(publishVersion, env.GIT_COMMIT, env.GITHUB_TOKEN_CREDENTIALS, releaseNotes, false, false,false, repoOwner, repoName, latestRelease)

  if (releaseId == null) {
    error("There was an error publishing the release")
  }
}

// This function is called to create and open a pull request
def createAndOpenPullRequest(def version) {
  def org = jslGitGetRepoOwner()
  def commitMessage = "[FSTEAM-4189] This PR is for CHI ${version}"
  def description = "You can check staging in https://assets-dev.ctl.io/chi/staging"
  def branchName = "CHI_${version}"

  sh(script: """
      mkdir -p ${WORKSPACE}/ux-chi-AssetsServer/chi/latest
      
      cp -R ${WORKSPACE}/dist/* ${WORKSPACE}/ux-chi-AssetsServer/chi/latest/
      mv ${WORKSPACE}/dist ${WORKSPACE}/ux-chi-AssetsServer/chi/${version}

      cd ${WORKSPACE}/ux-chi-AssetsServer

      git checkout -b "${branchName}"

      git add ${WORKSPACE}/ux-chi-AssetsServer/chi/${version}
      git add ${WORKSPACE}/ux-chi-AssetsServer/chi/latest

      git config user.email "scmauto@lumen.com"
      git config user.name "SCMAUTO"
      
      git commit -m "${branchName}"
      git push --set-upstream origin "${branchName}"
      """)

  jslGitHubPRCreate(commitMessage, description, branchName, 'master', GITHUB_PUBLISH_TOKEN_CREDENTIALS, 'ux-chi-AssetsServer')
}

// This function is called to check/create the smoke tests
def smokeTestChecker() {
  def version = env.VERSION

  if (version != null) {
    echo "Starting SMOKE TESTS with the published release ${version}"

    def latestRelease = ""

    try {
      latestRelease = jslGitHubReleaseGet().data.name.trim()
    } catch (Exception e) {
      echo "Error checking Chi latest release: ${e.getMessage()}"
    }

    try {
      def repoOwner = jslGitGetRepoOwner()
      def repoName = jslGitGetRepoName()
      def allReleases = jslGitHubRequestsHandler("https://api.github.com/repos/${repoOwner}/${repoName}/releases", "Get GitHub release for ${version}", ["Accept: application/vnd.github+json"], 'GET', null, env.GITHUB_TOKEN_CREDENTIALS, true)
    } catch (Exception e) {
      echo "Error checking releases: ${e.getMessage()}"
    }

    jslGenerateManualTestReport("Version Release", "Check Version - chi", "${version}", (latestRelease == version).toBoolean(), 1.0, "cypress/reports/smokeTests/smoke_test_result.xml")

    if (env.SMOKE_TEST_FAILURE == null) {
      env.SMOKE_TEST_FAILURE = (latestRelease != version)
    } else if (!env.SMOKE_TEST_FAILURE) {
      env.SMOKE_TEST_FAILURE = (latestRelease != version)
    }
    
    echo """
    Smoke Test Failure for Chi ${latestRelease != version}
    Current Overall Smoke Test Failure Status: ${env.SMOKE_TEST_FAILURE}
    """

  } else {
    echo "Smoke Test hook without release"
    jslGenerateManualTestReport("Change without Release", "Hook test", "hookTest", true, 1.0, "cypress/reports/smokeTests/smoke_test_result.xml")
  }
}
