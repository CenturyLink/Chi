/*
 Library declaration.
  Notes:
  identifier includes the version of the library (git tag / branch)
  remote includes the repository git url
  credentialsId needs to be of the type SSH key in Jenkins
  _ at the end of the declaration loads the whole library

  This section always runs in the master jenkins.
*/
try {
  library(
        identifier: 'jsl-jenkins-shared-library-local@release/20210916',
        retriever: modernSCM(
          [
            $class: 'GitSCMSource',
            remote: "/app/jenkins/git/jsl-jenkins-shared-library.git",
            extensions: [[$class: 'WipeWorkspace']]
          ]
        )
      ) _
} catch (Exception Ex) {
  library(
    identifier: 'jsl-jenkins-shared-library@release/20210916',
    retriever: modernSCM(
      [
        $class: 'GitSCMSource',
        remote: "git@github.com:CenturyLink/jsl-jenkins-shared-library.git",
        credentialsId: 'SCMAUTO_SSH_DEVOPS_PIPELINE',
        extensions: [[$class: 'WipeWorkspace']]
      ]
    )
  ) _
}


pipeline {

    environment {


      //  Credentials:
      //  GITHUB_TOKEN_CREDENTIALS github token, jenkins user password credential. SCMAUTO_GITHUB contains the GitHub token from SCMAuto user, which need to have access to the repository.
      //  GITHUB_SSH_CREDENTIALS github ssh private key, jenkins private key credential. SCMAUTO_SSH_DEVOPS_PIPELINE contains the SSH key from SCMAuto user, which need to have access to the repository.
      //  DOCKER_CREDENTIALS Docker access info, jenkins secret file credential with environment variables to export.
      //  KUBE_CREDENTIALS Kubernetes access info, jenkins secret file credential with environment variables to export. For PRs.
      //  KUBE_CREDENTIALS_TEST Kubernetes access info, jenkins secret file credential with environment variables to export. For branches.
      //  AMAZON_CREDENTIALS AWS access info, jenkins secret file credential with environment variables to export
      //  SONARQUBE_CREDENTIALS Sonarqube access info, jenkins secret text
      //  GCP_CREDENTIALS GCP access info, jenkins secret file credential with environment variables to export
      //  JIRA_CREDENTIALS Jira access info, jenkins secret file credential with environment variables to export
      //  MORPHEUS_CREDENTIALS Morpheus access info, jenkins secret text
      //  MSTEAMS_CREDENTIALS MS Teams access info, jenkins secret text
      //  QUALITY_GATE_CREDENTIALS Credentials to gather all the contract validation gates expected to be crossed.
      //  PROJECT_MAL The MAL of the project

      GITHUB_TOKEN_CREDENTIALS = 'SCMAUTO_GITHUB'
      GITHUB_SSH_CREDENTIALS = 'SCMAUTO_SSH_DEVOPS_PIPELINE'
      GITHUB_ALTER_CREDENTIALS = 'JANITOKEN'
      DOCKER_CREDENTIALS = 'nexus-secrets'
      AMAZON_CREDENTIALS = 'awsCredentialsPR'
      AMAZON_CREDENTIALS_PR = 'awsCredentials'
      SONARQUBE_CREDENTIALS = 'sonar-credentials'
      GCP_CREDENTIALS = ''
      JIRA_CREDENTIALS = 'jira-credentials'
      MSTEAMS_CREDENTIALS = 'TEAMS-SECRET'
      QUALITY_GATE_CREDENTIALS = 'CRUMBS-FILE'
      //Deployment control credentialsId
      AUTHORIZED_USERS = ''
      DEPLOY_AUTH_TOKEN = ''

      // Custom project variables
      // Add
      PROJECT_NAME = 'ux-chi'
      PROJECT_MAL = "chi"

      BRANCH_NAME = GIT_BRANCH.split('/')[-1].trim().toLowerCase()
      COMMIT_ID = GIT_COMMIT.substring(0,7).trim().toLowerCase()
      PULL_REQUEST="pr-${env.CHANGE_ID}"
      PROD_BRANCH="master"

      // ServiceNow Variables
      SERVICE_NOW_CREDENTIALS = 'snow-credentials'
      SERVICE_NOW_HOST = 'mysupportdesk.service-now.com'
      DEVOPS_GCR_PREPROD_PAYLOAD = '{"u_implementers": "AC04119,AC59437,AC75080", "u_testers": "AB62977"}'

      RC_TAG_PATTERN =  /(.*##RC##.*)/
      PROMOTE_TAG_PATTERN =  /(.*##PROMOTE##.*)/
      DEPLOY_TAG_PATTERN =  /(.*##DEPLOYMENT##.*)/
    }


    // Add parameters if needed or if deployment control is in place.
    // parameters {
    //      //https://www.jenkins.io/doc/book/pipeline/syntax/#parameters
    //  text(name: 'GCR', defaultValue: '', description: 'Enter the GCR description. Only used in deployment to production stage.')
    //  text(name: 'VERSION', defaultValue: '', description: 'Version to deploy. Only used in deployment to production stage.')
    // }



    // https://www.jenkins.io/doc/book/pipeline/syntax/#agent
    //Add agent sections in stages/stage if needed.

    agent {
        label 'Docker-enabled'
    }

    options {

      // https://www.jenkins.io/doc/book/pipeline/syntax/#options

      timestamps ()
      timeout(time: 1, unit: 'HOURS')
      buildDiscarder(logRotator(numToKeepStr:'10', daysToKeepStr: '30'))
      preserveStashes(buildCount: 10)
      disableConcurrentBuilds()
    }


    // https://www.jenkins.io/doc/book/pipeline/syntax/#triggers

    triggers {
      issueCommentTrigger('.*test this please.*')
    }

    stages {
      stage('Summary') {
        steps {
          script {
            sh script: """
                echo "PROJECT_NAME: ${PROJECT_NAME}"
                echo "GIT_BRANCH: ${GIT_BRANCH}"
                echo "GIT_COMMIT: ${GIT_COMMIT}"
                echo "BRANCH_NAME: ${BRANCH_NAME}"
                echo "COMMIT_ID: ${COMMIT_ID}"
                echo "PULL_REQUEST: ${PULL_REQUEST}"
                echo "CHANGE_ID: ${env.CHANGE_ID}"
                echo "TAG: ${env.TAG_NAME}"
            """, label: "Details summary"
            if ( BRANCH_NAME != PROD_BRANCH && BRANCH_NAME != "pr-*" ) {
              currentBuild.description = "<a href='https://github.com/CenturyLink/Chi/tree/${BRANCH_NAME}'>${BRANCH_NAME}</a> - <a href='https://${GIT_COMMIT}-chi-pr.enterprise.ctl.io'> WEB </a> : ${BRANCH_NAME}";
            } else if ( BRANCH_NAME != PROD_BRANCH && BRANCH_NAME == "pr-*" && BRANCH_NAME == "PR-*" ) {
              currentBuild.description = "<a href='https://github.com/CenturyLink/Chi/pull/${CHANGE_ID}'>PR#${CHANGE_ID}</a> - <a href='https://${GIT_COMMIT}-chi-pr.enterprise.ctl.io'> WEB </a> : ${PULL_REQUEST}";
            }
          }
        }
      }
      stage('Promote and Deployment tagging') {
        when {
            tag pattern: RC_TAG_PATTERN, comparator: "REGEXP"
        }
        steps {
          script {
             def tagAttributes = jslGCRGetTagAttributes()
             echo "Processing ${tagAttributes['tagType']} tag for DevOps ${tagAttributes['gcrNumber']}"
             jslGCRTag('PROMOTE', tagAttributes['tsMark'], tagAttributes['gcrNumber'])
             def tagName = jslGCRTag('DEPLOYMENT', tagAttributes['tsMark'], tagAttributes['gcrNumber'])
             def currentJob = env.JOB_NAME.toString()
             def currentBaseName = env.JOB_BASE_NAME.toString()
             def pathJob = currentJob - currentBaseName
             echo "Triggering deployment to production job ${pathJob} with tag ${tagName}"
             jslTriggerRemoteJob(tagName.trim(), "/${pathJob}/".toString(), false, false, 6)
          }
        }
      }
      stage('Authorize - Prod only') {
        when {
          tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP"
        }
        steps {
          script {
            echo "Gotta get the credentials for this"
            // jslDeploymentControlKnob()
          }
        }
      }
      stage('Static Code Analysis') {
        parallel {
          stage('Linting Standard CHI') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
                args '-m 2G --shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            when {
              beforeAgent true
              allOf {
                  not {branch PROD_BRANCH}
                  not {tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP"}
                  not {tag pattern: RC_TAG_PATTERN, comparator: "REGEXP"}
              }
            }
            steps {
              script{
                jslYarnWrapper('install')
                jslNpmWrapper('run lint:css')
              }
            }
          }
          stage('Linting Chi-vue') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/chi-vue'
                label 'Docker-enabled'
                args '-m 2G --shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            when {
              beforeAgent true
              allOf {
                  not {branch PROD_BRANCH}
                  not {tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP"}
                  not {tag pattern: RC_TAG_PATTERN, comparator: "REGEXP"}
              }
            }
            steps {
              script{
                dir ('src/chi-vue') {
                  jslYarnWrapper('install')
                  jslNpmWrapper('run prettier:checker')
                }
                echo "No full linting implemented in repo"
              }
            }
          }
          stage('DevSecOps') {
            when {
                allOf {
                  not { tag pattern: RC_TAG_PATTERN, comparator: "REGEXP"}
                  not { tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP"}
                }
            }
            steps {
              script {
                jslGitHubSecurityAlert()
              }
            }
          }
          stage('Package Version') {
            when {
              anyOf {
                branch PROD_BRANCH
                tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP"
              }
            }
            steps {
              script {
                sh(script: """
                    set +x
                    git whatchanged -1 --format=oneline
                    git diff HEAD~2 package.json | grep '"version":' || echo No package.json changes
                    rm -rf version_bump
                    if [ \$(git diff HEAD~2 package.json | grep '"version":' | wc -l) -eq 2 ]; then
                      echo -n "yes" > version_bump
                    else
                      echo -n "no" > version_bump
                    fi
                    cat version_bump
                    echo "All good."
                """, label: "Package version validation")
                stash name: "VERSION_BUMP", includes: "version_bump"
              }
            }
          }
        }
      }
      stage('CE & Vue Build') {
        when {
            allOf {
              not {tag pattern: RC_TAG_PATTERN, comparator: "REGEXP"}
              not {tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP"}
            }
        }
        parallel {
          stage ('Building Custom elements') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
                args '-m 2G --shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            steps {
              script {
                dir('src/custom-elements') {
                  jslYarnWrapper('install')
                  jslNpmWrapper('run build')
                  stash name: "DIST-CHI-CE", includes: "dist/**"
                  stash name: "NODEMODULES-CHI-CE", includes: "node_modules/**"
                }
              }
            }
          }
          stage ('Building Chi-vue') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/chi-vue'
                label 'Docker-enabled'
                args '-m 2G --shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            steps {
              script {
                dir('src/chi-vue') {
                  jslYarnWrapper('install')
                  jslNpmWrapper('run build:component')
                  stash name: "DIST-CHI-VUE", includes: "dist/**"
                  jslNpmWrapper('run build:umd')
                  stash name: "DIST-CHI-VUE-UMD", includes: "umd/**"
                  stash name: "NODEMODULES-CHI-VUE", includes: "node_modules/**"
                }
              }
            }
          }
        }
      }
      stage ('Building Chi') {
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/sonar-scanner'
            label 'Docker-enabled'
            args '-m 2G --shm-size=2gb'
            // registryUrl DOCKER_REGISTRY
            // registryCredentialsId DOCKER_CREDENTIALS
          }
        }
        when {
            allOf {
              not {tag pattern: RC_TAG_PATTERN, comparator: "REGEXP"}
              not {tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP"}
            }
        }
        steps {
          script {
            dir ('src/chi-vue') {
              unstash name: "DIST-CHI-VUE-UMD"
            }
            sh "sleep 10s"
            dir ('src/custom-elements') {
              unstash name: "DIST-CHI-CE"
            }
            sh "sleep 10s"
            jslYarnWrapper('install')
            jslNpmWrapper('run build')
            stash name: "DIST-CHI", includes: "dist/**"
            stash name: "NODEMODULES-CHI", includes: "node_modules/**"
            jslJiraSendBuildInfo()
          }
        }
      }
      stage ('Cleaning reports & test folders before testing') {
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/sonar-scanner'
            label 'Docker-enabled'
            args '-m 2G --shm-size=2gb'
            // registryUrl DOCKER_REGISTRY
            // registryCredentialsId DOCKER_CREDENTIALS
          }
        }
        when {
            allOf {
              not {tag pattern: RC_TAG_PATTERN, comparator: "REGEXP"}
              not {tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP"}
            }
        }
        steps {
          script {
            sh script: """
              rm -rf reports test/bitmaps_test
            """, label: "Cleaning reports & test folders"
          }
        }
      }
      stage ('Tests') {
        when {
            beforeAgent true
            allOf {
              not {tag pattern: RC_TAG_PATTERN, comparator: "REGEXP"}
              not {tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP"}
              not {tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP"}
            }
        }
        parallel {
          stage ('BackstopJS Responsive Test') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
                args '-m 2G --shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            steps {
              script {
                sh """
                  rm -rf dist
                  rm -rf node_modules
                  rm -rf reports/html_report/responsive
                """
                unstash name: "DIST-CHI"
                unstash name: "NODEMODULES-CHI"
                sh script: """
                  mkdir -p reports/html_report/responsive
                  cp -a config/backstop_data/bitmaps_reference/responsive reports/html_report/responsive/bitmaps_reference
                """, label: "Copying for executing BackstopJS Responsive tests"
                jslNpmWrapper('run test:backstop:responsive')
                stash name: "BACKSTOP-RES-HTML", includes: "reports/html_report/responsive/**"
                stash name: "BACKSTOP-RES-CI", includes: "reports/ci_report/responsive/**"
                archiveArtifacts artifacts: "reports/html_report/responsive/**", fingerprint: true
                jslPublishTestResults('reports/ci_report/responsive/xunit.xml')
                sh "test ${currentBuild.currentResult} != UNSTABLE"
              }
            }
          }
          stage ('BackstopJS Non-Responsive Test') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
                args '-m 2G --shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            steps {
              script {
                sh """
                  rm -rf dist
                  rm -rf node_modules
                  rm -rf reports/html_report/non_responsive
                """
                unstash name: "DIST-CHI"
                unstash name: "NODEMODULES-CHI"
                sh script: """
                  mkdir -p reports/html_report/non_responsive
                  cp -a config/backstop_data/bitmaps_reference/non_responsive reports/html_report/non_responsive/bitmaps_reference
                """, label: "Copying for executing BackstopJS Non-Responsive tests"
                jslNpmWrapper('run test:backstop:non-responsive')
                stash name: "BACKSTOP-NON-RES-HTML", includes: "reports/html_report/non_responsive/**"
                stash name: "BACKSTOP-NON-RES-CI", includes: "reports/ci_report/non_responsive/**"
                archiveArtifacts artifacts: "reports/html_report/non_responsive/**", fingerprint: true
                jslPublishTestResults('reports/ci_report/non_responsive/xunit.xml')
                sh "test ${currentBuild.currentResult} != UNSTABLE"
              }
            }
          }
          stage ('BackstopJS Custom Elements Test') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
                args '-m 2G --shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            steps {
              script {
                sh """
                  rm -rf dist
                  rm -rf node_modules
                  rm -rf reports/html_report/non_responsive_ce
                """
                unstash name: "DIST-CHI"
                unstash name: "NODEMODULES-CHI"
                sh script: """
                  mkdir -p reports/html_report/non_responsive_ce
                  cp -a config/backstop_data/bitmaps_reference/non_responsive reports/html_report/non_responsive_ce/bitmaps_reference
                """, label: "Copying for executing BackstopJS Custom Elements tests"
                jslNpmWrapper('run test:backstop:non-responsive:ce')
                stash name: "BACKSTOP-CE-HTML", includes: "reports/html_report/non_responsive_ce/**"
                stash name: "BACKSTOP-CE-CI", includes: "reports/ci_report/non_responsive_ce/**"
                archiveArtifacts artifacts: "reports/html_report/non_responsive_ce/**", fingerprint: true
                jslPublishTestResults('reports/ci_report/non_responsive_ce/xunit.xml')
                sh "test ${currentBuild.currentResult} != UNSTABLE"
              }
            }
          }
          stage ('Cypress local Testing') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
                args '-m 2G --shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            steps {
              script {
                sh """
                  rm -rf dist
                  rm -rf node_modules
                """
                jslYarnWrapper('install')
                jslYarnWrapper('cache clean')
                unstash name: "DIST-CHI"
                dir ('src/custom-elements') {
                  sh """
                    rm -rf dist
                    rm -rf node_modules
                  """
                  unstash name: "DIST-CHI-CE"
                  unstash name: "NODEMODULES-CHI-CE"
                }
                dir ('src/chi-vue') {
                  sh """
                    rm -rf dist
                    rm -rf node_modules
                  """
                  unstash name: "DIST-CHI-VUE"
                  unstash name: "NODEMODULES-CHI-VUE"
                }
                def retries = 3
                while (retries != 0) {
                  try {
                    jslNpxWrapper('gulp serve 2>&1 >/dev/null &')
                    break
                  } catch (Exception e) {
                    retries -= 1
                    echo "failure starting local server // remaining attempts: ${retries}"
                  }
                }
                sh script: """
                  ./node_modules/.bin/cypress run
                """, label: "Running NPX before adding JSL file, TEST."
                jslNpxWrapper('gulp serve:stop')
              }
            }
          }
        }
      }
      stage('Coverage') {
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/sonar-scanner'
            label 'Docker-enabled'
            // registryUrl DOCKER_REGISTRY
            // registryCredentialsId DOCKER_LOGIN_CREDENTIALS
          }
        }
        when {
          beforeAgent true
          allOf {
              not {tag pattern: RC_TAG_PATTERN, comparator: "REGEXP"}
              not {tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP"}
              not {tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP"}
          }
        }
        steps {
          script {
            // jslYarnWrapper('install')
            // sh "rm -rf .nyc_output*"
            // sh "rm -rf coverage/"
            // unstash name: "NYC_OUTPUT_UNIT"
            // unstash name: "NYC_OUTPUT_E2E"
            // jslNpmWrapper('run cover:merge')
            // archiveArtifacts artifacts: '.nyc_output/**'
            // jslNpmWrapper('run cover:report:jenkins || echo Error when evaluating coverage report!')
            // stash name: "COVERAGE", includes: "coverage/**"
            // archiveArtifacts artifacts: 'coverage/**'
            jslQualityGateCodeCoverage('./cicd/docker/SonarQube/sonar-project.properties')
          }
        }
      }
      stage('Coverage upload to Sonarqube') {
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/sonar-scanner'
            label 'Docker-enabled'
            // registryUrl DOCKER_REGISTRY
            // registryCredentialsId DOCKER_LOGIN_CREDENTIALS
          }
        }
        when {
            beforeAgent true
            allOf {
              not {tag pattern: RC_TAG_PATTERN, comparator: "REGEXP"}
              not {tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP"}
              not {tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP"}
            }
        }
        steps {
          script {
            try {
              unstash name: "COVERAGE"
            }  catch (Exception e) {
              echo "No coverage data"
            }
            unstash name: "BACKSTOP-CE-CI"
            unstash name: "BACKSTOP-NON-RES-CI"
            unstash name: "BACKSTOP-RES-CI"
            jslSonarQubeStaticAnalysis('./cicd/docker/SonarQube/sonar-project.properties', env.SONARQUBE_CREDENTIALS)
          }
        }
      }
      stage('Quality Gate Check'){
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/sonar-scanner'
            label 'Docker-enabled'
            // registryUrl DOCKER_REGISTRY
            // registryCredentialsId DOCKER_LOGIN_CREDENTIALS
          }
        }
        when {
            beforeAgent true
            allOf {
              not {tag pattern: RC_TAG_PATTERN, comparator: "REGEXP"}
              not {tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP"}
              not {tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP"}
            }
        }
        steps {
          script {
            jslQualityGate()
          }
        }
      }
      stage('Version check & Publish') {
        when {
          beforeAgent true
          allOf {
              tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP"
              expression {
                return isVersionBump()
              }
          }
        }
        stages {
          stage('GitHub Release') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
              }
            }
            steps {
              script {
                sh script: """#!/bin/bash
                  VERSION=\$(cat package.json | grep '"version":' | cut -f4 -d '"')
                  major=\$(echo \$VERSION | awk -F '.' '{print \$1}')
                  minor=\$(echo \$VERSION | awk -F '.' '{print \$2}')
                  patch=\$(echo \$VERSION | awk -F '.' '{print \$3}')

                  if [[ \$major == 0 ]]
                  then
                      echo "Major digit Already Zero"
                      majorold="0"
                  elif [[ \$minor == 0 ]]
                  then
                      majorold=\$(( \$major - 1 ))
                  else
                      majorold="\$major"
                  fi

                  if [[ \$minor == 0 ]]
                  then
                      echo "Minor digit Already Zero"
                      minorold="0"
                  elif [[ \$patch == 0 ]]
                  then
                      minorold=\$(( \$minor - 1 ))
                  else
                      minorold="\$minor"
                  fi

                  if [[ \$patch == 0 ]]
                  then
                      echo "Patch digit Already Zero"
                      patchold="0"
                  else
                      patchold=\$(( \$patch - 1 ))
                  fi

                  echo "READING CHANGELOG FOR VERSION: \$major.\$minor.\$patch"
                  echo "v\$major.\$minor.\$patch" > shortCHANGELOG.md
                  echo "" >> shortCHANGELOG.md
                  sed -n -e "/\$major.\$minor.\$patch/,/\$majorold.\$minorold.\$patchold/ p" CHANGELOG.md | head -n -2 >> shortCHANGELOG.md
                """
                env.VERSION = sh (
                  script: """
                    cat package.json | grep '"version":' | cut -f4 -d '"'
                  """,
                  returnStdout: true
                ).trim()
                jslHubWrapper("release create -F shortCHANGELOG.md v${env.VERSION}")
              }
            }
          }
        }
      }
      stage('Publish Chi-Vue') {
        when {
          beforeAgent true
          branch 'chi-vue'
        }
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/chi-vue'
            label 'Docker-enabled'
            // registryUrl DOCKER_REGISTRY
            // registryCredentialsId DOCKER_LOGIN_CREDENTIALS
          }
        }
        steps {
          script {
            dir('src/chi-vue') {
              jslYarnWrapper('install')
              jslNpmWrapper('run build:component')
              // jslNpmWrapper('pack')
              // jslNpmWrapper('login --scope=@centurylink --registry=https://npm.pkg.github.com')
              // jslNpmWrapper('publish')

              jslNpmPublish(false, env.GITHUB_ALTER_CREDENTIALS)
            }
          }
        }
      }
      stage ('Publish DEV to S3/Prod to AssetsServer') {
        parallel {
          stage ('Publish Dev build') {
            when {
              beforeAgent true
              allOf {
                not {branch PROD_BRANCH}
                not {tag pattern: RC_TAG_PATTERN, comparator: "REGEXP"}
                not {tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP"}
                not {tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP"}
              }
            }
            steps {
              script {
                sh "rm -rf dist"
                unstash name: "DIST-CHI"
                def s3Uri = "${GIT_COMMIT}-chi-pr-po-ctl"
                sh script:"""
                  cat << 'PolicyDocument' > policy.json
{
   "Statement": [
      {
         "Effect": "Allow",
         "Principal": "*",
         "Action": "s3:GetObject",
         "Resource": "arn:aws:s3:::${s3Uri}/*"
      }
   ]
}
PolicyDocument
                """, label: "Policy.json"

                jslAwsCliWrapper("s3api create-bucket --bucket ${s3Uri} --acl public-read", 'us-east-1', true)
                jslAwsCliWrapper("s3api put-bucket-policy --bucket ${s3Uri} --policy file://policy.json", 'us-east-1', true)
                jslAwsCliWrapper("s3api get-bucket-policy --bucket ${s3Uri}", 'us-east-1', true)
                jslAwsCliWrapper("s3 cp ./dist s3://${s3Uri} --recursive", 'us-east-1', true)
                jslAwsCliWrapper("s3 website s3://${s3Uri} --index-document index.html --error-document index.html", 'us-east-1', true)


                // sh "sleep 10m"
                // jslAwsCliWrapper("s3 rb ${s3Uri} --force", 'us-east-1', true)
                echo "This will publish dev build to S3"
                if (env.CHANGE_ID != null) {
                  echo "Sending Jira Deployment for DEV"
                  jslDeploymentContractValidationWrite("development")
                  jslJiraSendDeploymentInfo('development', true)
                }
              }
            }
          }
          stage ('Publish AssetServer Build') {
            when {
              beforeAgent true
              anyOf {
                branch PROD_BRANCH
                tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP"
              }
            }
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_LOGIN_CREDENTIALS
              }
            }
            steps {
              script {
                sh "rm -rf dist node_modules"
                unstash name: "DIST-CHI"
                sh script:"""
                  sed -i 's#/getting-started#getting-started#g' dist/index.html

                  cat ${WORKSPACE}/CHANGELOG.md

                  if [ -e "${WORKSPACE}/ux-chi-AssetsServer" ];
                  then
                    rm -rf ${WORKSPACE}/ux-chi-AssetsServer
                  fi
                """, label: "Cleaning before pushing to AssetsServer"
                jslGitHubCloneRepo('ux-chi-AssetsServer')
                env.CHECK = sh (
                  script: """#!/bin/bash
                    VERSION=\$(cat package.json | grep '"version":' | cut -f4 -d '"')
                    if [[ -d ux-chi-AssetsServer/chi/\$VERSION ]]
                    then
                        check="EXISTS"
                    else
                        check="NO"
                    fi
                    echo "\$check"
                  """,
                  returnStdout: true
                ).trim()

                echo "PlaceHolder for ASSET Server Push of CHI version"
                sh script:"""
                  ls -lah
                  VERSION=\$(cat package.json | grep '"version":' | cut -f4 -d '"')
                  echo \${VERSION}
                  cat << PRDesc > ux-chi-AssetsServer/prepared-message.md
This PR is for CHI \${VERSION}

You can check staging in https://assets-dev.ctl.io/chi/staging
PRDesc
                  mkdir -p ${WORKSPACE}/ux-chi-AssetsServer/chi/latest
                  cp -R ${WORKSPACE}/dist/* ${WORKSPACE}/ux-chi-AssetsServer/chi/latest/
                  mv ${WORKSPACE}/dist ${WORKSPACE}/ux-chi-AssetsServer/chi/\$VERSION
                  cd ${WORKSPACE}/ux-chi-AssetsServer
                  git checkout -b "CHI_\$VERSION"
                  git add ${WORKSPACE}/ux-chi-AssetsServer/chi/\$VERSION
                  git add ${WORKSPACE}/ux-chi-AssetsServer/chi/latest
                  git config user.email "scmauto@lumen.com"
                  git config user.name "SCMAUTO"
                  git commit -m "CHI_\$VERSION"
                  git push -f origin CHI_\$VERSION
                """, label: "Pushing branch to AssetsServer"
                if ( env.CHECK == "NO" ) {
                  dir ('ux-chi-AssetsServer') {
                    jslHubWrapper('pull-request -F prepared-message.md')
                  }
                } else {
                  echo "NO PR CREATED THIS TIME; REQUIRES VERSION BUMP"
                }
                if (env.TAG_NAME && env.TAG_NAME.toString().indexOf("##DEPLOYMENT##") != -1) {
                  def previousDeploymentCommit = jslGCRTagCommit('DEPLOYMENT', 2)
                  def changeLog = jslAuditChangelog(true, env.GIT_COMMIT, previousDeploymentCommit)
                  echo "Sending Jira Deployment changeLog for PROD: ${changeLog}"
                  jslDeploymentContractValidationWrite("production")
                  jslJiraSendDeploymentInfo('production', true, env.BRANCH_NAME, changeLog)
                } else {
                  def lastDeploymentCommit = jslGCRTagCommit()
                  def changeLog = jslAuditChangelog(true, env.GIT_COMMIT, lastDeploymentCommit)
                  echo "Sending Jira Deployment changeLog for STAGING: ${changeLog}"
                  jslDeploymentContractValidationWrite("staging")
                  jslJiraSendDeploymentInfo('staging', true, env.BRANCH_NAME, changeLog)
                }
              }
            }
          }
        }
      }
      stage('Smoke Tests') {
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/sonar-scanner'
            label 'Docker-enabled'
            // registryUrl DOCKER_REGISTRY
            // registryCredentialsId DOCKER_LOGIN_CREDENTIALS
          }
        }
        when {
          beforeAgent true
          tag pattern: DEPLOY_TAG_PATTERN, comparator: "REGEXP"
        }
        steps {
          script {
            sh "rm -rf cypress/reports/smokeTests && mkdir -p cypress/reports/smokeTests"
            if (env.VERSION != null) {
              echo "Starting SMOKE TESTS with the published release ${env.VERSION}"

              def latestRelease = ""
              withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: env.GITHUB_TOKEN_CREDENTIALS,
                                usernameVariable: 'USERNAME', passwordVariable: 'ACCESS_TOKEN']]) {
                try {
                  latestRelease = sh script: """
                   curl -s -H "Authorization: token \${ACCESS_TOKEN}" "https://api.github.com/repos/CenturyLink/chi/releases/latest" | grep '"name":' | cut -d: -f 2,3 | tr -d '"' | tr -d ','
                   """, label: 'Getting Latest Release Version', returnStdout: true
                   latestRelease = latestRelease.trim()
                } catch (Exception e) {
                  echo "Error checking chi releases: ${e.getMessage()}"
                }
              }

              jslGenerateManualTestReport("Version Release", "Check Version", "v${env.VERSION}", (latestRelease == "v${env.VERSION}").toBoolean(), 1.0, "cypress/reports/smokeTests/smoke_test_result.xml")
              env.SMOKE_TEST_FAILURE = (latestRelease != "v${env.VERSION}")
              echo "Smoke Test Failure? ${env.SMOKE_TEST_FAILURE}"
            } else {
              echo "Smoke Test hook without release"
              jslGenerateManualTestReport("Change without Release", "Hook test", "hookTest", true, 1.0, "cypress/reports/smokeTests/smoke_test_result.xml")
            }

            stash name: 'smokeTests', includes:"cypress/reports/smokeTests/**"
            jslPublishTestResults('cypress/reports/smokeTests/**')
          }
        }
      }
      stage('Adoption Stats') {
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/jira'
            label 'Docker-enabled'
            // registryUrl DOCKER_REGISTRY
            // registryCredentialsId DOCKER_LOGIN_CREDENTIALS
          }
        }
        when {
            beforeAgent true
            allOf {
              not {tag pattern: RC_TAG_PATTERN, comparator: "REGEXP"}
              not {tag pattern: PROMOTE_TAG_PATTERN, comparator: "REGEXP"}
            }
        }
        steps {
          script {
            if (env.TAG_NAME && env.TAG_NAME.toString().indexOf("##DEPLOYMENT##") != -1) {
              env.DEVOPS_GCR_PREPROD_BRANCH = 'master'
              unstash name: "smokeTests"
              zip zipFile: 'smoke_tests.zip', dir: "cypress/reports/smokeTests"
              if (env.SMOKE_TEST_FAILURE != null && env.VERSION != null) {
                //DevOpsGCR with release Version
                echo "updating DevOpsGCR"
                if (env.SMOKE_TEST_FAILURE == "false") {
                  echo "release successfully created"
                  jslGCRDevOpsUpdate('SUCCEEDS', ['smoke_tests.zip'])
                } else {
                  echo "failures creating release!"
                  jslGCRDevOpsUpdate('FAILED', ['smoke_tests.zip'], "SmokeTests failed after release creation")
                }
              }
              echo "Adding smoke Tests / smoke Test hook to Adoption Stats"
              jslAdoptionMain('cypress/reports/smokeTests/*.xml')

            } else {
              try {
                sh """
                  rm -rf reports/ci_report/*
                """
                unstash name: "BACKSTOP-CE-CI"
                unstash name: "BACKSTOP-NON-RES-CI"
                unstash name: "BACKSTOP-RES-CI"
                sh """
                  cat reports/ci_report/responsive/xunit.xml > reports/ci_report/xunitfinal.xml
                  cat reports/ci_report/non_responsive/xunit.xml >> reports/ci_report/xunitfinal.xml
                  cat reports/ci_report/non_responsive_ce/xunit.xml >> reports/ci_report/xunitfinal.xml
                """
                echo "No E2E results found, reporting only unit"
              } catch (Exception exc) {
                echo "No regression tests present and no AdoptionMain Stats neither DevOps GCR"
                sh """
                  mkdir -p reports/ci_report
                  touch reports/ci_report/xunitfinal.xml
                """
              }
              if (isVersionBump()) {
                //Set variable to trigger DevOps GCR Creation
                env.DEVOPS_GCR_PREPROD_BRANCH = 'master'
              }
              jslAdoptionMain('reports/ci_report/xunitfinal.xml')
            }

          }
        }
      }
    }
    post {
      /*
      https://www.jenkins.io/doc/book/pipeline/syntax/#post

      Always post somewhere the watermark:
    - md5sum of Jenkinsfile
    - Output of the Jenkinsfile checker output
      */
      success {
        jslNotification('success')
        jslGitHubMessage("You can check this PRs instance in https://${GIT_COMMIT}-chi-pr.enterprise.ctl.io", env.CHANGE_ID)
        // cleanWs()
      }
      failure {
        jslNotification('failure')
        // cleanWs()
      }
      unstable {
        jslNotification('unstable')
        // cleanWs()
      }
  }
}

def isVersionBump() {
  try {
    unstash name: "VERSION_BUMP"
  } catch (Exception e) {
    echo "No VERSION_BUMP done"
    return false
  }
  def versionBump = readFile file: "version_bump"
  echo "Publish condition: GIT_BRANCH is _${env.GIT_BRANCH.trim().toLowerCase()}_"
  echo "Publish condition: currentResult is _${currentBuild.currentResult.toLowerCase()}_"
  echo "Publish condition: versionBump is _${versionBump.trim()}_"
  def isVersionBumpResult = true
  isVersionBumpResult = isVersionBumpResult && versionBump.trim() == "yes"
  isVersionBumpResult = isVersionBumpResult && currentBuild.currentResult.toLowerCase() == "success"
  isVersionBumpResult = isVersionBumpResult && ( ['origin/master', 'origin/main', 'master', 'main', PROD_BRANCH].contains(env.GIT_BRANCH.trim().toLowerCase()) || (env.TAG_NAME && env.TAG_NAME.toString().indexOf("##DEPLOYMENT##") != -1))
  return isVersionBumpResult
}
