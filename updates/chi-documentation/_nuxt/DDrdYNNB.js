var f=Object.defineProperty;var h=(t,e,o)=>e in t?f(t,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[e]=o;var a=(t,e,o)=>h(t,typeof e!="symbol"?e+"":e,o);import{V as g,N as b}from"./uJTUijt2.js";import{_ as v}from"./D8GK0F__.js";import{_ as x}from"./DKu8Jd2y.js";import{o as c,f as w,w as l,a as m,c as d,i as C,n as S,F as $,b as y}from"./B5CYXVwa.js";import{_ as B}from"./DlAUqK2U.js";import"./C-hgEc7b.js";import"./drvuhYu1.js";import"./2EwpEKcw.js";var j=Object.defineProperty,N=Object.getOwnPropertyDescriptor,O=(t,e,o,r)=>{for(var n=r>1?void 0:r?N(e,o):e,i=t.length-1,s;i>=0;i--)(s=t[i])&&(n=(r?s(e,o,n):s(n))||n);return r&&n&&j(e,o,n),n};let p=class extends g{constructor(){super(...arguments);a(this,"exampleTabs",[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}]);a(this,"icons",["icon--success","icon--info","icon--warning","icon--danger","icon--muted"])}get codeSnippets(){return{htmlblueprint:this.generateHtml()}}generateHtml(){return this.icons.map(o=>`<i class="chi-icon icon-atom -md -${o}" aria-hidden="true"></i>`).join(`
`)}};p=O([b({})],p);const P=m("p",{class:"-text"},"Use semantic text colors to communicate meaning to users. Examples include displaying alerts, form field validation, user status, application state and more. Use green (success) for positive, blue (info) for informative, red (danger) for negative, yellow (warning) for needs attention, and grey (muted) for neutral. Semantic colors should never be used for decorative purposes.",-1),T={class:"chi-grid -no-gutter"},V={class:"chi-col -w--12-text--center -p--1 -d--flex -justify-content--center"};function E(t,e,o,r,n,i){const s=v,u=x;return c(),w(u,{title:"Semantic",id:"semantic-icon-color",titleSize:"h4",tabs:t.exampleTabs,showSnippetTabs:!1,padding:"-p--0"},{"example-description":l(()=>[P]),example:l(()=>[m("div",T,[m("div",V,[(c(!0),d($,null,C(t.icons,_=>(c(),d("i",{class:S(`chi-icon icon-atom -md -${_} -m--1`),"aria-hidden":"true"},null,2))),256))])])]),"code-htmlblueprint":l(()=>[y(s,{class:"html",lang:"html",code:t.codeSnippets.htmlblueprint},null,8,["code"])]),_:1},8,["tabs"])}const G=B(p,[["render",E]]);export{G as default};
