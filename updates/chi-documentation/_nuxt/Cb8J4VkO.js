var b=Object.defineProperty;var v=(t,e,o)=>e in t?b(t,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[e]=o;var r=(t,e,o)=>v(t,typeof e!="symbol"?e+"":e,o);import{V as x,N as w}from"./uJTUijt2.js";import{_ as y}from"./D8GK0F__.js";import{_ as C}from"./DKu8Jd2y.js";import{o as c,c as m,b as _,w as p,F as f,a as i,i as S,n as z,d as u}from"./B5CYXVwa.js";import{_ as $}from"./DlAUqK2U.js";import"./C-hgEc7b.js";import"./drvuhYu1.js";import"./2EwpEKcw.js";var N=Object.defineProperty,T=Object.getOwnPropertyDescriptor,V=(t,e,o,s)=>{for(var n=s>1?void 0:s?T(e,o):e,l=t.length-1,a;l>=0;l--)(a=t[l])&&(n=(s?a(e,o,n):a(n))||n);return s&&n&&N(e,o,n),n};let d=class extends x{constructor(){super(...arguments);r(this,"gridCols",["-w--3","-w--9"]);r(this,"exampleTabs",[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}])}get codeSnippets(){return{htmlblueprint:this.generateHtml()}}generateHtml(){return`<div class="chi-grid">
${this.gridCols.map(o=>`  <div class="chi-col ${o}"></div>`).join(`
`)}
</div>`}};d=V([w({})],d);const B=i("p",{class:"-text"},[u("You can specify the amount of horizontal space that a column may consume by adding size classes to your column markup. For example, to create a layout with one column taking up 25% of the available space and the second other column taking up 75% of the space, you can add "),i("code",null,"-w--3"),u(" and "),i("code",null,"-w--9"),u(" to your each column, respectively:")],-1),O={class:"chi-grid -show--example -mb--2"},P=i("p",{class:"-text"},"Remember that the grid system consists of 12 columns, so each column unit is approximately 8.3% in width. So, to achieve this layout we are using 3 grid column units (1 unit * 3, or 8.3% * 3) to claim 25% of the width for the first column.",-1);function j(t,e,o,s,n,l){const a=y,g=C;return c(),m(f,null,[_(g,{title:"Column Sizing",id:"column-sizing",tabs:t.exampleTabs,showSnippetTabs:!1,padding:"-p--0",additionalStyle:"border: none;"},{"example-description":p(()=>[B]),example:p(()=>[i("div",O,[(c(!0),m(f,null,S(t.gridCols,h=>(c(),m("div",{class:z(["chi-col",h]),key:h},null,2))),128))])]),"code-htmlblueprint":p(()=>[_(a,{class:"html",lang:"html",code:t.codeSnippets.htmlblueprint},null,8,["code"])]),_:1},8,["tabs"]),P],64)}const A=$(d,[["render",j]]);export{A as default};
