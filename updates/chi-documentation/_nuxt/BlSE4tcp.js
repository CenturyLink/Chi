var p=Object.defineProperty;var u=(o,e,t)=>e in o?p(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var c=(o,e,t)=>u(o,typeof e!="symbol"?e+"":e,t);import{V as m,N as d}from"./uJTUijt2.js";import{j as f}from"./DAzwSQBh.js";import{_}from"./DdvxCeKp.js";import{o as g,c as v,b,a as l}from"./B5CYXVwa.js";import{_ as h}from"./DlAUqK2U.js";import"./2EwpEKcw.js";var $=Object.defineProperty,C=Object.getOwnPropertyDescriptor,y=(o,e,t,r)=>{for(var s=r>1?void 0:r?C(e,t):e,n=o.length-1,a;n>=0;n--)(a=o[n])&&(s=(r?a(e,t,s):a(s))||s);return r&&s&&$(e,t,s),s};let i=class extends m{constructor(){super(...arguments);c(this,"sizes",["sm","md","lg","xl"]);c(this,"colors",["none","primary","secondary","white","black","muted","grey","grey-20","grey-30","success","info","warning","danger"]);c(this,"columns",f)}get values(){return this.sizes.map(t=>this.colors.map(r=>({name:`${t}--${r}`,value:t}))).flat()}getContent(t,r){switch(t.key){case"class":return`<code>-bg--${r.name}</code>`;case"value":return`<div class="-text">Visible only from <code>${r.value}</code></div>`;default:return""}}};i=y([d({})],i);const x=l("h4",null,"Target specific breakpoints",-1),B=l("p",{class:"-text"},"To target a specific breakpoint, add the breakpoint abbreviation to the class.",-1);function T(o,e,t,r,s,n){const a=_;return g(),v("div",null,[x,B,b(a,{data:o.values,columns:o.columns,getContent:o.getContent},null,8,["data","columns","getContent"])])}const D=h(i,[["render",T]]);export{D as default};
