var m=Object.defineProperty;var u=(t,o,e)=>o in t?m(t,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[o]=e;var c=(t,o,e)=>u(t,typeof o!="symbol"?o+"":o,e);import{V as _,N as f}from"./uJTUijt2.js";import{l as b}from"./DAzwSQBh.js";import{_ as h}from"./drvuhYu1.js";import{_ as w}from"./DdvxCeKp.js";import{o as $,c as g,b as i,a as d}from"./B5CYXVwa.js";import{_ as v}from"./DlAUqK2U.js";import"./2EwpEKcw.js";var k=Object.defineProperty,B=Object.getOwnPropertyDescriptor,x=(t,o,e,s)=>{for(var a=s>1?void 0:s?B(o,e):o,r=t.length-1,n;r>=0;r--)(n=t[r])&&(a=(s?n(o,e,a):n(a))||a);return s&&a&&k(o,e,a),a};let l=class extends _{constructor(){super(...arguments);c(this,"columns",b);c(this,"types",["auto","*"]);c(this,"breakpoints",["sm","md","lg","xl"])}get allBreakpointsRows(){return this.types.map(e=>({class:`<code>-w--${e}</code>`,value:e==="*"?"can be incremented by 5%":`<code>width: ${e};</code>`}))}get specificBreakpointsRows(){return this.breakpoints.map(e=>this.types.map(s=>({class:`<code>-w-${e}--${s}</code>`,value:`Visible only from <code>${e}</code>${s==="*"?", can be incremented by 5%":""}`}))).flat()}};l=x([f({})],l);const y=d("p",{class:"-text"},"Sizing utility classes with no breakpoint defined apply to all screen sizes.",-1),T=d("p",{class:"-text"},"To target a specific breakpoint, add the breakpoint abbreviation to the class.",-1);function V(t,o,e,s,a,r){const n=h,p=w;return $(),g("div",null,[i(n,{title:"Width",id:"width",titleSize:"h2"}),i(n,{title:"Target all breakpoints",id:"target-all-breakpoints"}),y,i(p,{data:t.allBreakpointsRows,columns:t.columns},null,8,["data","columns"]),i(n,{title:"Target specific breakpoints",id:"target-specific-breakpoints"}),T,i(p,{data:t.specificBreakpointsRows,columns:t.columns},null,8,["data","columns"])])}const S=v(l,[["render",V]]);export{S as default};
