var m=Object.defineProperty;var _=(t,e,o)=>e in t?m(t,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[e]=o;var c=(t,e,o)=>_(t,typeof e!="symbol"?e+"":e,o);import{V as d,N as f}from"./uJTUijt2.js";import{_ as u}from"./drvuhYu1.js";import{_ as b}from"./DdvxCeKp.js";import{o as h,c as x,b as l,a as $}from"./B5CYXVwa.js";import{_ as v}from"./DlAUqK2U.js";var k=Object.defineProperty,w=Object.getOwnPropertyDescriptor,B=(t,e,o,s)=>{for(var a=s>1?void 0:s?w(e,o):e,i=t.length-1,n;i>=0;i--)(n=t[i])&&(a=(s?n(e,o,a):n(a))||a);return s&&a&&k(e,o,a),a};let r=class extends d{constructor(){super(...arguments);c(this,"columns",[{title:"Flex-basis Class",key:"cell1",width:"40%"},{title:"Value",key:"cell2",width:""}]);c(this,"types",["auto","0","*"]);c(this,"breakpoints",["sm","md","lg","xl"])}getRows(){return this.breakpoints.map(o=>this.types.map(s=>({cell1:`<code>-flex-basis-${o}--${s}</code>`,cell2:`Visible only from <code>${o}</code>${s==="*"?", can be incremented by 5%":""}`}))).flat()}};r=B([f({})],r);const V=$("p",{class:"-text"},"To target a specific breakpoint, add the breakpoint abbreviation to the class.",-1);function g(t,e,o,s,a,i){const n=u,p=b;return h(),x("div",null,[l(n,{title:"Target specific breakpoints",id:"basis-specific-breakpoints",titleSize:"h4"}),V,l(p,{data:t.getRows(),columns:t.columns,additionalClasses:"-bordered"},null,8,["data","columns"])])}const j=v(r,[["render",g]]);export{j as default};
