var u=Object.defineProperty;var m=(e,t,o)=>t in e?u(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o;var d=(e,t,o)=>m(e,typeof t!="symbol"?t+"":t,o);import{V as h,N as _}from"./uJTUijt2.js";import{_ as f}from"./drvuhYu1.js";import{_ as b}from"./D8GK0F__.js";import{o as v,c as P,b as a,F as g,a as i}from"./B5CYXVwa.js";import{_ as w}from"./DlAUqK2U.js";import"./C-hgEc7b.js";var S=Object.defineProperty,y=Object.getOwnPropertyDescriptor,V=(e,t,o,n)=>{for(var r=n>1?void 0:n?y(t,o):t,l=e.length-1,s;l>=0;l--)(s=e[l])&&(r=(n?s(t,o,r):s(r))||r);return n&&r&&S(t,o,r),r};let c=class extends h{constructor(){super(...arguments);d(this,"codeSnippets",{htmlblueprint:"@Prop({ reflect: true }) color: string;",htmlblueprint1:"@Prop({ mutable: true}) color: string;",htmlblueprint2:"@Prop() bordered: boolean = false;",htmlblueprint3:`@Watch('name')
  validateName(newValue: string, oldValue: string) {
    const isBlank = typeof newValue == null;
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (isBlank) { throw new Error('name: required') };
    if (!has2chars ) { throw new Error('name: has2chars') };
  }`})}};c=V([_({})],c);const x=i("p",{class:"-text"},"It is considered a good practice and SHOULD be configured to Reflect public properties to attributes.",-1),O=i("p",{class:"-text"},"Properties SHOULDN'T be configured as mutable and, once a value is set by a user, the component should not update it internally. Use it only if strictly necessary.",-1),N=i("p",{class:"-text"},"Properties SHOULD have a default value and MUST be validated.",-1),$=i("p",{class:"-text"},"Sometimes it is enough validation the use of a definition type:",-1),B=i("p",{class:"-text"},"Other times a function with a @Watch decorator is necessary:",-1);function D(e,t,o,n,r,l){const s=f,p=b;return v(),P(g,null,[a(s,{title:"Properties",id:"properties",titleSize:"h3"}),x,a(p,{id:"reflect",code:e.codeSnippets.htmlblueprint},null,8,["code"]),O,a(p,{id:"mutable",code:e.codeSnippets.htmlblueprint1},null,8,["code"]),N,$,a(p,{id:"bordered",code:e.codeSnippets.htmlblueprint2},null,8,["code"]),B,a(p,{id:"validate-name",code:e.codeSnippets.htmlblueprint3},null,8,["code"])],64)}const W=w(c,[["render",D]]);export{W as default};
