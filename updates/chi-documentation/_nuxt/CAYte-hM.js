var d=Object.defineProperty;var u=(t,o,e)=>o in t?d(t,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[o]=e;var l=(t,o,e)=>u(t,typeof o!="symbol"?o+"":o,e);import{V as _,N as f}from"./uJTUijt2.js";import{l as h}from"./DAzwSQBh.js";import{_ as g}from"./drvuhYu1.js";import{_ as b}from"./DdvxCeKp.js";import{o as $,c as v,b as n,a as m}from"./B5CYXVwa.js";import{_ as k}from"./DlAUqK2U.js";import"./2EwpEKcw.js";var w=Object.defineProperty,B=Object.getOwnPropertyDescriptor,x=(t,o,e,a)=>{for(var s=a>1?void 0:a?B(o,e):o,r=t.length-1,i;r>=0;r--)(i=t[r])&&(s=(a?i(o,e,s):i(s))||s);return a&&s&&w(o,e,s),s};let c=class extends _{constructor(){super(...arguments);l(this,"columns",h);l(this,"types",["auto","25","50","75","100"]);l(this,"breakpoints",["sm","md","lg","xl"])}get allBreakpointsRows(){return this.types.map(e=>({class:`<code>-h--${e}</code>`,value:`<code>height: ${e}${e!=="auto"?"%":""};</code>`}))}get specificBreakpointsRows(){return this.breakpoints.map(e=>this.types.map(a=>({class:`<code>-h-${e}--${a}</code>`,value:`Visible only from <code>${e}</code>`}))).flat()}};c=x([f({})],c);const T=m("p",{class:"-text"},"Sizing utility classes with no breakpoint defined apply to all screen sizes.",-1),V=m("p",{class:"-text"},"To target a specific breakpoint, add the breakpoint abbreviation to the class.",-1);function y(t,o,e,a,s,r){const i=g,p=b;return $(),v("div",null,[n(i,{title:"Height",id:"height",titleSize:"h2"}),n(i,{title:"Target all breakpoints",id:"target-all-breakpoints-1"}),T,n(p,{data:t.allBreakpointsRows,columns:t.columns},null,8,["data","columns"]),n(i,{title:"Target specific breakpoints",id:"target-specific-breakpoints-1"}),V,n(p,{data:t.specificBreakpointsRows,columns:t.columns},null,8,["data","columns"])])}const S=k(c,[["render",y]]);export{S as default};
