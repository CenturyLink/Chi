import{V as c,N as p}from"./uJTUijt2.js";import{_ as l}from"./drvuhYu1.js";import{o as u,c as v,b as d,a3 as h}from"./B5CYXVwa.js";import{_ as f}from"./DlAUqK2U.js";var _=Object.defineProperty,w=Object.getOwnPropertyDescriptor,m=(i,t,r,o)=>{for(var e=o>1?void 0:o?w(t,r):t,n=i.length-1,s;n>=0;n--)(s=i[n])&&(e=(o?s(t,r,e):s(e))||e);return o&&e&&_(t,r,e),e};let a=class extends c{};a=m([p({})],a);const y=h('<p class="-text">Chi defines 5 different viewports: XS, SM, MD, LG and XL. By default, columns in a grid container behave the same across viewport sizes. You will often want to change the layout based on the user&#39;s current viewport. You may accomplish this by setting viewport-specific classes to each of your columns that denote sizing or layout preferences for the viewport or viewports you are concerned with changing.<br><br>It is important to note that viewport-specific classes apply to their respective viewport and any larger viewport (unless overridden by a larger viewport class). For example, specifying <code>-w-md--6</code> would apply a width of 6 units to the column in MD, LG and XL viewports.</p><div class="chi-alert -info -my--3"><i class="chi-alert__icon chi-icon icon-circle-info"></i><div class="chi-alert__content"><p class="chi-alert__text">Try resizing your browser window to see the following examples in action as you change the viewport size.</p></div></div>',2);function g(i,t,r,o,e,n){const s=l;return u(),v("div",null,[d(s,{title:"Responsive Layout",id:"responsive-layout",titleSize:"h2"}),y])}const D=f(a,[["render",g]]);export{D as default};
