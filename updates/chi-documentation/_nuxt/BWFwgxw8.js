var u=Object.defineProperty;var p=(t,e,i)=>e in t?u(t,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[e]=i;var d=(t,e,i)=>p(t,typeof e!="symbol"?e+"":e,i);import{V as m,N as v}from"./uJTUijt2.js";import{T as b}from"./2EwpEKcw.js";import{o as f,c as g,a as r,d as h,F as w,a3 as l}from"./B5CYXVwa.js";import{_}from"./DlAUqK2U.js";var y=Object.defineProperty,k=Object.getOwnPropertyDescriptor,A=(t,e,i,s)=>{for(var o=s>1?void 0:s?k(e,i):e,a=t.length-1,n;a>=0;a--)(n=t[a])&&(o=(s?n(e,i,o):n(o))||o);return s&&o&&y(e,i,o),o};let c=class extends m{constructor(){super(...arguments);d(this,"CHI_URL",b)}};c=A([v({})],c);const x=l('<h2>Accessibility</h2><h3>Keyboard Navigation</h3><table class="chi-table"><thead><tr><th>Key</th><th>Function</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>Focus moves to the hour/minute select and opens the dropdown with hour/minute options. </td></tr><tr><td><code>Shift + Tab</code></td><td>Moves focus to the previous focusable element. </td></tr><tr><td><code>Up Arrow</code>, <code>Down Arrow</code></td><td>Moves focus between the options in the dropdown. If focus is on the last/first option, moves focus to the first/last option respectively.</td></tr><tr><td><code>Space</code>,<code>Enter</code></td><td>Selects the option and closes the dropdown.</td></tr><tr><td><code>Esc</code></td><td>Closes the dropdown and returns focus to the hour/minute select trigger.</td></tr></tbody></table>',3),q={class:"-text"},I=["href"],L=l('<p class="-text">Visit <a href="https://webaim.org/techniques/keyboard/" target="_blank">WebAIM</a> for keyboard techniques.</p><div class="chi-grid"><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for developers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Keyboard Navigation: Support navigation through hours, minutes, and optionally seconds using arrow keys, and allow selection with the &quot;Enter&quot; key.</li><li>Use <code>label</code> Elements: Provide descriptive labels for each select component involved in time picking. Ensure the <code>for</code> attribute of the label matches the <code>id</code> of the associated input or select box to support screen readers.</li><li>Use appropriate ARIA roles and attributes to enhance accessibility. For example, <code>role=&quot;listbox&quot;</code> for the select element and <code>role=&quot;option&quot;</code> for each option within hour, minute, and second dropdowns.</li><li>Error Handling and Feedback: Provide clear and immediate feedback for actions such as selection errors. Use ARIA live regions to announce updates or errors dynamically.</li><li>Test compatibility with various screen readers (like JAWS, NVDA, or VoiceOver) to ensure the time picker component is announced correctly. Options should be clearly read out when navigated.</li><li>Implement visible focus styles to help keyboard users determine which element has focus. </li></ul></div></div></div></div><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for designers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Ensure all interactive elements in the time picker, like hour and minute selections and navigation buttons, meet the minimum target size of 44x44 pixels, as recommended by WCAG 2.5.5.</li><li>Design elements with adequate spacing to prevent accidental activations.</li><li>Design the time picker with high contrast between text and background colors, ensuring a minimum contrast ratio of 4.5:1 for text.</li><li>Employ distinct visual styles for error states using icons, text styles, and colors to clearly denote and explain errors like invalid dates or format issues.</li><li>Implement noticeable focus indicators on interactive elements, using enhanced borders, outlines, or shadows to clearly mark the active element during keyboard navigation.</li><li>Use spacing, typography, and visual cues effectively.</li><li>Maintain consistency in the design of the time picker to provide a cohesive user experience.</li></ul></div></div></div></div></div><h3>Resources</h3><ul class="-text"><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time" target="_blank">Mozilla Resources for Developers: </a>Information about the HTML <code>input-type=time</code>.</li><li><a href="https://www.magentaa11y.com/checklist-native/time-picker/" target="_blank">MagentaA11y: </a>How to test a time picker dialog.</li></ul><h3>Other recommendations</h3>',5),C={class:"-text"},E=["href"],W=l('<h3>WCAG 2.2 Guidelines</h3><ul class="-text"><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content" target="_blank">Non-text Content: </a>All non-text content that is presented to the user has a text alternative that serves the equivalent purpose. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-content-structure-separation-programmatic" target="_blank">Info and Relationships: </a>Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-navigation-mechanisms-descriptive" target="_blank">Headings and Labels: </a>Headings and labels describe topic or purpose. (Level AA)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-minimize-error-cues" target="_blank">Labels or Instructions: </a>Labels or instructions are provided when content requires user input. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-ensure-compat-rsv" target="_blank">Name, Role, Value: </a>For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (Level A) </li></ul>',2);function G(t,e,i,s,o,a){return f(),g(w,null,[x,r("p",q,[h("For comprehensive details on keyboard support, refer to our "),r("a",{href:`${t.CHI_URL}/foundations/accessibility/using-keyboard/`,target:"_blank"},"Keyboard Control Guide.",8,I)]),L,r("p",C,[h("Explore additional accessibility tips in the general "),r("a",{href:`${t.CHI_URL}/foundations/accessibility/overview`,target:"_blank"},"Accessibility Guide.",8,E)]),W],64)}const H=_(c,[["render",G]]);export{H as default};
