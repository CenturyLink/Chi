var x=Object.defineProperty;var f=(s,e,l)=>e in s?x(s,e,{enumerable:!0,configurable:!0,writable:!0,value:l}):s[e]=l;var _=(s,e,l)=>f(s,typeof e!="symbol"?e+"":e,l);import{V as y,N as g}from"./uJTUijt2.js";import{_ as N}from"./drvuhYu1.js";import{o as c,c as u,b as v,a as t,F as h,i as b,d as o,t as d}from"./B5CYXVwa.js";import{_ as k}from"./DlAUqK2U.js";var w=Object.defineProperty,O=Object.getOwnPropertyDescriptor,V=(s,e,l,r)=>{for(var a=r>1?void 0:r?O(e,l):e,p=s.length-1,n;p>=0;p--)(n=s[p])&&(a=(r?n(e,l,a):n(a))||a);return r&&a&&w(e,l,a),a};let m=class extends y{constructor(){super(...arguments);_(this,"sizes",[{class:"0",value:"none"},{class:"1",value:"1px"},{class:"2",value:"4px"},{class:"3",value:"6px"},{class:"4",value:"8px"},{class:"5",value:"12px"}]);_(this,"breakpoints",[{class:"sm",value:"sm and larger"},{class:"md",value:"md and larger"},{class:"lg",value:"lg and larger"},{class:"xl",value:"xl"}])}};m=V([g({})],m);const $={class:"-pt--3"},z=t("p",{class:"-text"},[o("Shadow utility classes can be defined using the format "),t("code",null,"-s[-{breakpoint}]--{size}"),o(".")],-1),P={class:"-text"},B=t("code",null,"box-shadow",-1),D=t("p",{class:"-text"},"Optionally, include -{breakpoint} to apply the utility behaviour to some breakpoints. As a mobile-first library, any applying to smaller breakpoints will also modify larger ones unless another class overrides this behaviour.",-1),j={class:"-text"},A=t("li",null,[o("blank - leave blank to apply "),t("code",null,"shadow"),o(" to all breakpoints.")],-1),C=t("code",null,"shadow",-1);function F(s,e,l,r,a,p){const n=N;return c(),u("div",$,[v(n,{title:"Notation",id:"notation"}),z,v(n,{title:"{size}",id:"size"}),t("ul",P,[(c(!0),u(h,null,b(s.sizes,i=>(c(),u("li",null,[t("code",null,d(i.class),1),o(" - use to set "),B,o(" to "),t("code",null,d(i.value),1)]))),256))]),v(n,{title:"{breakpoint}",id:"breakpoint"}),D,t("ul",j,[A,(c(!0),u(h,null,b(s.breakpoints,i=>(c(),u("li",null,[t("code",null,d(i.class),1),o(" - use to apply "),C,o(" to "+d(i.value)+" breakpoints.",1)]))),256))])])}const H=k(m,[["render",F]]);export{H as default};
