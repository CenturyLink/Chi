var y=Object.defineProperty;var f=(l,t,a)=>t in l?y(l,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):l[t]=a;var g=(l,t,a)=>f(l,typeof t!="symbol"?t+"":t,a);import{V as x,N as k}from"./uJTUijt2.js";import{_ as N}from"./drvuhYu1.js";import{o as c,c as r,b as p,a as e,F as m,i as h,d as o,a3 as v,t as d}from"./B5CYXVwa.js";import{_ as z}from"./DlAUqK2U.js";var S=Object.defineProperty,$=Object.getOwnPropertyDescriptor,V=(l,t,a,u)=>{for(var i=u>1?void 0:u?$(t,a):t,_=l.length-1,s;_>=0;_--)(s=l[_])&&(i=(u?s(t,a,i):s(i))||i);return u&&i&&S(t,a,i),i};let b=class extends x{constructor(){super(...arguments);g(this,"sides",[{class:"t",value:"top"},{class:"b",value:"bottom"},{class:"l",value:"left"},{class:"r",value:"right"}]);g(this,"breakpoints",[{class:"sm",value:"sm and larger"},{class:"md",value:"md and larger"},{class:"lg",value:"lg and larger"},{class:"xl",value:"xl"}])}};b=V([k({})],b);const O=e("p",{class:"-text"},[o("Spacing utility classes can be defined using the format "),e("code",null,"-{property}{sides}[-{breakpoint}]--{size}"),o(".")],-1),P=e("ul",{class:"-text"},[e("li",null,[e("code",null,"m"),o(" - use to apply "),e("code",null,"margin")]),e("li",null,[e("code",null,"p"),o(" - use to apply "),e("code",null,"padding")])],-1),w={class:"-text"},B=v("<li><code>x</code> - use to apply <code>margin-left</code> and <code>margin-right</code> or <code>padding-left</code> and <code>padding-right</code></li><li><code>y</code> - use to apply <code>margin-top</code> and <code>margin-bottom</code> or <code>padding-top</code> and <code>padding-bottom</code></li><li>blank - leave blank to apply <code>margin</code> or <code>padding</code> to all 4 sides.</li>",3),D=e("p",{class:"-text"},"Optionally, include -{breakpoint} to apply the utility behaviour to some breakpoints. As a mobile-first library, any applying to smaller breakpoints will also modify larger ones unless another class overrides this behaviour.",-1),j={class:"-text"},A=e("li",null,[o("blank - leave blank to apply "),e("code",null,"margin"),o(" or "),e("code",null,"padding"),o(" to all breakpoints.")],-1),C=e("code",null,"margin",-1),F=e("code",null,"padding",-1),T={class:"-text"},E=v("<li><code>0</code> - use to eliminate existing <code>margin</code> or <code>padding</code> and set to <code>0</code></li><li><code>1</code> - use to set <code>margin</code> or <code>padding</code> to <code>$base-unit</code></li>",2),L=e("code",null,"margin",-1),q=e("code",null,"padding",-1),G=e("li",null,[e("code",null,"auto"),o(" - use to set "),e("code",null,"margin"),o(" to "),e("code",null,"auto"),o(" value")],-1);function H(l,t,a,u,i,_){const s=N;return c(),r("div",null,[p(s,{title:"Notation",id:"notation"}),O,p(s,{title:"{property}",id:"property",titleSize:"h4"}),P,p(s,{title:"{sides}",id:"sides",titleSize:"h4"}),e("ul",w,[(c(!0),r(m,null,h(l.sides,n=>(c(),r("li",null,[e("code",null,d(n.class),1),o(" - use to apply "),e("code",null,"margin-"+d(n.value),1),o(" or "),e("code",null,"padding-"+d(n.value),1)]))),256)),B]),p(s,{title:"{breakpoint}",id:"breakpoint",titleSize:"h4"}),D,e("ul",j,[A,(c(!0),r(m,null,h(l.breakpoints,n=>(c(),r("li",null,[e("code",null,d(n.class),1),o(" - use to apply "),C,o(" or "),F,o(" to "+d(n.value)+" breakpoints.",1)]))),256))]),p(s,{title:"{size}",id:"size",titleSize:"h4"}),e("ul",T,[E,(c(),r(m,null,h(9,n=>e("li",null,[e("code",null,d(n+1),1),o(" - use to set "),L,o(" or "),q,o(" to "),e("code",null,"$base-unit * "+d(n+1),1)])),64)),G])])}const U=z(b,[["render",H]]);export{U as default};
