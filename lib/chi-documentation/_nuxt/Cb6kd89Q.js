import{_ as m}from"./C3oeiXsm.js";import{_ as f}from"./NNa7qDYN.js";import{o as r,c as u,a as t,b as a,F as h,e as p,q as s,d,k as c,f as g,w as o}from"./CRBsHPO5.js";import{_ as v}from"./DlAUqK2U.js";import{_}from"./CzcPg6Mo.js";import{T as l}from"./CioVcaN-.js";import"./CFe54mHR.js";import"./DdXxu9YD.js";import"./CIPiXAF4.js";import"./CcrI_bxZ.js";import"./Di-ELn2D.js";import"./Cx7J_iiN.js";import"./Bxs95XXX.js";import"./Bdokak_-.js";import"./D1M_ALV-.js";import"./Cf-jS4dB.js";function y(n,i){const e=f;return r(),u(h,null,[i[0]||(i[0]=t("h2",null,"Web Component",-1)),a(e,{tag:"chi-radio-button"})],64)}const w={},A=v(w,[["render",y]]),k={class:"-text"},x=["href"],W={class:"-text"},q=["href"],I=p({__name:"_accessibility",setup(n){return(i,e)=>(r(),u(h,null,[e[2]||(e[2]=s('<h2>Accessibility</h2><h3>Keyboard Navigation</h3><table class="chi-table"><thead><tr><th>Key</th><th>Function</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>Moves focus to the next focusable element</td></tr><tr><td><code>Shift + Tab</code></td><td>Moves focus to the previous focusable element</td></tr><tr><td><code>Space</code></td><td>Toggles the selection state of the radio button between checked and unchecked</td></tr></tbody></table>',3)),t("p",k,[e[0]||(e[0]=d("For comprehensive details on keyboard support for input fields, refer to our ")),t("a",{href:`${c(l)}/foundations/accessibility/using-keyboard/`,target:"_blank"},"Keyboard Control Guide.",8,x)]),e[3]||(e[3]=s('<p class="-text">Visit <a href="https://webaim.org/techniques/keyboard/" target="_blank">WebAIM</a> for keyboard techniques.</p><div class="chi-grid"><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for developers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Use clear and descriptive labels for radio buttons to help users understand their purpose.</li><li>Ensure each radio button has an associated <code>label</code> element using the <code>for</code> attribute to match the <code>id</code> attribute of the radio button.</li><li>Assign unique <code>id</code> attributes to each radio button to maintain accessibility and prevent conflicts.</li><li>The <code>fieldset</code> surrounds the entire grouping of radio buttons. The <code>legend</code> provides a description for the grouping.</li><li>Use the <code>aria-describedby</code> attribute to associate error messages with radio buttons for accessibility.</li><li>Ensure that error messages are tagged with unique id attributes and referenced correctly with <code>aria-describedby</code> on corresponding radio buttons.</li></ul></div></div></div></div><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for designers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Ensure focus indicators are clearly visible to aid navigation for keyboard users.</li><li>Keep input labels visible, even when fields are focused.</li><li>Use contrasting colors for text and backgrounds to enhance readability.</li><li>Design clear error states and feedback for accessibility.</li><li>Use spacing, typography, and visual cues effectively.</li><li>Maintain consistency in the design of radio buttons to provide a cohesive user experience.</li></ul></div></div></div></div></div><p class="-text">Find live examples in the <a href="https://a11y-style-guide.com/style-guide/section-forms.html#kssref-forms-radio-buttons" target="_blank">A11y style guide</a>.</p><h3>Roles and attributes</h3><p class="-text">WAI-ARIA provides a grouping role that functions similarly to fieldset and legend.</p><table class="chi-table"><thead><tr><th>Role</th><th>Element</th><th>Usage</th></tr></thead><tbody><tr><td><code>group</code></td><td><code>div</code></td><td>Identifies the <code>div</code> element as a group container for the radio buttons.</td></tr></tbody></table><h3>Resources</h3><ul class="-text"><li><a href="https://www.w3.org/WAI/ARIA/apg/patterns/radio/" target="_blank">W3 Radio Button Group Example:</a> Information about the radio button accessible behavior.</li><li><a href="https://a11y-style-guide.com/style-guide/" target="_blank">A11y Style Guide:</a> Gives core recommendations for the accessible radio buttons.</li><li><a href="https://www.w3.org/WAI/tutorials/forms/" target="_blank">W3C Forms Tutorial:</a> Provides guidance on creating accessible forms.</li></ul><h3>Other recommendations</h3>',9)),t("p",W,[e[1]||(e[1]=d("Explore additional accessibility tips in the general ")),t("a",{href:`${c(l)}/foundations/accessibility/overview`,target:"_blank"},"Accessibility Guide.",8,q)]),e[4]||(e[4]=s('<h3>WCAG 2.2 Guidelines</h3><ul class="-text"><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content" target="_blank">Non-text Content:</a> All non-text content that is presented to the user has a text alternative that serves the equivalent purpose. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-content-structure-separation-programmatic" target="_blank">Info and Relationships:</a> Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-navigation-mechanisms-descriptive" target="_blank">Headings and Labels:</a> Headings and labels describe topic or purpose. (Level AA)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-minimize-error-cues" target="_blank">Labels or Instructions:</a> Labels or instructions are provided when content requires user input. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-ensure-compat-rsv" target="_blank">Name, Role, Value:</a> For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (Level A)</li></ul>',2))],64))}}),D=p({__name:"index",setup(n){return(i,e)=>{const b=m;return r(),g(b,{description:"Radio buttons are used to select a single item in a list of options.",title:"Radio button"},{examples:o(()=>[a(_)]),accessibility:o(()=>[a(I)]),properties:o(()=>[a(A)]),_:1})}}});export{D as default};
