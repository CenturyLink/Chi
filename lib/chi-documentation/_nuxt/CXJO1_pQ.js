import{_ as p}from"./Dg5y4kC1.js";import{_ as m}from"./3g_eURRF.js";import{T as a}from"./DhIYcLiR.js";import{e as c,c as v,o as l,m as i,a as t,d as s,j as r,F as b,f,w as o,b as n}from"./BnvmtQYM.js";import"./Bk5Nr_bJ.js";import"./CfKaToPi.js";import"./CpGl5nKs.js";import"./8Rn8z3Rm.js";import"./DlAUqK2U.js";import"./Cr4Krhex.js";import"./Zvpnuh4B.js";import"./DD5d-mQ_.js";const g={class:"-text"},_=["href"],y={class:"-text"},w=["href"],A=c({__name:"_accessibility",setup(d){return(u,e)=>(l(),v(b,null,[e[2]||(e[2]=i('<h2>Accessibility</h2><h3>Keyboard Navigation</h3><table class="chi-table"><thead><tr><th>Key</th><th>Function</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>Moves focus to the card element if it is interactive (e.g., a button or link inside).</td></tr><tr><td><code>Shift + Tab</code></td><td>Moves focus to the previous focusable element.</td></tr><tr><td><code>Enter</code>,<code>Space</code></td><td>Activates an interactive element inside the card, such as a button or link.</td></tr><tr><td><code>Esc</code></td><td>Closes any associated popovers or tooltips if present.</td></tr></tbody></table>',3)),t("p",g,[e[0]||(e[0]=s("For detailed keyboard interactions, refer to our ")),t("a",{href:`${r(a)}/foundations/accessibility/using-keyboard/`,target:"_blank"},"Keyboard Control Guide.",8,_)]),e[3]||(e[3]=i('<p class="-text">Visit <a href="https://webaim.org/techniques/keyboard/" target="_blank">WebAIM</a> for general keyboard techniques.</p><div class="chi-grid"><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for developers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Ensure that static cards do not receive focus by default. Use <code>tabindex=&quot;-1&quot;</code> if necessary.</li><li>If the card is interactive (clickable), assign it a semantic role such as <code>role=&quot;button&quot;</code> or <code>role=&quot;link&quot;</code> for assistive technologies.</li><li>Use appropriate heading levels (<code>h1</code>-<code>h6</code>) within cards to provide a logical content structure.</li><li>Ensure sufficient color contrast between text, backgrounds, and borders inside the card to meet WCAG contrast guidelines.</li><li>Provide clear focus indicators for all interactive elements inside the card, ensuring keyboard users can navigate efficiently.</li><li>Ensure all images inside a card have descriptive alt text unless they are decorative (use <code>alt=&quot;&quot;</code> and <code>aria-hidden=&quot;true&quot;</code>).</li><li>Avoid relying solely on color to convey meaning. Supplement with icons, text labels, or patterns.</li><li>Ensure interactive cards meet minimum touch target sizes (44x44 pixels) for accessibility compliance.</li><li>If the card contains dynamic content, use <code>aria-live=&quot;polite&quot;</code> to announce updates for screen readers.</li><li>Test with screen readers and keyboard navigation to ensure seamless usability.</li></ul></div></div></div></div><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for designers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Use clear, concise typography and maintain proper heading structure inside cards for easy scanning.</li><li>Ensure interactive cards have a clear hover and focus state for both visual and keyboard users.</li><li>Provide high contrast between the text and background to meet WCAG compliance.</li><li>Use alternative text or accompanying labels for icons or graphical elements to convey meaning effectively.</li><li>Maintain a consistent layout and spacing inside cards for optimal readability and accessibility.</li><li>If a card has actions, make sure the click target is large enough (minimum 44x44 pixels) for users with motor impairments.</li><li>Provide adequate spacing around cards to prevent accidental clicks, especially on mobile devices.</li></ul></div></div></div></div></div><p class="-text"> Explore live examples in the <a href="https://www.w3.org/WAI/ARIA/apg/patterns/" target="_blank">ARIA Practices Guide</a>. </p><h3>Resources</h3><ul class="-text"><li><a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Article_Role" target="_blank">MDN ARIA Article Role:</a> Best practices for structuring card content.</li><li><a href="https://www.a11yproject.com/checklist/" target="_blank">A11Y Project Checklist:</a> Comprehensive guide for accessibility best practices.</li></ul><h3>Other recommendations</h3>',6)),t("p",y,[e[1]||(e[1]=s("Find additional accessibility tips in our ")),t("a",{href:`${r(a)}/foundations/accessibility/overview`,target:"_blank"},"Accessibility Guide.",8,w)]),e[4]||(e[4]=i('<h3>WCAG 2.2 Guidelines</h3><ul class="-text"><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content" target="_blank">Non-text Content: </a>All non-text content that is presented to the user has a text alternative that serves the equivalent purpose. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-content-structure-separation-programmatic" target="_blank">Info and Relationships: </a>Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-navigation-mechanisms-descriptive" target="_blank">Headings and Labels: </a>Headings and labels describe topic or purpose. (Level AA)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-minimize-error-cues" target="_blank">Labels or Instructions: </a>Labels or instructions are provided when content requires user input. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-ensure-compat-rsv" target="_blank">Name, Role, Value: </a>For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (Level A)</li></ul>',2))],64))}}),F=c({__name:"index",setup(d){return(u,e)=>{const h=p;return l(),f(h,{"hide-builder":"",title:"Card",description:"Cards are flexible containers used for displaying content."},{examples:o(()=>[n(m)]),accessibility:o(()=>[n(A)]),_:1})}}});export{F as default};
