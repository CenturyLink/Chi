var u=Object.defineProperty;var p=(t,e,i)=>e in t?u(t,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[e]=i;var d=(t,e,i)=>p(t,typeof e!="symbol"?e+"":e,i);import{V as m,N as b}from"./NAah3XrW.js";import{T as v}from"./DtNz156Q.js";import{o as g,c as f,a4 as l,a as n,d as h,F as w}from"./CEIPSiTs.js";import{_ as k}from"./DlAUqK2U.js";var y=Object.defineProperty,x=Object.getOwnPropertyDescriptor,_=(t,e,i,a)=>{for(var s=a>1?void 0:a?x(e,i):e,o=t.length-1,r;o>=0;o--)(r=t[o])&&(s=(a?r(e,i,s):r(s))||s);return a&&s&&y(e,i,s),s};let c=class extends m{constructor(){super(...arguments);d(this,"CHI_URL",v)}};c=_([b({})],c);const A={class:"-text"},I=["href"],q={class:"-text"},C=["href"];function L(t,e,i,a,s,o){return g(),f(w,null,[e[2]||(e[2]=l('<h2>Accessibility</h2><h3>Keyboard Navigation</h3><table class="chi-table"><thead><tr><th>Key</th><th>Function</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>Moves focus to next element in Tab sequence. </td></tr><tr><td><code>Shift + Tab</code></td><td>Moves focus to the previous focusable element. </td></tr><tr><td><code>Enter</code>,<code>Space</code></td><td>Selects the option.</td></tr></tbody></table>',3)),n("p",A,[e[0]||(e[0]=h("For comprehensive details on keyboard support, refer to our ")),n("a",{href:`${t.CHI_URL}/foundations/accessibility/using-keyboard/`,target:"_blank"},"Keyboard Control Guide.",8,I)]),e[3]||(e[3]=l('<p class="-text">Visit <a href="https://webaim.org/techniques/keyboard/" target="_blank">WebAIM</a> for keyboard techniques.</p><div class="chi-grid"><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for developers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Keyboard Navigation: Support navigation through the options, and allow selection with the &quot;Enter&quot; key.</li><li>Use <code>label</code> elements to provide descriptive labels.</li><li>Use appropriate ARIA roles and attributes to enhance accessibility.</li><li>Test compatibility with various screen readers (like JAWS, NVDA, or VoiceOver) to ensure the picker component is announced correctly. Options should be clearly read out when navigated.</li><li>Implement visible focus styles to help keyboard users determine which element has focus.</li><li>Ensure all interactive elements in the picker component, including variations like checkboxes and radio buttons, meet the minimum target size of 44x44 pixels.</li><li>Implement noticeable focus indicators on interactive elements, including checkboxes and radio buttons.</li><li>Refer to our accessibility guides for Picker Content Variations, including checkboxes and radio buttons, to ensure comprehensive adherence to best practices.</li></ul></div></div></div></div><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for designers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Ensure all interactive elements in the picker, including variations like checkboxes and radio buttons, meet the minimum target size of 44x44 pixels.</li><li>Design elements, including checkboxes and radio buttons, with adequate spacing to prevent accidental activations.</li><li>Design the picker with high contrast between text and background colors, ensuring a minimum contrast ratio of 4.5:1 for text.</li><li>Implement noticeable focus indicators on interactive elements, including checkboxes and radio buttons.</li><li>Use spacing, typography, and visual cues effectively for all picker variations.</li><li>Maintain consistency in the design of the picker and its variations to provide a cohesive user experience.</li><li>Refer to our guides for Picker Content Variations, including checkboxes and radio buttons, to ensure comprehensive adherence to best practices.</li></ul></div></div></div></div></div><p class="-text"> Find live examples in the <a href="https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/examples/checkbox/" target="_blank">W3 checkbox (picker) Example</a>. </p><h3>Resources</h3><ul class="-text"><li><a href="https://www.digitala11y.com/demos/accessibility-of-html-input-types-examples/" target="_blank">DigitalA11y project: </a>Live examples of accessible inputs with different types.</li><li><a href="https://a11y-style-guide.com/style-guide/section-forms.html#kssref-forms-checkboxes" target="_blank">A11y style guide: </a>Gives core recommendations for the accessible checkboxes.</li></ul><h3>Other recommendations</h3>',6)),n("p",q,[e[1]||(e[1]=h("Explore additional accessibility tips in the general ")),n("a",{href:`${t.CHI_URL}/foundations/accessibility/links-and-forms`,target:"_blank"},"Accessibility Guide.",8,C)]),e[4]||(e[4]=l('<h3>WCAG 2.2 Guidelines</h3><ul class="-text"><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content" target="_blank">Non-text Content: </a>All non-text content that is presented to the user has a text alternative that serves the equivalent purpose. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-content-structure-separation-programmatic" target="_blank">Info and Relationships: </a>Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-navigation-mechanisms-descriptive" target="_blank">Headings and Labels: </a>Headings and labels describe topic or purpose. (Level AA)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-minimize-error-cues" target="_blank">Labels or Instructions: </a>Labels or instructions are provided when content requires user input. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-ensure-compat-rsv" target="_blank">Name, Role, Value: </a>For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (Level A) </li></ul>',2))],64)}const O=k(c,[["render",L]]);export{O as default};
