import{_ as u}from"./Dg5y4kC1.js";import{_ as m}from"./BLYaLA6q.js";import{T as s}from"./DhIYcLiR.js";import{e as l,c as b,o as c,m as o,a as t,d as i,j as a,F as f,f as v,w as r,b as n}from"./BnvmtQYM.js";import"./Bk5Nr_bJ.js";import"./CfKaToPi.js";import"./CpGl5nKs.js";import"./8Rn8z3Rm.js";import"./DlAUqK2U.js";import"./Cr4Krhex.js";import"./Zvpnuh4B.js";import"./DD5d-mQ_.js";import"./DKkADrKB.js";import"./D0qO3s5y.js";const g={class:"-text"},w=["href"],y={class:"-text"},_=["href"],x=l({__name:"_accessibility",setup(d){return(h,e)=>(c(),b(f,null,[e[2]||(e[2]=o('<h2>Accessibility</h2><h3>Keyboard Navigation</h3><table class="chi-table"><thead><tr><th>Key</th><th>Function</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>Moves focus to the next focusable element.</td></tr><tr><td><code>Shift + Tab</code></td><td>Moves focus to the previous focusable element.</td></tr><tr><td><code>Space</code>,<code>Down Arrow</code></td><td>When focus is on the trigger, opens the dropdown.</td></tr><tr><td><code>Up Arrow</code>,<code>Down Arrow</code></td><td>Moves focus between the options in the dropdown. If focus is on the last/first option, moves focus to the first/last option respectively.</td></tr><tr><td><code>Space</code>,<code>Enter</code></td><td>Selects the option and closes the dropdown.</td></tr><tr><td><code>Esc</code></td><td>Closes the dropdown and returns focus to the trigger.</td></tr></tbody></table>',3)),t("p",g,[e[0]||(e[0]=i("For comprehensive details on keyboard support, refer to our ")),t("a",{href:`${a(s)}/foundations/accessibility/using-keyboard/`,target:"_blank"},"Keyboard Control Guide.",8,w)]),e[3]||(e[3]=o('<p class="-text">Visit <a href="https://webaim.org/techniques/keyboard/" target="_blank">WebAIM</a> for keyboard techniques.</p><div class="chi-grid"><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for developers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Utilize the <code>select</code> and <code>option</code> elements to ensure proper structure and automatic accessibility features.</li><li>Use <code>label</code> elements to provide descriptive labels for each select component. Ensure the <code>for</code> attribute of the label matches the <code>id</code> of the select box to support screen readers.</li><li>Use appropriate ARIA roles and attributes to enhance accessibility. For example, <code>role=&quot;listbox&quot;</code> for the select element and <code>role=&quot;option&quot;</code> for each option.</li><li>Error Handling and Feedback: Provide clear and immediate feedback for actions such as selection errors. Use ARIA live regions to announce updates or errors dynamically.</li><li>Test compatibility with various screen readers (like JAWS, NVDA, or VoiceOver) to ensure the select component is announced correctly. Options should be clearly read out when navigated.</li><li>Implement visible focus styles to help keyboard users determine which element has focus.</li></ul></div></div></div></div><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for designers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Ensure high contrast between text and background colors to aid users with visual impairments. The Web Content Accessibility Guidelines (WCAG) recommend a contrast ratio of at least 4.5:1 for normal text.</li><li>Design clear, concise labels that are visually connected to their respective select components. Include additional instructional text if the component requires specific interaction methods or behaves uniquely.</li><li>Design clear and distinct styles for error states. Use icons, text styles, and colors to highlight errors related to select components.</li><li>Focus Indicators: Design noticeable focus indicators for active components. These can include changes in border color, an outline, or shadow effects that distinctly mark the focused element.</li><li>Use spacing, typography, and visual cues effectively.</li><li>Maintain consistency in the design of the select to provide a cohesive user experience.</li></ul></div></div></div></div></div><p class="-text">Find live examples in the <a href="https://a11y-style-guide.com/style-guide/section-forms.html#kssref-forms-select-lists" target="_blank">A11y style guide</a>.</p><h3>Roles and attributes</h3><p class="-text">The following list provides essential roles and attributes you should consider to ensure our components are fully accessible across various interface scenarios.</p><table class="chi-table"><thead><tr><th class="-pr--6">Attribute</th><th>Element</th><th>Usage</th></tr></thead><tbody><tr><td><code>aria-label</code></td><td><code>div</code></td><td>Defines a string value that labels an interactive element. It is required props for select without text content.</td></tr></tbody></table><h3>Resources</h3><ul class="-text"><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select" target="_blank">Mozilla Resources for Developers:</a> Information about the HTML select element.</li><li><a href="https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/" target="_blank">W3 Single-select Combobox:</a> Single-select combobox widget that is functionally similar to an HTML <code>select</code> element.</li><li><a href="https://www.magentaa11y.com/checklist-web/select/" target="_blank">MagentaA11y:</a> How to test the select element.</li></ul><h3>Other recommendations</h3>',9)),t("p",y,[e[1]||(e[1]=i("Explore additional accessibility tips in the general ")),t("a",{href:`${a(s)}/foundations/accessibility/overview`,target:"_blank"},"Accessibility Guide.",8,_)]),e[4]||(e[4]=o('<h3>WCAG 2.2 Guidelines</h3><ul class="-text"><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content" target="_blank">Non-text Content:</a> All non-text content that is presented to the user has a text alternative that serves the equivalent purpose. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-content-structure-separation-programmatic" target="_blank">Info and Relationships:</a> Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-navigation-mechanisms-descriptive" target="_blank">Headings and Labels:</a> Headings and labels describe topic or purpose. (Level AA)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-minimize-error-cues" target="_blank">Labels or Instructions:</a> Labels or instructions are provided when content requires user input. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-ensure-compat-rsv" target="_blank">Name, Role, Value:</a> For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (Level A)</li></ul>',2))],64))}}),D=l({__name:"index",setup(d){return(h,e)=>{const p=u;return c(),v(p,{"hide-builder":"",title:"Select",description:"Selects are used to select a single item in a list of many options."},{examples:r(()=>[n(m)]),accessibility:r(()=>[n(x)]),_:1})}}});export{D as default};
