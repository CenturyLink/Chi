import{_ as h}from"./onyWiYp2.js";import{_ as w}from"./CAQzZ0uH.js";import{e as f,o as l,c,b as m,w as a,a as e,d as o,F as x,i as _,n as b}from"./CEIPSiTs.js";const g={class:"chi-grid -mb--2 -show--example"},B=f({__name:"_mixing-sizes-automatic",setup(v){const n=[" -w--2",""," -w--2"],d=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],r=()=>`<div class="chi-grid">
${n.map(s=>`  <div class="chi-col${s}"></div>`).join(`
`)}
</div>`;return(s,t)=>{const u=h,p=w;return l(),c("div",null,[m(p,{title:"Mixing Column Sizes w/Automatic Layout",id:"mixing-column-sizes-w-automatic-layout",tabs:d,showSnippetTabs:!1,padding:"-p--0",additionalStyle:"border: none;"},{"example-description":a(()=>t[0]||(t[0]=[e("p",{class:"-text"},[o("When specifying a column size, it is often not necessary to assign an explicit size to each column. In the case above, we could have easily omitted the "),e("code",null,"-w--9"),o(" size class from the second column and the layout would remain the same."),e("br"),e("br"),o("For example, if we wanted to create a layout with 3 columns where the left and right columns are fixed in width and the middle column is flexible based on the amount of available space, we would end up with the following:")],-1)])),example:a(()=>[e("div",g,[(l(),c(x,null,_(n,i=>e("div",{class:b(["chi-col",i]),key:i},null,2)),64))])]),"code-htmlblueprint":a(()=>[m(u,{class:"html",lang:"html",code:r()},null,8,["code"])]),_:1}),t[1]||(t[1]=e("p",{class:"-text"},"Any columns that do not have an explicit size class associated with them will simply consume an equal amount of the leftover avaible space.",-1))])}}});export{B as _};
