import{_ as f}from"./BFs8JJxv.js";import{_ as b}from"./DV2QheUB.js";import{v as _}from"./BJyIdfGS.js";import{e as d,o as p,c as h,b as o,a as c,k as r,f as w,w as g,j as v,n as $,t as k,F as T,d as x,p as C}from"./6XaUQmon.js";import{_ as z}from"./jyPcLEqD.js";import{_ as y}from"./DpVkMKUP.js";const B=d({__name:"_width",setup(u){const a=["auto","*"],m=["sm","md","lg","xl"],i=a.map(t=>({class:`<code>-w--${t}</code>`,value:t==="*"?"can be incremented by 5%":`<code>width: ${t};</code>`})),l=m.map(t=>a.map(e=>({class:`<code>-w-${t}--${e}</code>`,value:`Visible only from <code>${t}</code>${e==="*"?", can be incremented by 5%":""}`}))).flat();return(t,e)=>{const s=f,n=b;return p(),h("div",null,[o(s,{title:"Width",id:"width","title-size":"h2"}),o(s,{title:"Target all breakpoints",id:"target-all-breakpoints"}),e[0]||(e[0]=c("p",{class:"-text"},"Sizing utility classes with no breakpoint defined apply to all screen sizes.",-1)),o(n,{data:r(i),columns:r(_)},null,8,["data","columns"]),o(s,{title:"Target specific breakpoints",id:"target-specific-breakpoints"}),e[1]||(e[1]=c("p",{class:"-text"},"To target a specific breakpoint, add the breakpoint abbreviation to the class.",-1)),o(n,{data:r(l),columns:r(_)},null,8,["data","columns"])])}}}),S={class:"-show--example"},H=d({__name:"_width-examples",setup(u){const a=[{comment:"width auto on all breakpoints",value:"-auto"},{comment:"width 25% on all breakpoints",value:"-25"},{comment:"width 50% on all breakpoints",value:"-50"},{comment:"width 75% from md",value:"md--75"},{comment:"width 50% from xl",value:"xl--50"}],i={htmlblueprint:a.map(({comment:l,value:t})=>`<!-- ${l} -->
<div class="-w-${t}"></div>`).join(`
`)};return(l,t)=>{const e=z,s=y;return p(),w(s,{title:"Examples",id:"width-examples","title-size":"h2",showSnippetTabs:!1},{example:g(()=>[c("div",S,[(p(),h(T,null,v(a,({value:n})=>c("div",{class:$(["-text -p--3 -m--1",`-w-${n}`])},"-w-"+k(n),3)),64))])]),"code-htmlblueprint":g(()=>[o(e,{class:"html",lang:"html",code:i.htmlblueprint},null,8,["code"])]),_:1})}}}),R=d({__name:"_height",setup(u){const a=["auto","25","50","75","100"],m=["sm","md","lg","xl"],i=a.map(t=>({class:`<code>-h--${t}</code>`,value:`<code>height: ${t}${t!=="auto"?"%":""};</code>`})),l=m.map(t=>a.map(e=>({class:`<code>-h-${t}--${e}</code>`,value:`Visible only from <code>${t}</code>`}))).flat();return(t,e)=>{const s=f,n=b;return p(),h("div",null,[o(s,{title:"Height",id:"height","title-size":"h2"}),o(s,{title:"Target all breakpoints",id:"target-all-breakpoints-1"}),e[0]||(e[0]=c("p",{class:"-text"},"Sizing utility classes with no breakpoint defined apply to all screen sizes.",-1)),o(n,{data:r(i),columns:r(_)},null,8,["data","columns"]),o(s,{title:"Target specific breakpoints",id:"target-specific-breakpoints-1"}),e[1]||(e[1]=c("p",{class:"-text"},"To target a specific breakpoint, add the breakpoint abbreviation to the class.",-1)),o(n,{data:r(l),columns:r(_)},null,8,["data","columns"])])}}}),V={class:"-d--flex -flex--row -justify-content--around -show--example",style:{height:"500px"}},E=d({__name:"_height-examples",setup(u){const a=[{comment:"height auto on all breakpoints",value:"-auto"},{comment:"height 25% on all breakpoints",value:"-25"},{comment:"height 50% on all breakpoints",value:"-50"},{comment:"height 75% from md",value:"md--75"},{comment:"height 50% from xl",value:"xl--50"},{comment:"height 25% from lg",value:"lg--25"}],i={htmlblueprint:a.map(({comment:l,value:t})=>`<!-- ${l} -->
<div class="-h-${t}"></div>`).join(`
`)};return(l,t)=>{const e=z,s=y;return p(),w(s,{title:"Examples",id:"height-examples","title-size":"h2",showSnippetTabs:!1},{example:g(()=>[c("div",V,[(p(),h(T,null,v(a,n=>c("div",{class:$(["-text -p--5 -m--1",`-h-${n.value}`])},"-h-"+k(n.value),3)),64))])]),"code-htmlblueprint":g(()=>[o(e,{class:"html",lang:"html",code:i.htmlblueprint},null,8,["code"])]),_:1})}}}),N=d({__name:"_maximum-width-height",setup(u){const a=["100","480","640","720","960","980","1200"],m=["100","400","480"],i=(t,e,s)=>t.map(n=>({class:`<code>-m${s}--${n}</code>`,value:`<code>max-${e}: ${n}${n==="100"?"%":"px"};</code>`})),l=[...i(a,"width","w"),...i(m,"height","h")];return(t,e)=>{const s=f,n=b;return p(),h("div",null,[o(s,{title:"Maximum width/height",id:"maximum-width-height"}),e[0]||(e[0]=c("p",{class:"-text"},[x("Using the format "),c("code",null,"-mw--{value}"),x(" for max-width and "),c("code",null,"-mh--{value}"),x(" for max-height")],-1)),o(n,{data:l,columns:r(_)},null,8,["columns"])])}}}),j={class:"chi-grid__container -pt--3"},W=d({__name:"index",setup(u){return(a,m)=>{const i=f;return p(),h("div",j,[o(i,{title:"Notation",id:"notation","title-size":"h2"}),m[0]||(m[0]=C('<p class="-text">Sizing utility classes can be defined using the format <code>-w-{breakpoint}--{value}</code> for widths and <code>-h-{breakpoint}--{value}</code> for heights. Breakpoints supported are <code>sm</code>, <code>md</code>, <code>lg</code>, and <code>xl</code>.</p>',1)),o(B),o(H),o(R),o(E),o(N)])}}});export{W as _};
