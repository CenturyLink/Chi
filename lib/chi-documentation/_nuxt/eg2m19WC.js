import{_ as s}from"./BJfyOiY6.js";import{_ as a}from"./onyWiYp2.js";import{e as i,o as p,c as u,b as t,a as o,F as d}from"./CEIPSiTs.js";const _=i({__name:"_properties",setup(c){const r={htmlblueprint:"@Prop({ reflect: true }) color: string;",htmlblueprint1:"@Prop({ mutable: true}) color: string;",htmlblueprint2:"@Prop() bordered: boolean = false;",htmlblueprint3:`@Watch('name')
  validateName(newValue: string, oldValue: string) {
    const isBlank = typeof newValue == null;
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (isBlank) { throw new Error('name: required') };
    if (!has2chars ) { throw new Error('name: has2chars') };
  }`};return(m,e)=>{const l=s,n=a;return p(),u(d,null,[t(l,{title:"Properties",id:"properties",titleSize:"h3"}),e[0]||(e[0]=o("p",{class:"-text"},"It is considered a good practice and SHOULD be configured to Reflect public properties to attributes.",-1)),t(n,{id:"reflect",code:r.htmlblueprint},null,8,["code"]),e[1]||(e[1]=o("p",{class:"-text"},"Properties SHOULDN'T be configured as mutable and, once a value is set by a user, the component should not update it internally. Use it only if strictly necessary.",-1)),t(n,{id:"mutable",code:r.htmlblueprint1},null,8,["code"]),e[2]||(e[2]=o("p",{class:"-text"},"Properties SHOULD have a default value and MUST be validated.",-1)),e[3]||(e[3]=o("p",{class:"-text"},"Sometimes it is enough validation the use of a definition type:",-1)),t(n,{id:"bordered",code:r.htmlblueprint2},null,8,["code"]),e[4]||(e[4]=o("p",{class:"-text"},"Other times a function with a @Watch decorator is necessary:",-1)),t(n,{id:"validate-name",code:r.htmlblueprint3},null,8,["code"])],64)}}});export{_};
