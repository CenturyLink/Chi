import{_ as p}from"./GMWfc-pl.js";import{_ as x}from"./tYJG4N2n.js";import{e as n,c as f,o as d,F as u,b as a,a as s,f as h,w as b,m as g}from"./CmP53kv-.js";import{_ as k}from"./C_gFFCTR.js";import{_ as v}from"./CmWk2xIH.js";const y=n({__name:"_specific-breakpoints",setup(r){const c=[{title:"Flex-basis Class",key:"cell1",width:"40%"},{title:"Value",key:"cell2",width:""}],l=["auto","0","*"],o=["sm","md","lg","xl"],e=()=>o.map(i=>l.map(t=>({cell1:`<code>-flex-basis-${i}--${t}</code>`,cell2:`Visible only from <code>${i}</code>${t==="*"?", can be incremented by 5%":""}`}))).flat();return(i,t)=>{const m=p,_=x;return d(),f(u,null,[a(m,{title:"Target specific breakpoints",id:"basis-specific-breakpoints","title-size":"h4"}),t[0]||(t[0]=s("p",{class:"-text"},"To target a specific breakpoint, add the breakpoint abbreviation to the class.",-1)),a(_,{data:e(),columns:c,"additional-classes":"-bordered"},null,8,["data"])],64)}}}),$=n({__name:"_all-breakpoints",setup(r){const c=[{title:"Flex-basis Class",key:"cell1",width:"40%"},{title:"Value",key:"cell2",width:""}],l=["auto","0","*"],o=()=>l.map(e=>({cell1:`<code>-flex-basis--${e}</code>`,cell2:e==="*"?"can be incremented by 5%":`<code>flex-basis: ${e};</code>`}));return(e,i)=>{const t=p,m=x;return d(),f("div",null,[a(t,{title:"Target all breakpoints",id:"basis-all-breakpoints","title-size":"h4"}),i[0]||(i[0]=s("p",{class:"-text"},"Flex-basis utility classes with no breakpoint defined apply to all screen sizes.",-1)),a(m,{data:o(),columns:c,"additional-classes":"-bordered"},null,8,["data"])])}}}),w=n({__name:"_examples",setup(r){const c=[{comment:"<!-- flex-basis 25% on all breakpoints -->",classSuffix:"-25"},{comment:"<!-- flex-basis 50% on all breakpoints -->",classSuffix:"-50"},{comment:"<!-- flex-basis 75% from md -->",classSuffix:"md--75"},{comment:"<!-- flex-basis 50% from xl -->",classSuffix:"xl--50"}],l=()=>c.map(({comment:o,classSuffix:e})=>`${o}
<div class="-d--flex">
  <div class="-flex-basis-${e}"></div>
</div>`).join(`
`);return(o,e)=>{const i=k,t=v;return d(),h(t,{title:"Examples",id:"basis-examples","title-size":"h4",padding:"-p--0",showSnippetTabs:!1},{example:b(()=>e[0]||(e[0]=[s("div",{class:"-p--3"},[s("div",{class:"-mb--2 -d--flex -show--example -bg--grey-10"},[s("div",{class:"-text -p--2 -flex-basis--25"},"-flex-basis--25")]),s("div",{class:"-mb--2 -d--flex -show--example -bg--grey-10"},[s("div",{class:"-text -p--2 -flex-basis--50"},"-flex-basis--50")]),s("div",{class:"-mb--2 -d--flex -show--example -bg--grey-10"},[s("div",{class:"-text -p--2 -flex-basis-md--75"},"-flex-basis-md--75")]),s("div",{class:"-d--flex -show--example -bg--grey-10"},[s("div",{class:"-text -p--2 -flex-basis-xl--50"},"-flex-basis-xl--50")])],-1)])),"code-htmlblueprint":b(()=>[a(i,{class:"html",lang:"html",code:l()},null,8,["code"])]),_:1})}}}),V=n({__name:"index",setup(r){return(c,l)=>{const o=p;return d(),f("div",null,[a(o,{title:"Basis",id:"basis"}),l[0]||(l[0]=g('<p class="-text">Use the <code>-flex--basis*</code> class to specify the initial size of the flex item, before any available space is distributed according to the flex factors.</p><p class="-text">Flex-basis utility classes can be defined using the format <code>-flex-basis-{breakpoint}--{value}</code>. Breakpoints supported are <code>sm</code>, <code>md</code>, <code>lg</code>, and <code>xl</code>.</p>',2)),a($),a(y),a(w)])}}});export{V as _};
