import{_ as h}from"./4a9mslvX.js";import{_ as m}from"./ChDtGN5Z.js";import{T as s}from"./DmOWWIWS.js";import{e as l,c as v,o as c,m as i,a as t,d as a,j as n,F as g,f,w as o,b as r}from"./-E9oTzhC.js";import"./DJZW7nqp.js";import"./zoIYZcmM.js";import"./B5KlrkA7.js";import"./CXpDRGsh.js";import"./DlAUqK2U.js";import"./LNeokCJg.js";import"./rD-gEhvI.js";import"./B1-AdL93.js";const b={class:"-text"},_=["href"],w={class:"-text"},A=["href"],y=l({__name:"_accessibility",setup(d){return(u,e)=>(c(),v(g,null,[e[2]||(e[2]=i('<h2>Accessibility</h2><h3>Keyboard Navigation</h3><table class="chi-table"><thead><tr><th>Key</th><th>Function</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>Moves focus to the next element in the tab sequence. The spinner itself should not receive focus.</td></tr><tr><td><code>Shift + Tab</code></td><td>Moves focus to the previous focusable element. The spinner should not disrupt navigation.</td></tr><tr><td><code>Esc</code></td><td>If the spinner is inside a modal or dialog, pressing Esc should close the container if applicable.</td></tr></tbody></table>',3)),t("p",b,[e[0]||(e[0]=a("For detailed keyboard interactions, refer to our ")),t("a",{href:`${n(s)}/foundations/accessibility/using-keyboard/`,target:"_blank"},"Keyboard Control Guide.",8,_)]),e[3]||(e[3]=i('<p class="-text">Visit <a href="https://webaim.org/techniques/keyboard/" target="_blank">WebAIM</a> for general keyboard techniques.</p><div class="chi-grid"><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for developers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Avoid focus on the spinner itself and provide meaningful feedback to screen reader users.</li><li>Use <code>aria-hidden=&quot;true&quot;</code> if the spinner is purely decorative.</li><li>Announce dynamic changes using <code>aria-live</code> regions to communicate status updates.</li><li>If a spinner represents an indefinite loading state, use <code>role=&quot;status&quot;</code> with an associated message.</li><li>Use <code>aria-live=&quot;polite&quot;</code> or <code>aria-busy=&quot;true&quot;</code> to announce loading state changes to assistive technologies.</li><li>Some users may experience motion sensitivity. Avoid rapid, flashing, or distracting animations.</li><li>Provide an option to pause, slow down, or disable spinner animations for users sensitive to motion.</li><li>Adhere to WCAG guidelines by ensuring animation lasts less than five seconds or can be controlled by the user.</li></ul></div></div></div></div><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for designers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Maintain sufficient contrast between the spinner and the background.</li><li>Provide alternative indicators of loading, such as textual cues or progress bars, when applicable.</li><li>Keep spinner animations subtle and non-intrusive to avoid distractions.</li><li>Ensure the spinner scales appropriately across different screen sizes and devices.</li></ul></div></div></div></div></div><p class="-text"> Explore live examples in the <a href="https://www.w3.org/WAI/ARIA/apg/patterns/" target="_blank">ARIA Practices Guide</a>. </p><h3>Resources</h3><ul class="-text"><li><a href="https://www.w3.org/WAI/WCAG21/quickref/#animation-from-interactions" target="_blank">WCAG 2.2 Animation Guidelines:</a> Recommendations for reducing animation effects for users with vestibular disorders.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions" target="_blank">MDN Guide on ARIA Live Regions:</a> Explains how to communicate dynamic changes to assistive technologies.</li></ul><h3>Other recommendations</h3>',6)),t("p",w,[e[1]||(e[1]=a("Find additional accessibility tips in our ")),t("a",{href:`${n(s)}/foundations/accessibility/overview`,target:"_blank"},"Accessibility Guide.",8,A)]),e[4]||(e[4]=i('<h3>WCAG 2.2 Guidelines</h3><ul class="-text"><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content" target="_blank">Non-text Content: </a>All non-text content that is presented to the user has a text alternative that serves the equivalent purpose. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-content-structure-separation-programmatic" target="_blank">Info and Relationships: </a>Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-navigation-mechanisms-descriptive" target="_blank">Headings and Labels: </a>Headings and labels describe topic or purpose. (Level AA)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-minimize-error-cues" target="_blank">Labels or Instructions: </a>Labels or instructions are provided when content requires user input. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-ensure-compat-rsv" target="_blank">Name, Role, Value: </a>For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (Level A) </li></ul>',2))],64))}}),F=l({__name:"index",setup(d){return(u,e)=>{const p=h;return c(),f(p,{"hide-builder":"",title:"Spinner",description:"Spinners are animated circles that let users know when information is saving or loading.","properties-tag":"chi-spinner"},{examples:o(()=>[r(m)]),accessibility:o(()=>[r(y)]),_:1})}}});export{F as default};
