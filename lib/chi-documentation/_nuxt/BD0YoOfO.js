import{_ as x}from"./Bxs95XXX.js";import{_ as v}from"./-KoY3-nf.js";import{l as b}from"./BYS4_xFx.js";import{e as h,o as c,c as d,b as o,a as m,k as p,f as $,w as g,i as k,n as T,t as S,F as w,l as C,d as f,q as B}from"./CRBsHPO5.js";import{_ as y}from"./Di-ELn2D.js";import{_ as z}from"./Cx7J_iiN.js";const H=h({__name:"_width",setup(_){const l=["auto","*"],s=["sm","md","lg","xl"],i=l.map(e=>({class:`<code>-w--${e}</code>`,value:e==="*"?"can be incremented by 5%":`<code>width: ${e};</code>`})),r=s.map(e=>l.map(t=>({class:`<code>-w-${e}--${t}</code>`,value:`Visible only from <code>${e}</code>${t==="*"?", can be incremented by 5%":""}`}))).flat();return(e,t)=>{const n=x,a=v;return c(),d("div",null,[o(n,{title:"Width",id:"width",titleSize:"h2"}),o(n,{title:"Target all breakpoints",id:"target-all-breakpoints"}),t[0]||(t[0]=m("p",{class:"-text"},"Sizing utility classes with no breakpoint defined apply to all screen sizes.",-1)),o(a,{data:p(i),columns:p(b)},null,8,["data","columns"]),o(n,{title:"Target specific breakpoints",id:"target-specific-breakpoints"}),t[1]||(t[1]=m("p",{class:"-text"},"To target a specific breakpoint, add the breakpoint abbreviation to the class.",-1)),o(a,{data:p(r),columns:p(b)},null,8,["data","columns"])])}}}),V={class:"-show--example"},N=h({__name:"_width-examples",setup(_){const l=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],s=[{comment:"width auto on all breakpoints",value:"-auto"},{comment:"width 25% on all breakpoints",value:"-25"},{comment:"width 50% on all breakpoints",value:"-50"},{comment:"width 75% from md",value:"md--75"},{comment:"width 50% from xl",value:"xl--50"}],r={htmlblueprint:s.map(({comment:e,value:t})=>`<!-- ${e} -->
<div class="-w-${t}"></div>`).join(`
`)};return(e,t)=>{const n=y,a=z;return c(),$(a,{title:"Examples",id:"width-examples",tabs:l,titleSize:"h2",showSnippetTabs:!1},{example:g(()=>[m("div",V,[(c(),d(w,null,k(s,({value:u})=>m("div",{class:T(["-text -p--3 -m--1",`-w-${u}`])},"-w-"+S(u),3)),64))])]),"code-htmlblueprint":g(()=>[o(n,{class:"html",lang:"html",code:r.htmlblueprint},null,8,["code"])]),_:1})}}}),R=h({__name:"_height",setup(_){const l=["auto","25","50","75","100"],s=["sm","md","lg","xl"],i=l.map(e=>({class:`<code>-h--${e}</code>`,value:`<code>height: ${e}${e!=="auto"?"%":""};</code>`})),r=s.map(e=>l.map(t=>({class:`<code>-h-${e}--${t}</code>`,value:`Visible only from <code>${e}</code>`}))).flat();return(e,t)=>{const n=x,a=v;return c(),d("div",null,[o(n,{title:"Height",id:"height",titleSize:"h2"}),o(n,{title:"Target all breakpoints",id:"target-all-breakpoints-1"}),t[0]||(t[0]=m("p",{class:"-text"},"Sizing utility classes with no breakpoint defined apply to all screen sizes.",-1)),o(a,{data:p(i),columns:p(b)},null,8,["data","columns"]),o(n,{title:"Target specific breakpoints",id:"target-specific-breakpoints-1"}),t[1]||(t[1]=m("p",{class:"-text"},"To target a specific breakpoint, add the breakpoint abbreviation to the class.",-1)),o(a,{data:p(r),columns:p(b)},null,8,["data","columns"])])}}}),E={class:"-d--flex -flex--row -justify-content--around -show--example",style:{height:"500px"}},A=h({__name:"_height-examples",setup(_){const l=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],s=[{comment:"height auto on all breakpoints",value:"-auto"},{comment:"height 25% on all breakpoints",value:"-25"},{comment:"height 50% on all breakpoints",value:"-50"},{comment:"height 75% from md",value:"md--75"},{comment:"height 50% from xl",value:"xl--50"},{comment:"height 25% from lg",value:"lg--25"}],r={htmlblueprint:s.map(({comment:e,value:t})=>`<!-- ${e} -->
<div class="-h-${t}"></div>`).join(`
`)};return(e,t)=>{const n=y,a=z;return c(),$(a,{title:"Examples",id:"height-examples",tabs:l,titleSize:"h2",showSnippetTabs:!1},{example:g(()=>[m("div",E,[(c(),d(w,null,k(s,u=>(c(),d(w,null,[u.value!=="-auto"?(c(),d("div",{key:0,class:T(["-text -p--5 -m--1",`-h-${u.value}`])},"-h-"+S(u.value),3)):C("",!0)],64))),64))])]),"code-htmlblueprint":g(()=>[o(n,{class:"html",lang:"html",code:r.htmlblueprint},null,8,["code"])]),_:1})}}}),j=h({__name:"_maximum-width-height",setup(_){const l=["100","480","640","720","960","980","1200"],s=["100","400","480"],i=(e,t,n)=>e.map(a=>({class:`<code>-m${n}--${a}</code>`,value:`<code>max-${t}: ${a}${a==="100"?"%":"px"};</code>`})),r=[...i(l,"width","w"),...i(s,"height","h")];return(e,t)=>{const n=x,a=v;return c(),d("div",null,[o(n,{title:"Maximum width/height",id:"maximum-width-height"}),t[0]||(t[0]=m("p",{class:"-text"},[f("Using the format "),m("code",null,"-mw--{value}"),f(" for max-width and "),m("code",null,"-mh--{value}"),f(" for max-height")],-1)),o(a,{data:r,columns:p(b)},null,8,["columns"])])}}}),L={class:"chi-grid__container -pt--3"},G=h({__name:"index",setup(_){return(l,s)=>{const i=x;return c(),d("div",L,[o(i,{title:"Notation",id:"notation",titleSize:"h2"}),s[0]||(s[0]=B('<p class="-text">Sizing utility classes can be defined using the format <code>-w-{breakpoint}--{value}</code> for widths and <code>-h-{breakpoint}--{value}</code> for heights. Breakpoints supported are <code>sm</code>, <code>md</code>, <code>lg</code>, and <code>xl</code>.</p>',1)),o(H),o(N),o(R),o(A),o(j)])}}});export{G as _};
