var h=Object.defineProperty;var p=(t,e,i)=>e in t?h(t,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[e]=i;var d=(t,e,i)=>p(t,typeof e!="symbol"?e+"":e,i);import{V as m,N as b}from"./NAah3XrW.js";import{T as f}from"./DtNz156Q.js";import{o as v,c as g,a4 as n,a as o,d as u,F as y}from"./CEIPSiTs.js";import{_ as w}from"./DlAUqK2U.js";var _=Object.defineProperty,x=Object.getOwnPropertyDescriptor,k=(t,e,i,a)=>{for(var s=a>1?void 0:a?x(e,i):e,r=t.length-1,l;r>=0;r--)(l=t[r])&&(s=(a?l(e,i,s):l(s))||s);return a&&s&&_(e,i,s),s};let c=class extends m{constructor(){super(...arguments);d(this,"CHI_URL",f)}};c=k([b({})],c);const A={class:"-text"},q=["href"],L={class:"-text"},I=["href"];function C(t,e,i,a,s,r){return v(),g(y,null,[e[2]||(e[2]=n('<h2>Accessibility</h2><h3>Keyboard Navigation</h3><table class="chi-table"><thead><tr><th>Key</th><th>Function</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>Moves focus to the next focusable element. </td></tr><tr><td><code>Shift + Tab</code></td><td>Moves focus to the previous focusable element. </td></tr><tr><td><code>Enter</code>,<code>Space</code></td><td>Submits the entered value.</td></tr></tbody></table>',3)),o("p",A,[e[0]||(e[0]=u("For comprehensive details on keyboard support, refer to our ")),o("a",{href:`${t.CHI_URL}/foundations/accessibility/using-keyboard/`,target:"_blank"},"Keyboard Control Guide.",8,q)]),e[3]||(e[3]=n('<p class="-text">Visit <a href="https://webaim.org/techniques/keyboard/" target="_blank">WebAIM</a> for keyboard techniques.</p><div class="chi-grid"><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for developers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Ensure simplicity since not all browsers handle multiple labels linked to the same form element correctly.</li><li>Label Usage: Assign a label to each input field and make sure the <code>for=&quot;&quot;</code> attribute of the label matches the <code>id=&quot;&quot;</code> of the corresponding input. Remember, each id must be unique on the page, and each form element should have only one associated label.</li><li>Indicating Required Fields: Clearly mark required fields using indicators like an asterisk (*) or descriptive text to make them easily identifiable.</li><li>Help Text: Incorporate help text for all form fields, especially those with constraints. This text should be programmatically associated with the input, for example, using <code>aria-describedby</code>. This is particularly important for masked fields.</li><li>Test compatibility with various screen readers (like JAWS, NVDA, or VoiceOver) to ensure the phone input component is announced correctly. Options should be clearly read out when navigated.</li><li>Error Validation: Fields with validation errors should use <code>aria-describedby</code> to ensure that error messages are accessible to assistive technologies. If an error message has an <code>id=&quot;my-error-message&quot;</code>, the corresponding input should include <code>aria-describedby=&quot;my-error-message&quot;</code></li></ul></div></div></div></div><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for designers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Design with simplicity to accommodate all browsers, minimizing complexities that could hinder accessibility.</li><li>Obvious Required Fields: Use visual cues, such as an asterisk (*) or supplementary text, to clearly mark required fields and make them easily distinguishable.</li><li>User-Friendly Help Text: Place help text or examples directly below or inside the phone input field to guide users on the correct format.</li><li>Visible Error Feedback: Design error messages to appear clearly near the phone input field when validation fails, using color, icons, or text to make them noticeable.</li><li>Sufficient Tap Targets: Ensure phone input fields have large enough tap targets to accommodate users with different levels of dexterity, following touch-friendly design principles.</li><li>Use spacing, typography, and visual cues effectively.</li><li>Maintain consistency in the design of the phone input to provide a cohesive user experience.</li></ul></div></div></div></div></div><p class="-text"> Find live examples of accessible inputs with different types in <a href="https://www.digitala11y.com/demos/accessibility-of-html-input-types-examples/" target="_blank">DigitalA11y project.</a></p><h3>Resources</h3><ul class="-text"><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/tel" target="_blank">Mozilla Resources for Developers: </a>Information about the HTML <code>input-type=&quot;tel&quot;</code></li><li><a href="https://a11y-style-guide.com/style-guide/section-forms.html#kssref-forms-text-fields" target="_blank">A11y style guide: </a>Describes core principles for the accessible inputs and textarea.</li><li><a href="https://www.magentaa11y.com/checklist-web/number-input/" target="_blank">MagentaA11y: </a>How to test a number input.</li></ul><h3>Other recommendations</h3>',6)),o("p",L,[e[1]||(e[1]=u("Explore additional accessibility tips in the general ")),o("a",{href:`${t.CHI_URL}/foundations/accessibility/overview`,target:"_blank"},"Accessibility Guide.",8,I)]),e[4]||(e[4]=n('<h3>WCAG 2.2 Guidelines</h3><ul class="-text"><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content" target="_blank">Non-text Content: </a>All non-text content that is presented to the user has a text alternative that serves the equivalent purpose. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-content-structure-separation-programmatic" target="_blank">Info and Relationships: </a>Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-navigation-mechanisms-descriptive" target="_blank">Headings and Labels: </a>Headings and labels describe topic or purpose. (Level AA)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-minimize-error-cues" target="_blank">Labels or Instructions: </a>Labels or instructions are provided when content requires user input. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-ensure-compat-rsv" target="_blank">Name, Role, Value: </a>For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (Level A) </li></ul>',2))],64)}const R=w(c,[["render",C]]);export{R as default};
