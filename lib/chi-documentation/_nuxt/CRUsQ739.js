import{_ as h}from"./C3oeiXsm.js";import{_ as f}from"./D5focUlt.js";import{_ as b}from"./NNa7qDYN.js";import{o,c as p,a as t,b as s,e as u,q as a,d as l,k as c,F as g,f as v,w as r}from"./CRBsHPO5.js";import{_}from"./DlAUqK2U.js";import{T as d}from"./CioVcaN-.js";import"./CFe54mHR.js";import"./DdXxu9YD.js";import"./CIPiXAF4.js";import"./Di-ELn2D.js";import"./CcrI_bxZ.js";import"./Cx7J_iiN.js";import"./Bxs95XXX.js";import"./Bdokak_-.js";import"./D1M_ALV-.js";import"./Cf-jS4dB.js";function w(n,i){const e=b;return o(),p("div",null,[i[0]||(i[0]=t("h2",null,"Web Component",-1)),s(e,{tag:"chi-textarea"})])}const y={},x=_(y,[["render",w]]),A={class:"-text"},k=["href"],q={class:"-text"},W=["href"],C=u({__name:"_accessibility",setup(n){return(i,e)=>(o(),p(g,null,[e[2]||(e[2]=a('<h2>Accessibility</h2><h3>Keyboard Navigation</h3><table class="chi-table"><thead><tr><th>Key</th><th>Function</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>Moves focus to the next focusable element </td></tr><tr><td><code>Shift + Tab</code></td><td>Moves focus to the previous focusable element </td></tr><tr><td><code>Space</code></td><td>Activates the button </td></tr></tbody></table>',3)),t("p",A,[e[0]||(e[0]=l("For comprehensive details on keyboard support for input fields, refer to our ")),t("a",{href:`${c(d)}/foundations/accessibility/using-keyboard/`,target:"_blank"},"Keyboard Control Guide.",8,k)]),e[3]||(e[3]=a('<p class="-text">Visit <a href="https://webaim.org/techniques/keyboard/" target="_blank">WebAIM</a> for keyboard techniques.</p><div class="chi-grid"><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for developers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Simplify forms for better browser compatibility.</li><li>Use labels for inputs, matching <code>for</code> and <code>id</code> attributes.</li><li>Keep IDs unique and pair each form element with one label.</li><li>Mark required fields clearly (e.g., with an asterisk).</li><li>Use <code>aria-describedby</code> for error message accessibility.</li><li>if there&#39;s an error message tagged with <code>id=&quot;my-error-message&quot;</code>, then the corresponding input must include <code>aria-describedby=&quot;my-error-message&quot;</code></li></ul></div></div></div></div><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for designers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Ensure focus indicators are visible to aid navigation.</li><li>Keep input labels visible, even when fields are focused.</li><li>Use contrasting colors for text and backgrounds to enhance readability.</li><li>Design clear error states and feedback for accessibility.</li><li>Use spacing, typography, and visual cues effectively.</li><li>Maintain consistency in the design of input elements to provide a cohesive user experience.</li></ul></div></div></div></div></div><p class="-text">For hands-on examples, consult the Accessibility <a href="https://a11y-style-guide.com/style-guide/section-forms.html#kssref-forms-text-fields" target="_blank">(A11y) Style Guide.</a></p><h3>Resources</h3><ul class="-text"><li><a href="https://www.w3.org/WAI/ARIA/apgW3C" target="_blank">ARIA Practices: </a>Detailed ARIA guidance for accessible web content, focusing on text inputs.</li><li><a href="https://a11y-style-guide.com/style-guide/" target="_blank">A11y Style Guide: </a>Outlines essential principles for accessible inputs and textareas. </li><li><a href="https://www.w3.org/WAI/tutorials/forms/" target="_blank">W3C Forms Tutorial: </a>Provides guidance on creating accessible forms.</li><li><a href="https://www.digitala11y.com/" target="_blank">DigitalA11y Project: </a>Showcases live examples of accessible inputs of various types.</li></ul><h3>Other recommendations</h3>',6)),t("p",q,[e[1]||(e[1]=l("Explore additional accessibility tips in the general ")),t("a",{href:`${c(d)}/foundations/accessibility/links-and-forms`,target:"_blank"},"Accessibility Guide.",8,W)]),e[4]||(e[4]=a('<h3>WCAG 2.2 Guidelines</h3><ul class="-text"><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content" target="_blank">Non-text Content: </a>All non-text content that is presented to the user has a text alternative that serves the equivalent purpose. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-content-structure-separation-programmatic" target="_blank">Info and Relationships: </a>Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-navigation-mechanisms-descriptive" target="_blank">Headings and Labels: </a>Headings and labels describe topic or purpose. (Level AA)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-minimize-error-cues" target="_blank">Labels or Instructions: </a>Labels or instructions are provided when content requires user input. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-ensure-compat-rsv" target="_blank">Name, Role, Value: </a>For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (Level A) </li></ul>',2))],64))}}),U=u({__name:"index",setup(n){return(i,e)=>{const m=h;return o(),v(m,{title:"Textarea",description:"Textareas are used to input multi-line text data"},{examples:r(()=>[s(f)]),properties:r(()=>[s(x)]),accessibility:r(()=>[s(C)]),_:1})}}});export{U as default};
