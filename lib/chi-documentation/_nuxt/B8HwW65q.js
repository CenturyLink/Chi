import{_ as z}from"./GMWfc-pl.js";import{e as g,c as m,o as n,F as u,b as i,a as e,i as _,t as T,w as a,j as $,f as b,d as v,n as y,m as S}from"./CmP53kv-.js";import{_ as x}from"./C_gFFCTR.js";import{_ as w}from"./CmWk2xIH.js";import{_ as k}from"./DlAUqK2U.js";const L={class:"-mb--3",style:{"overflow-x":"auto"}},H={class:"chi-table -bordered"},B=g({__name:"_breakpoints",setup(h){const t=[{device:"Phone (portrait)",range:"0 - 575",size:"xs",columns:"12",gutters:"16"},{device:"Tablet (portrait)",range:"575 - 767",size:"sm",columns:"12",gutters:"16"},{device:"Tablet (landscape)",range:"768 - 991",size:"md",columns:"12",gutters:"24"},{device:"Laptop/Desktop (small)",range:"992 - 1200",size:"lg",columns:"12",gutters:"24"},{device:"Laptop/Desktop",range:"1200+",size:"xl",columns:"12",gutters:"24"}];return(s,c)=>{const o=z;return n(),m(u,null,[i(o,{title:"Breakpoints",id:"breakpoints"}),e("div",L,[e("table",H,[c[0]||(c[0]=e("thead",null,[e("tr",null,[e("th",null,"Device"),e("th",null,"Breakpoint range (px)"),e("th",null,"Breakpoint size"),e("th",null,"Columns"),e("th",null,"Gutters (px)")])],-1)),e("tbody",null,[(n(),m(u,null,_(t,({device:l,range:d,size:p,columns:r,gutters:f})=>e("tr",null,[e("td",null,T(l),1),e("td",null,T(d),1),e("td",null,[e("code",null,T(p),1)]),e("td",null,T(r),1),e("td",null,T(f),1)])),64))])])])],64)}}}),A={class:"chi-grid -mb--2 -show--example"},M={class:"chi-grid -mb--2 -show--example"},E=g({__name:"_automatic-layout",setup(h){const t=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],s=Array(3).fill("chi-col"),c=Array(5).fill("chi-col"),o=(d,p)=>`${d}
<div class="chi-grid">
${p.map(r=>`  <div class="${r}"></div>`).join(`
`)}
</div>`,l={htmlblueprint3Cols:o("<!-- three columns of equal width -->",s),htmlblueprint5Cols:o("<!-- five columns of equal width -->",c)};return(d,p)=>{const r=x,f=w;return n(),m(u,null,[i(f,{title:"Automatic Layout",id:"automatic-layout",tabs:t,showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0"},{"example-description":a(()=>p[0]||(p[0]=[e("p",{class:"-text"},"Grid layouts are defined as a grid container that is composed of one or more rows of columns. By default, columns within a grid container will occupy an equal amount of horizontal space. Content within those columns is constrained to the width of the column (i.e. the column will not widen to accommodate its contents).",-1)])),example:a(()=>[e("div",A,[(n(!0),m(u,null,_($(s),C=>(n(),m("div",{class:"chi-col",key:C}))),128))])]),"code-htmlblueprint":a(()=>[i(r,{id:"layout-3-cols",code:l.htmlblueprint3Cols,lang:"html"},null,8,["code"])]),_:1}),i(f,{id:"automatic-layout",tabs:t,showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0"},{example:a(()=>[e("div",M,[(n(!0),m(u,null,_($(c),C=>(n(),m("div",{class:"chi-col",key:C}))),128))])]),"code-htmlblueprint":a(()=>[i(r,{id:"layout-5-cols",code:l.htmlblueprint5Cols,lang:"html"},null,8,["code"])]),_:1})],64)}}}),j={class:"-show--example -mb--2"},N={class:"chi-grid -no-gutter -mb--2"},G=g({__name:"_removing-gutters",setup(h){const t=Array(3).fill("chi-col"),s=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],c=()=>`<!-- grid container with collapsed margins -->
<div class="chi-grid -no-gutter">
${t.map(o=>`  <div class="${o}"></div>`).join(`
`)}
</div>`;return(o,l)=>{const d=x,p=w;return n(),b(p,{title:"Removing Gutters",id:"removing-gutters",tabs:s,showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0"},{"example-description":a(()=>l[0]||(l[0]=[e("p",{class:"-text"},[v("Columns are rendered with a consistent amount of spacing between them. To collapse these margins, you may use the "),e("code",null,"-no-gutter"),v(" modifier class on the grid container.")],-1)])),example:a(()=>[e("div",j,[e("div",N,[(n(!0),m(u,null,_($(t),r=>(n(),m("div",{class:"chi-col",key:r}))),128))])])]),"code-htmlblueprint":a(()=>[i(d,{class:"html",lang:"html",code:c()},null,8,["code"])]),_:1})}}});function V(h,t){const s=z;return n(),m(u,null,[i(s,{title:"Customizing Grid Layouts",id:"customizing-grid-layout","title-size":"h2"}),t[0]||(t[0]=e("p",{class:"-text"},"While automatic layout suits many use cases, you will likely need to create more specific and predictable layouts based on your requirements.",-1))],64)}const F={},O=k(F,[["render",V]]),q={class:"chi-grid -show--example -mb--2"},D=g({__name:"_column-sizing",setup(h){const t=["-w--3","-w--9"],s=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],c=()=>`<div class="chi-grid">
${t.map(o=>`  <div class="chi-col ${o}"></div>`).join(`
`)}
</div>`;return(o,l)=>{const d=x,p=w;return n(),m(u,null,[i(p,{title:"Column Sizing",id:"column-sizing",tabs:s,showSnippetTabs:!1,padding:"-p--0","additional-style":"border: none;"},{"example-description":a(()=>l[0]||(l[0]=[e("p",{class:"-text"},[v("You can specify the amount of horizontal space that a column may consume by adding size classes to your column markup. For example, to create a layout with one column taking up 25% of the available space and the second other column taking up 75% of the space, you can add "),e("code",null,"-w--3"),v(" and "),e("code",null,"-w--9"),v(" to your each column, respectively:")],-1)])),example:a(()=>[e("div",q,[(n(),m(u,null,_(t,r=>e("div",{class:y(["chi-col",r]),key:r},null,2)),64))])]),"code-htmlblueprint":a(()=>[i(d,{class:"html",lang:"html",code:c()},null,8,["code"])]),_:1}),l[1]||(l[1]=e("p",{class:"-text"},"Remember that the grid system consists of 12 columns, so each column unit is approximately 8.3% in width. So, to achieve this layout we are using 3 grid column units (1 unit * 3, or 8.3% * 3) to claim 25% of the width for the first column.",-1))],64)}}}),R={class:"chi-grid -mb--2 -show--example"},Y=g({__name:"_mixing-sizes-automatic",setup(h){const t=[" -w--2",""," -w--2"],s=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],c=()=>`<div class="chi-grid">
${t.map(o=>`  <div class="chi-col${o}"></div>`).join(`
`)}
</div>`;return(o,l)=>{const d=x,p=w;return n(),b(p,{title:"Mixing Column Sizes w/Automatic Layout",id:"mixing-column-sizes-w-automatic-layout",tabs:s,showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0"},{"example-description":a(()=>l[0]||(l[0]=[e("p",{class:"-text"},[v("When specifying a column size, it is often not necessary to assign an explicit size to each column. In the case above, we could have easily omitted the "),e("code",null,"-w--9"),v(" size class from the second column and the layout would remain the same.")],-1),e("p",{class:"-text"},"For example, if we wanted to create a layout with 3 columns where the left and right columns are fixed in width and the middle column is flexible based on the amount of available space, we would end up with the following:",-1)])),example:a(()=>[e("div",R,[(n(),m(u,null,_(t,r=>e("div",{class:y(["chi-col",r]),key:r},null,2)),64))])]),"code-htmlblueprint":a(()=>[i(d,{class:"html",lang:"html",code:c()},null,8,["code"]),l[1]||(l[1]=e("p",{class:"-text"},"Any columns that do not have an explicit size class associated with them will simply consume an equal amount of the leftover avaible space.",-1))]),_:1})}}}),I={class:"-show--example chi-grid -mb--3"},W=g({__name:"_available-column-sizes",setup(h){const t=Array.from({length:12},(s,c)=>c+1).reverse();return(s,c)=>{const o=w;return n(),b(o,{title:"Available Column Sizes",id:"available-column-sizes",showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0"},{"example-description":a(()=>c[0]||(c[0]=[e("p",{class:"-text"},[v("The size classes are defined from "),e("code",null,"-w--1"),v(", which takes up ~8.3% of the width to "),e("code",null,"-w--12"),v(", which consumes the entire row.")],-1)])),example:a(()=>[(n(!0),m(u,null,_($(t),l=>(n(),m("div",I,[(n(),m("div",{class:y(["chi-col",`-w--${l}`]),key:l},null,2))]))),256))]),_:1})}}}),X={class:"chi-grid -mb--2 -show--example"},P=g({__name:"_column-wrapping",setup(h){const t=Array(2).fill("chi-col"),s=Array(4).fill("chi-col"),c=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],o=(d,p)=>`${d.map(()=>`  <div class="chi-col -w--${p}"></div>`).join(`
`)}`,l=()=>`<div class="chi-grid">

  <!-- first 12 column units -->
${o(s,"3")}

  <!-- ... and another row consisting of 12 more units -->
${o(t,"6")}

</div>`;return(d,p)=>{const r=x,f=w;return n(),b(f,{title:"Column Wrapping",id:"column-wrapping",tabs:c,showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0"},{"example-description":a(()=>p[0]||(p[0]=[e("p",{class:"-text"},"Grid containers can accommodate any number of columns, however, the grid system is restricted to a maximum of 12 column units per row. Overflowing the 12 column units will automatically wrap additional columns onto a new row. For example, the following layout is the result of having 24 column units in a single container:",-1)])),example:a(()=>[e("div",X,[(n(!0),m(u,null,_($(s),C=>(n(),m("div",{class:"chi-col -w--3",key:C}))),128)),(n(!0),m(u,null,_($(t),C=>(n(),m("div",{class:"chi-col -w--6",key:C}))),128))])]),"code-htmlblueprint":a(()=>[i(r,{class:"html",lang:"html",code:l()},null,8,["code"])]),_:1})}}}),U={class:"chi-grid -mb--2 -show--example"},J=g({__name:"_offset-position-columns",setup(h){const t=["-w--5 -o--1","-w--3 -o--3"],s=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],c=()=>`<div class="chi-grid">
${t.map(o=>`  <div class="chi-col ${o}"></div>`).join(`
`)}
</div>`;return(o,l)=>{const d=x,p=w;return n(),b(p,{title:"Offset Positioning of Columns",id:"offset-position-columns",tabs:s,showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0"},{"example-description":a(()=>l[0]||(l[0]=[e("p",{class:"-text"},"You may position columns with an offset of one or more column units by specifying an offset size class on your column.",-1)])),example:a(()=>[e("div",U,[(n(),m(u,null,_(t,r=>e("div",{class:y(["chi-col",r]),key:r},null,2)),64))])]),"code-htmlblueprint":a(()=>[i(d,{class:"html",lang:"html",code:c()},null,8,["code"])]),_:1})}}}),K={class:"-show--example chi-grid -mb--3"},Q=g({__name:"_available-offset-sizes",setup(h){const t=Array.from({length:11},(s,c)=>c+1);return(s,c)=>{const o=w;return n(),b(o,{title:"Available Offset Sizes",id:"available-offset-sizes",showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0","title-size":"h4"},{"example-description":a(()=>c[0]||(c[0]=[e("p",{class:"-text"},[v("Offset sizes, like column sizes, range from "),e("code",null,"-o--1"),v(", which takes up ~8.3% of the width to "),e("code",null,"-o--11"),v(", which consumes ~91.6% of the row.")],-1)])),example:a(()=>[(n(!0),m(u,null,_($(t),l=>(n(),m("div",K,[(n(),m("div",{class:y(["chi-col",`-o--${l}`]),key:l},null,2))]))),256))]),_:1})}}}),Z={class:"test-reordering -w--100"},ee={class:"chi-grid -mb--2 -show--example"},te=g({__name:"_reordering-columns",setup(h){const t=[{className:"-n--3",comment:"<!-- displayed last -->"},{className:"-n--1",comment:"<!-- displayed first -->"},{className:"-n--2",comment:"<!-- displayed between -->"}],s=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],c=()=>`<div class="chi-grid">
${t.map(o=>`  <div class="chi-col ${o.className}"></div> ${o.comment}`).join(`
`)}
</div>`;return(o,l)=>{const d=x,p=w;return n(),b(p,{title:"Reordering Columns",id:"reordering-columns",tabs:s,showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0"},{"example-description":a(()=>l[0]||(l[0]=[e("p",{class:"-text"},"To display a column or columns in an order that is different than that which they appear in the markup, you may apply a reordering modifier class.",-1)])),example:a(()=>[e("div",Z,[e("div",ee,[(n(),m(u,null,_(t,({className:r})=>e("div",{class:y(["chi-col",r]),key:r},null,2)),64))])])]),"code-htmlblueprint":a(()=>[i(d,{class:"html",lang:"html",code:c()},null,8,["code"])]),_:1})}}});function ne(h,t){const s=z;return n(),m("div",null,[i(s,{title:"Responsive Layout",id:"responsive-layout","title-size":"h2"}),t[0]||(t[0]=S('<p class="-text">Chi defines 5 different viewports: XS, SM, MD, LG and XL. By default, columns in a grid container behave the same across viewport sizes. You will often want to change the layout based on the user&#39;s current viewport. You may accomplish this by setting viewport-specific classes to each of your columns that denote sizing or layout preferences for the viewport or viewports you are concerned with changing.<br><br>It is important to note that viewport-specific classes apply to their respective viewport and any larger viewport (unless overridden by a larger viewport class). For example, specifying <code>-w-md--6</code> would apply a width of 6 units to the column in MD, LG and XL viewports.</p><div class="chi-alert -info -my--3"><i class="chi-alert__icon chi-icon icon-circle-info"></i><div class="chi-alert__content"><p class="chi-alert__text">Try resizing your browser window to see the following examples in action as you change the viewport size.</p></div></div>',2))])}const se={},oe=k(se,[["render",ne]]),le=g({__name:"_viewport-column-sizing",setup(h){const t=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],s=[{comment:"<!-- 50% on xs viewports; 100% on sm, md, lg and xl viewports -->",className:"-w-sm--12"},{comment:"<!-- 50% on xs and sm viewports; 100% on md, lg and xl viewports -->",className:"-w-md--12"},{comment:"<!-- 50% on xs, sm and md viewports; 100% on lg and xl viewports -->",className:"-w-lg--12"},{comment:"<!-- 50% on xs, sm, md and lg viewports; 100% on xl viewports -->",className:"-w-xl--12"}],c=()=>s.map(o=>`${o.comment}
<div class="chi-grid">
  <div class="chi-col -w--6 ${o.className}"></div>
</div>
`).join(`
`);return(o,l)=>{const d=x,p=w;return n(),b(p,{title:"Viewport-Specific Column Sizing",id:"viewport-specific-column-sizing",tabs:t,showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0"},{"example-description":a(()=>l[0]||(l[0]=[e("p",{class:"-text"},"The columns in the following rows will be 50% wide until they are in the configured viewport, at which point they will become 12 column units wide.",-1)])),example:a(()=>[(n(),m(u,null,_(s,({className:r})=>e("div",{class:"-show--example chi-grid -mb--3",key:r},[e("div",{class:y(["chi-col -w--6",r])},null,2)])),64))]),"code-htmlblueprint":a(()=>[i(d,{lang:"html",code:c()},null,8,["code"])]),_:1})}}}),ie={class:"chi-grid -show--example -mb--3"},ae={class:"chi-grid -show--example -mb--3"},ce=["sclass"],re=g({__name:"_column-stacking",setup(h){const t=["-w-sm--2","-w-sm--4","-w-sm"],s=["-w-sm","-w-sm","-w-sm"],c=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],o=()=>`<div class="chi-grid">
${t.map(l=>`  <div class="chi-col ${l}"></div>`).join(`
`)}
</div>`;return(l,d)=>{const p=x,r=w;return n(),b(r,{title:"Column Stacking",id:"column-stacking",tabs:c,showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0"},{"example-description":a(()=>d[0]||(d[0]=[e("p",{class:"-text"},[v("On extra small (xs) viewports you can make columns stack by specifying the column with the "),e("code",null,"-w-sm"),v(" or any "),e("code",null,"-w-sm--*"),v(" size modifier classes. Columns will start out stacked until viewed in the small viewport, at which point they will display horizontally in the row according to automatic layout or its assigned viewport size class.")],-1)])),example:a(()=>[e("div",ie,[(n(),m(u,null,_(t,f=>e("div",{class:y(["chi-col",f]),key:f},null,2)),64))]),e("div",ae,[(n(),m(u,null,_(s,f=>e("div",{class:"chi-col -w-sm",key:f,sclass:f},null,8,ce)),64))])]),"code-htmlblueprint":a(()=>[i(p,{id:"column-stacking",lang:"html",code:o()},null,8,["code"])]),_:1})}}}),me=g({__name:"_viewport-column-offset",setup(h){const t=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],s=()=>`<div class="chi-grid">
  <div class="chi-col -o-md--6"></div>
</div>`;return(c,o)=>{const l=x,d=w;return n(),b(d,{title:"Viewport-Specific Column Offsets",id:"viewport-specific-column-offset",tabs:t,showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0"},{"example-description":a(()=>o[0]||(o[0]=[e("p",{class:"-text"},"You may also use offsets on a per-viewport basis. For example, it may make sense to offset content on a desktop, but where space is limited on a mobile device you may want to have the content occupy more space. In the following example, the column will be offset by 50% when on medium viewports, but will not be offset on extra small or small viewports.",-1)])),example:a(()=>o[1]||(o[1]=[e("div",{class:"chi-grid -show--example -mb--3"},[e("div",{class:"chi-col -o-md--6"})],-1)])),"code-htmlblueprint":a(()=>[i(l,{class:"html",lang:"html",code:s()},null,8,["code"])]),_:1})}}});function pe(h,t){const s=z;return n(),m(u,null,[i(s,{title:"Alignment",id:"alignment","title-size":"h2"}),i(s,{title:"Container-Level Vertical Alignment",id:"container-level-vertical-alignment"}),t[0]||(t[0]=e("p",{class:"-text"},"Setting alignment on the grid container will apply to all columns within the container. Use this method if you do not need to change the vertical alignment for each individual column.",-1))],64)}const de={},ue=k(de,[["render",pe]]),he={class:"chi-grid -align--top -show--example -mb--3",style:{height:"160px"}},_e=g({__name:"_align-top",setup(h){const t=[1,2,3],s=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],c=()=>`<div class="chi-grid -align--top" style="height: 160px;">
${t.map(o=>'  <div class="chi-col"></div>').join(`
`)}
</div>`;return(o,l)=>{const d=x,p=w;return n(),b(p,{title:"-align--top","title-size":"h4",id:"-align--top",tabs:s,showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0"},{example:a(()=>[e("div",he,[(n(),m(u,null,_(t,r=>e("div",{class:"chi-col",key:r})),64))])]),"code-htmlblueprint":a(()=>[i(d,{class:"html",lang:"html",code:c()},null,8,["code"])]),_:1})}}}),ge={class:"chi-grid -align--center -show--example -mb--3",style:{height:"160px"}},ve=g({__name:"_align-center",setup(h){const t=[1,2,3],s=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],c=()=>`<div class="chi-grid -align--center" style="height: 160px;">
${t.map(o=>'  <div class="chi-col"></div>').join(`
`)}
</div>`;return(o,l)=>{const d=x,p=w;return n(),b(p,{title:"-align--center","title-size":"h4",id:"-align--center",tabs:s,showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0"},{example:a(()=>[e("div",ge,[(n(),m(u,null,_(t,r=>e("div",{class:"chi-col",key:r})),64))])]),"code-htmlblueprint":a(()=>[i(d,{lang:"html",code:c()},null,8,["code"])]),_:1})}}}),we={class:"chi-grid -align--bottom -show--example -mb--3",style:{height:"160px"}},be=g({__name:"_align-bottom",setup(h){const t=[1,2,3],s=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],c=()=>`<div class="chi-grid -align--bottom" style="height: 160px;">
${t.map(o=>'  <div class="chi-col"></div>').join(`
`)}
</div>`;return(o,l)=>{const d=x,p=w;return n(),b(p,{title:"-align--bottom","title-size":"h4",id:"-align--bottom",tabs:s,showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0"},{example:a(()=>[e("div",we,[(n(),m(u,null,_(t,r=>e("div",{class:"chi-col",key:r})),64))])]),"code-htmlblueprint":a(()=>[i(d,{class:"html",lang:"html",code:c()},null,8,["code"])]),_:1})}}}),xe={class:"chi-grid -show--example -mb--3",style:{height:"160px"}},fe=g({__name:"_column-specific-vertical-alignment",setup(h){const t=["-align--top","-align--center","-align--bottom"],s=[{active:!0,id:"htmlblueprint",label:"HTML Blueprint"}],c=()=>`<div class="chi-grid" style="height: 160px;">
${t.map(o=>`  <div class="chi-col ${o}"></div>`).join(`
`)}
</div>`;return(o,l)=>{const d=x,p=w;return n(),b(p,{title:"Column-Specific Vertical Alignment",id:"column-specific-vertical-alignment",tabs:s,showSnippetTabs:!1,padding:"-p--0","example-additional-classes":"-b--0"},{"example-description":a(()=>l[0]||(l[0]=[e("p",{class:"-text"},"Changing the alignment of an individual column is as easy as applying an alignment modifier to the column in question.",-1)])),example:a(()=>[e("div",xe,[(n(),m(u,null,_(t,r=>e("div",{class:y(["chi-col",r]),key:r},null,2)),64))])]),"code-htmlblueprint":a(()=>[i(d,{class:"html",lang:"html",code:c()},null,8,["code"])]),_:1})}}}),ye={class:"chi-grid__container -pt--3"},Se=g({__name:"index",setup(h){return(t,s)=>{const c=z;return n(),m("div",ye,[i(c,{title:"Overview",id:"overview","title-size":"h2"}),s[0]||(s[0]=e("p",{class:"-text"},"Grids accelerate the development process by imposing a set of constraints that guide developers where to place elements and how to size them. Adhering to the grid ensures no matter what Lumen webpage or application customers use, they are provided with a consistent and familiar experience.",-1)),i(c,{title:"Layout Grid",id:"layout-grid","title-size":"h2"}),s[1]||(s[1]=e("p",{class:"-text"},"Chi includes a responsive mobile-first 12-column layout grid. Built on the flexbox standards, the Chi layout grid allows for complex layouts with minimal markup and styles.",-1)),i(B),i(E),i(G),i(O),i(D),i(Y),i(W),i(P),i(J),i(Q),i(te),i(oe),i(le),i(re),i(me),i(ue),i(_e),i(ve),i(be),i(fe)])}}});export{Se as _};
