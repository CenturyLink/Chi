import{_ as u}from"./GMWfc-pl.js";import{_ as m}from"./C_gFFCTR.js";import{e as r,c as a,o as c,F as h,b as n,a as t,d as o}from"./CmP53kv-.js";const b=r({__name:"_setup",setup(p){const s={htmlblueprint:`$ scripts/docker.sh alias
$ source ~/.bash_profile`,htmlblueprint1:"$ chi start"};return(d,e)=>{const i=u,l=m;return c(),a(h,null,[n(i,{title:"Setup",id:"setup","title-size":"h2"}),e[0]||(e[0]=t("p",{class:"-text"},[o("In order to set up Chi Development workflow, fork and clone "),t("a",{href:"https://github.com/CenturyLink/Chi",target:"_blank"},"Chi"),o(" GitHub repository.")],-1)),e[1]||(e[1]=t("p",{class:"-text"},"Set up your Chi development environment with Docker. First make sure you have Docker installed, then run the command:",-1)),n(l,{class:"-mb--2",id:"setup",code:s.htmlblueprint,lang:"bash"},null,8,["code"]),e[2]||(e[2]=t("p",{class:"-text"},"Now your environment is set up. To start development run:",-1)),n(l,{class:"-mb--2",id:"start",code:s.htmlblueprint1,lang:"bash"},null,8,["code"]),e[3]||(e[3]=t("p",{class:"-text"},[o("Once the container has been bootstrapped and the Chi project has started, connect to "),t("a",{href:"http://localhost:8000/"},"http://localhost:8000/"),o(" in your browser to load Chi. While running, any changes to the Chi source will be automatically reloaded in your browser.")],-1))],64)}}}),f=r({__name:"_testing",setup(p){const s={htmlblueprint:"$ chi test-e2e",htmlblueprint1:"$ chi test"};return(d,e)=>{const i=u,l=m;return c(),a(h,null,[n(i,{title:"Testing",id:"testing","title-size":"h2"}),n(i,{title:"End-to-end tests",id:"end-to-end"}),e[0]||(e[0]=t("p",{class:"-text"},[t("a",{target:"_blank",href:"https://www.cypress.io",rel:"noopener"},"Cypress"),o(" is used for end-to-end testing. Tests are located in the "),t("code",null,"cypress/integration"),o(" folder. To make them run:")],-1)),n(l,{id:"end-to-end",code:s.htmlblueprint,lang:"bash"},null,8,["code"]),e[1]||(e[1]=t("p",{class:"-text"},[o("You can run end-to-end tests interactively by launching the "),t("code",null,"start"),o(" command and opening a local version of the Cypress application. Then select the ux-chi root folder as the project folder.")],-1)),n(i,{title:"Visual regression tests",id:"visual-regression-tests"}),e[2]||(e[2]=t("p",{class:"-text"},[o("Chi has visual regression tests build for each component that are implemented in "),t("a",{target:"_blank",href:"https://github.com/garris/BackstopJS",rel:"noopener"},"BackstopJS"),o(". Each Custom Element component MUST have a Custom Element version for the same test files that are implemented in the normal version of Chi. These tests are configured in the "),t("code",null,"backstop-non-responsive-ce.json"),o(" file.")],-1)),e[3]||(e[3]=t("p",{class:"-text"},[o("E.g. "),t("code",null,"test/chi/custom-elements/icons.pug"),o(" will be compared to "),t("code",null,"test/chi/components/icons.pug"),o(" to ensure both components are rendered in the same way.")],-1)),e[4]||(e[4]=t("p",{class:"-text"},"This tests are run by the common test command",-1)),n(l,{id:"tests",code:s.htmlblueprint1},null,8,["code"]),e[5]||(e[5]=t("p",{class:"-text"},[o("Reports are available in the "),t("code",null,"reports/html_report/non_responsive_ce/"),o(" folder.")],-1))],64)}}}),g=r({__name:"_file-structure",setup(p){const s={htmlblueprint:`├── icon
│   ├── icon.scss
│   ├── icon.tsx
├── card
│   ├── card.scss
│   ├── card.tsx
│   └── test (to be defined)
├── card-content
│   ├── card-content.scss
│   └── card-content.tsx
├── card-title
│   ├── card-title.scss
│   ├── card-title.tsx`};return(d,e)=>{const i=u,l=m;return c(),a(h,null,[n(i,{title:"Style guide",id:"style-guide","title-size":"h2"}),e[0]||(e[0]=t("p",{class:"-text"},[t("em",null,[o("This style guide is based on "),t("a",{target:"_blank",href:"https://stenciljs.com/docs/style-guide",rel:"noopener"},"the one used by Ionic team"),o(".")])],-1)),n(i,{title:"File structure",id:"file-structure","title-size":"h2"}),e[1]||(e[1]=t("ul",null,[t("li",{class:"-text"},"One component per file."),t("li",{class:"-text"},"One component per directory. Though it may make sense to group similar components into the same directory, it's easier to document components when each one has its own directory."),t("li",{class:"-text"},"Implementation (.tsx) and styles of a component should live in the same directory.")],-1)),n(l,{id:"file-structure",code:s.htmlblueprint,lang:"bash"},null,8,["code"])],64)}}}),_=r({__name:"_html-tag",setup(p){const s={htmlblueprint:`<chi-button>
<chi-header>`,htmlblueprint1:`<chi-card>
<chi-card-header>
<chi-card-content>`};return(d,e)=>{const i=u,l=m;return c(),a(h,null,[n(i,{title:"Naming",id:"naming","title-size":"h2"}),n(i,{title:"HTML tag",id:"html-tag"}),n(i,{title:"PREFIX",id:"prefix","title-size":"h4"}),e[0]||(e[0]=t("p",{class:"-text"},'The prefix has a major role when you are creating a collection of components intended to be used across different projects. Web Components are not scoped because they are globally declared within the webpage, which means a "unique" prefix is needed to prevent collisions and can help to quickly identify the collection. Additionally, web components are required to contain a "-" dash within the tag name, so using the first section to namespace your components is a natural fit.',-1)),e[1]||(e[1]=t("p",{class:"-text"},[o("Tag prefix must be "),t("code",null,"chi"),o(":")],-1)),n(l,{id:"prefix",code:s.htmlblueprint,lang:"html"},null,8,["code"]),n(i,{title:"NAME",id:"name","title-size":"h4"}),e[2]||(e[2]=t("p",{class:"-text"},'Components are not actions, they are conceptually "things". It is better to use nouns instead of verbs, such as "animation" instead of "animating". Here are some good examples of component names: "input", "tab", "nav", and "menu".',-1)),n(i,{title:"MODIFIERS",id:"modifiers","title-size":"h4"}),e[3]||(e[3]=t("p",{class:"-text"},"When several components are related and/or coupled, it is a good practice to use common naming with different modifiers, for example:",-1)),n(l,{id:"modifier",code:s.htmlblueprint1,lang:"html"},null,8,["code"])],64)}}}),y=r({__name:"_component-ts-class",setup(p){const s={htmlblueprint:`@Component({
  tag: 'chi-button'
})
export class Button { ... }

@Component({
  tag: 'chi-icon'
})
export class Icon { ... }`};return(d,e)=>{const i=u,l=m;return c(),a(h,null,[n(i,{title:"Component (TS class)",id:"component-ts-class"}),e[0]||(e[0]=t("p",{class:"-text"},"The name of the ES6 class of the component SHOULD NOT have a prefix since classes are scoped. There is no risk of collision.",-1)),n(l,{id:"ts-class",code:s.htmlblueprint,lang:"typescript"},null,8,["code"])],64)}}}),x=r({__name:"_typescript",setup(p){const s={htmlblueprint:`@Prop() name: string;
@Element() el: HTMLElement;`,htmlblueprint1:`@Listen('click')
onClick() {
  ...
}`};return(d,e)=>{const i=u,l=m;return c(),a(h,null,[n(i,{title:"TypeScript",id:"typescript","title-size":"h2"}),e[0]||(e[0]=t("p",{class:"-text"},[o("Follow "),t("a",{target:"_blank",href:"https://github.com/ionic-team/tslint-ionic-rules/blob/master/tslint.js",rel:"noopener"},"tslint-ionic-rules"),o(". This file is located in /src/custom-elements/ and has to be configured in your editor.")],-1)),e[1]||(e[1]=t("p",{class:"-text"},"Variable decorators should be inlined.",-1)),n(l,{id:"variable",code:s.htmlblueprint,lang:"typescript"},null,8,["code"]),e[2]||(e[2]=t("p",{class:"-text"},"Method decorator should be multi-line",-1)),n(l,{id:"method",code:s.htmlblueprint1,lang:"typescript"},null,8,["code"]),e[3]||(e[3]=t("p",{class:"-text"},"Use private variables and methods as much as possible; they are useful to detect dead code and enforce encapsulation. Note that this is a feature which TypeScript provides to help hardening your code, but using private, public or protected does not make a difference in the actual JavaScript output.",-1)),e[4]||(e[4]=t("p",{class:"-text"},[o("Code with Method/Prop/Event/Component decorators should have "),t("code",null,"jsdocs"),o("; this allows documentation generation and for a better user experience in an editor that has TypeScript intellisense. "),t("em",null,"Stencil auto-generated documentation will be included in the Chi documentation pages. ")],-1))],64)}}}),v=r({__name:"_properties",setup(p){const s={htmlblueprint:"@Prop({ reflect: true }) color: string;",htmlblueprint1:"@Prop({ mutable: true}) color: string;",htmlblueprint2:"@Prop() bordered: boolean = false;",htmlblueprint3:`@Watch('name')
  validateName(newValue: string, oldValue: string) {
    const isBlank = typeof newValue == null;
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (isBlank) { throw new Error('name: required') };
    if (!has2chars ) { throw new Error('name: has2chars') };
  }`};return(d,e)=>{const i=u,l=m;return c(),a(h,null,[n(i,{title:"Properties",id:"properties"}),e[0]||(e[0]=t("p",{class:"-text"},"It is considered a good practice and SHOULD be configured to Reflect public properties to attributes.",-1)),n(l,{id:"reflect",code:s.htmlblueprint},null,8,["code"]),e[1]||(e[1]=t("p",{class:"-text"},"Properties SHOULDN'T be configured as mutable and, once a value is set by a user, the component should not update it internally. Use it only if strictly necessary.",-1)),n(l,{id:"mutable",code:s.htmlblueprint1},null,8,["code"]),e[2]||(e[2]=t("p",{class:"-text"},"Properties SHOULD have a default value and MUST be validated.",-1)),e[3]||(e[3]=t("p",{class:"-text"},"Sometimes it is enough validation the use of a definition type:",-1)),n(l,{id:"bordered",code:s.htmlblueprint2},null,8,["code"]),e[4]||(e[4]=t("p",{class:"-text"},"Other times a function with a @Watch decorator is necessary:",-1)),n(l,{id:"validate-name",code:s.htmlblueprint3},null,8,["code"])],64)}}}),w=r({__name:"_styling",setup(p){const s={htmlblueprint:`@Component({
  tag: 'chi-icon',
  styleUrl: 'icon.scss',
  scoped: true
})`};return(d,e)=>{const i=u,l=m;return c(),a(h,null,[n(i,{title:"Styling",id:"styling","title-size":"h2"}),e[0]||(e[0]=t("p",{class:"-text"},"Chi components will have scoped CSS, to prevent collisions when using in non-chi compatible environments.",-1)),n(l,{id:"styling",code:s.htmlblueprint},null,8,["code"]),e[1]||(e[1]=t("p",{class:"-text"},"As of now, there is no support for per-version scoped CSS. This means that rules from two different versions of chi components will collide, so it should be avoided.",-1))],64)}}}),C=r({__name:"_rules",setup(p){const s={htmlblueprint:`@import 'components/icons/webfont-font-face';
:host(chi-icon) {
@import '../../global/styles/common';
@extend %root-typography;
@import 'components/icons/icons';
@import 'components/icons/webfont-icons';

display: inline-block;
}`};return(d,e)=>{const i=u,l=m;return c(),a(h,null,[n(i,{title:"Rules",id:"rules"}),e[0]||(e[0]=t("ul",{class:"-text"},[t("li",null,"Components MIGHT have a *.scss file that will import the necessary files from the project"),t("li",null,[o("All rules but font-face ones MUST be wrapped inside a "),t("code",null,":host"),o(" rule to override a possible Chi default stylesheet")]),t("li",null,[o("The default display for Custom Elements is "),t("code",null,"inline"),o(" so the developer MUST take care of this.")])],-1)),n(l,{id:"rules",code:s.htmlblueprint},null,8,["code"])],64)}}}),T={class:"chi-grid__container -pt--3"},$=r({__name:"index",setup(p){return(s,d)=>(c(),a("div",T,[n(b),n(f),n(g),n(_),n(y),n(x),n(v),n(w),n(C)]))}});export{$ as _};
