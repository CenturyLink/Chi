import{_ as p}from"./Dg5y4kC1.js";import{_ as m}from"./BwJ04oeF.js";import{T as s}from"./DhIYcLiR.js";import{e as l,c as v,o as c,m as i,a as t,d as a,j as o,F as g,f,w as n,b as r}from"./BnvmtQYM.js";import"./Bk5Nr_bJ.js";import"./CfKaToPi.js";import"./CpGl5nKs.js";import"./8Rn8z3Rm.js";import"./DlAUqK2U.js";import"./Cr4Krhex.js";import"./Zvpnuh4B.js";import"./DD5d-mQ_.js";const b={class:"-text"},_=["href"],w={class:"-text"},A=["href"],k=l({__name:"_accessibility",setup(d){return(h,e)=>(c(),v(g,null,[e[2]||(e[2]=i('<h2>Accessibility</h2><h3>Keyboard Navigation</h3><table class="chi-table"><thead><tr><th>Key</th><th>Function</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>Moves focus to the next element in the tab sequence. The skeleton itself should not receive focus.</td></tr><tr><td><code>Shift + Tab</code></td><td>Moves focus to the previous focusable element. The skeleton should not disrupt navigation.</td></tr></tbody></table>',3)),t("p",b,[e[0]||(e[0]=a("For detailed keyboard interactions, refer to our ")),t("a",{href:`${o(s)}/foundations/accessibility/using-keyboard/`,target:"_blank"},"Keyboard Control Guide.",8,_)]),e[3]||(e[3]=i('<p class="-text">Visit <a href="https://webaim.org/techniques/keyboard/" target="_blank">WebAIM</a> for general keyboard techniques.</p><div class="chi-grid"><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for developers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Ensure skeleton components do not receive focus and do not interfere with navigation.</li><li>Use <code>aria-hidden=&quot;true&quot;</code> to hide skeleton placeholders from assistive technologies.</li><li>Announce dynamic content changes using <code>aria-live</code> regions when skeletons are replaced with real content.</li><li>Avoid relying solely on skeletons for loading states—provide textual loading indicators when appropriate.</li><li>Ensure the skeleton component scales appropriately across different screen sizes and devices.</li></ul></div></div></div></div><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for designers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Design skeleton placeholders to closely match the structure of the actual content.</li><li>Maintain sufficient contrast between the skeleton and the background to ensure visibility.</li><li>Use smooth, subtle animations to indicate loading progress without being distracting.</li><li>Provide alternative loading indicators for users who may not recognize skeleton placeholders.</li><li>Avoid using skeletons for static content—only apply them for dynamic content that is actively loading.</li></ul></div></div></div></div></div><p class="-text"> Explore live examples in the <a href="https://www.w3.org/WAI/ARIA/apg/patterns/" target="_blank">ARIA Practices Guide</a>. </p><h3>Resources</h3><ul class="-text"><li><a href="https://webaim.org/techniques/aria/" target="_blank">WebAIM ARIA Guide:</a> Techniques for using ARIA effectively.</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/#animation-from-interactions" target="_blank">WCAG 2.2 Animation Guidelines:</a> Recommendations for reducing animation effects for users with vestibular disorders.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions" target="_blank">MDN Guide on ARIA Live Regions:</a> Explains how to communicate dynamic changes to assistive technologies.</li><li><a href="https://adrianroselli.com/2020/11/more-accessible-skeletons.html" target="_blank">More Accessible Skeletons:</a> Best practices for making skeleton components more accessible.</li></ul><h3>Other recommendations</h3>',6)),t("p",w,[e[1]||(e[1]=a("Find additional accessibility tips in our ")),t("a",{href:`${o(s)}/foundations/accessibility/overview`,target:"_blank"},"Accessibility Guide.",8,A)]),e[4]||(e[4]=i('<h3>WCAG 2.2 Guidelines</h3><ul class="-text"><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content" target="_blank">Non-text Content: </a>All non-text content that is presented to the user has a text alternative that serves the equivalent purpose. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-content-structure-separation-programmatic" target="_blank">Info and Relationships: </a>Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-navigation-mechanisms-descriptive" target="_blank">Headings and Labels: </a>Headings and labels describe topic or purpose. (Level AA)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-minimize-error-cues" target="_blank">Labels or Instructions: </a>Labels or instructions are provided when content requires user input. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-ensure-compat-rsv" target="_blank">Name, Role, Value: </a>For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (Level A)</li></ul>',2))],64))}}),T=l({__name:"index",setup(d){return(h,e)=>{const u=p;return c(),f(u,{"hide-builder":"",title:"Skeleton",description:"Use skeleton to achieve loading visual state for asynchronously rendered UI elements.","properties-tag":"chi-skeleton"},{examples:n(()=>[r(m)]),accessibility:n(()=>[r(k)]),_:1})}}});export{T as default};
