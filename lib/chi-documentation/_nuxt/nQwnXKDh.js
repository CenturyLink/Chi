import{a as f,_ as v}from"./CwWdfYK8.js";import{_ as g}from"./DTi9dFiC.js";import{_ as y}from"./C_gFFCTR.js";import{e as n,c as h,o as l,a as e,b as s,d as i,F as b,m as a,j as m,f as w,w as r}from"./CmP53kv-.js";import{T as p}from"./DUA-YDj1.js";import"./CDht6vRo.js";import"./C3x5fPEm.js";import"./tYJG4N2n.js";import"./BngLxHOz.js";import"./DlAUqK2U.js";import"./CLOSKf5d.js";import"./LJMJS6pN.js";import"./CmWk2xIH.js";import"./GMWfc-pl.js";const _=`
var elem = document.getElementById('input-number-1');
var inputNumberComponent = chi.numberInput(elem);
// do stuff
inputNumberComponent.dispose();`,x=`
var elem = document.getElementById('input-number-1');
var inputNumberComponent = chi.numberInput(elem);
var elem2 = document.getElementById('input-number-1');
var inputNumberComponent2 = chi.numberInput(elem2);
inputNumberComponent === inputNumberComponent2; // returns true

inputNumberComponent.dispose(); // Only have to do it once.`,k=n({__name:"_properties",setup(d){return(c,t)=>{const o=f,u=y;return l(),h(b,null,[t[0]||(t[0]=e("h2",null,"Web Component",-1)),s(o,{tag:"chi-number-input"}),t[1]||(t[1]=e("div",{class:"chi-divider -my--5"},null,-1)),t[2]||(t[2]=e("h2",null,"JavaScript",-1)),t[3]||(t[3]=e("p",{class:"-text"},"This component accepts options to configure its behavior.",-1)),t[4]||(t[4]=e("section",{class:"chi-table chi-table__options -bordered -my--3"},[e("div",null,[e("table",{class:"-text",cellpadding:"0",cellspacing:"0"},[e("thead",null,[e("tr",null,[e("th",{style:{width:"10em"}},[e("div",null,"Option")]),e("th",{style:{width:"10em"}},[e("div",null,"Default")]),e("th",null,[e("div",null,"Description")])])]),e("tbody",null,[e("tr",null,[e("td",null,[e("div",null,[e("code",null,"autofix")])]),e("td",null,[e("div",null,[e("code",null,"false")])]),e("td",null,[e("div",null,[i("Fixes automatically values that are out of range of defined by "),e("code",null,"max"),i(" and "),e("code",null,"min"),i(" attributes, and any value that doesn't fit the granularity defined by "),e("code",null,"step"),i(" and the "),e("code",null,"initial"),i(" value")])])])])])])],-1)),t[5]||(t[5]=e("h3",null,"Preventing memory leaks",-1)),t[6]||(t[6]=e("p",{class:"-text"},"Input number components have a dispose function to free all resources attached to the element, such as event listeners and object data. You should call this method when you want to remove the component.",-1)),s(u,{lang:"javascript",code:_}),t[7]||(t[7]=e("p",{class:"-text"},[e("span",{class:"chi-badge -dark -sm -mr--1"},[e("span",null,"Tip")]),i("It is safe to call the "),e("code",null,"numberInput"),i(" method more than once, as it will return any previously created number input component associated to the input.")],-1)),s(u,{lang:"javascript",code:x})],64)}}}),A={class:"-text"},q=["href"],I={class:"-text"},C=["href"],N=n({__name:"_accessibility",setup(d){return(c,t)=>(l(),h(b,null,[t[2]||(t[2]=a('<h2>Accessibility</h2><h3>Keyboard Navigation</h3><table class="chi-table"><thead><tr><th>Key</th><th>Function</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>Moves focus to the next focusable element.</td></tr><tr><td><code>Shift + Tab</code></td><td>Moves focus to the previous focusable element.</td></tr><tr><td><code>Up Arrow</code>or<code>Shift</code>+<code>Up Arrow</code></td><td>Increases the value.</td></tr><tr><td><code>Down Arrow</code>or<code>Shift</code>+<code>Down Arrow</code></td><td>Decreases the value.</td></tr><tr><td><code>Enter</code></td><td>Submits the entered value.</td></tr></tbody></table>',3)),e("p",A,[t[0]||(t[0]=i("For comprehensive details on keyboard support, refer to our ")),e("a",{href:`${m(p)}/foundations/accessibility/using-keyboard/`,target:"_blank"},"Keyboard Control Guide.",8,q)]),t[3]||(t[3]=a('<p class="-text">Visit <a href="https://webaim.org/techniques/keyboard/" target="_blank">WebAIM</a> for keyboard techniques.</p><div class="chi-grid"><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for developers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Ensure simplicity since not all browsers handle multiple labels linked to the same form element correctly.</li><li>Label Usage: Assign a label to each input field and make sure the <code>for=&quot;&quot;</code> attribute of the label matches the <code>id=&quot;&quot;</code> of the corresponding input. Remember, each id must be unique on the page, and each form element should have only one associated label.</li><li>Indicating Required Fields: Clearly mark required fields using indicators like an asterisk (*) or descriptive text to make them easily identifiable.</li><li>Help Text: Incorporate help text for all form fields, especially those with constraints. This text should be programmatically associated with the input, for example, using <code>aria-describedby</code>. This is particularly important for masked fields.</li><li>Test compatibility with various screen readers (like JAWS, NVDA, or VoiceOver) to ensure the number input component is announced correctly. Options should be clearly read out when navigated.</li><li>Error Validation: Fields with validation errors should use <code>aria-describedby</code> to ensure that error messages are accessible to assistive technologies. If an error message has an <code>id=&quot;my-error-message&quot;</code>, the corresponding input should include <code>aria-describedby=&quot;my-error-message&quot;</code></li></ul></div></div></div></div><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for designers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Design with simplicity to accommodate all browsers, minimizing complexities that could hinder accessibility.</li><li>Obvious Required Fields: Use visual cues, such as an asterisk (*) or supplementary text, to clearly mark required fields and make them easily distinguishable.</li><li>User-Friendly Help Text: Place help text or examples directly below or inside the number input field to guide users on the correct format.</li><li>Visible Error Feedback: Design error messages to appear clearly near the number input field when validation fails, using color, icons, or text to make them noticeable.</li><li>Sufficient Tap Targets: Ensure number input fields have large enough tap targets to accommodate users with different levels of dexterity, following touch-friendly design principles.</li><li>Use spacing, typography, and visual cues effectively.</li><li>Maintain consistency in the design of the number input to provide a cohesive user experience.</li></ul></div></div></div></div></div><p class="-text">Find live examples of accessible inputs with different types in <a href="https://www.digitala11y.com/demos/accessibility-of-html-input-types-examples/" target="_blank">DigitalA11y project.</a></p><h3>Resources</h3><ul class="-text"><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number" target="_blank">Mozilla Resources for Developers:</a>Information about the HTML <code>input-type=&quot;number&quot;</code></li><li><a href="https://a11y-style-guide.com/style-guide/section-forms.html#kssref-forms-text-fields" target="_blank">A11y style guide:</a>Describes core principles for the accessible inputs and textarea.</li><li><a href="https://www.magentaa11y.com/checklist-web/number-input/" target="_blank">MagentaA11y:</a>How to test a number input.</li></ul><h3>Other recommendations</h3>',6)),e("p",I,[t[1]||(t[1]=i("Explore additional accessibility tips in the general ")),e("a",{href:`${m(p)}/foundations/accessibility/overview`,target:"_blank"},"Accessibility Guide.",8,C)]),t[4]||(t[4]=a('<h3>WCAG 2.2 Guidelines</h3><ul class="-text"><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content" target="_blank">Non-text Content:</a>All non-text content that is presented to the user has a text alternative that serves the equivalent purpose. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-content-structure-separation-programmatic" target="_blank">Info and Relationships:</a>Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-navigation-mechanisms-descriptive" target="_blank">Headings and Labels:</a>Headings and labels describe topic or purpose. (Level AA)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-minimize-error-cues" target="_blank">Labels or Instructions:</a>Labels or instructions are provided when content requires user input. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-ensure-compat-rsv" target="_blank">Name, Role, Value:</a>For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (Level A)</li></ul>',2))],64))}}),H=n({__name:"index",setup(d){return(c,t)=>{const o=v;return l(),w(o,{"hide-builder":"",title:"Number input",description:"Number inputs are used to increase or decrease numeric values."},{examples:r(()=>[s(g)]),properties:r(()=>[s(k)]),accessibility:r(()=>[s(N)]),_:1})}}});export{H as default};
