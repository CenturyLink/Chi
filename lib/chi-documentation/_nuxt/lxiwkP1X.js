import{_ as p}from"./4a9mslvX.js";import{_ as b}from"./COlRyE9c.js";import{T as a}from"./DmOWWIWS.js";import{e as l,c as m,o as c,m as i,a as t,d as s,j as o,F as v,f as g,w as n,b as r}from"./-E9oTzhC.js";import"./DJZW7nqp.js";import"./zoIYZcmM.js";import"./B5KlrkA7.js";import"./CXpDRGsh.js";import"./DlAUqK2U.js";import"./LNeokCJg.js";import"./rD-gEhvI.js";import"./B1-AdL93.js";import"./B1sWQIZ5.js";import"./BXLG8AOx.js";const f={class:"-text"},y=["href"],_={class:"-text"},w=["href"],x=l({__name:"_accessibility",setup(d){return(u,e)=>(c(),m(v,null,[e[2]||(e[2]=i('<h2>Accessibility</h2><h3>Keyboard Navigation</h3><table class="chi-table"><thead><tr><th>Key</th><th>Function</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>Moves focus to the next focusable element </td></tr><tr><td><code>Shift + Tab</code></td><td>Moves focus to the previous focusable element </td></tr><tr><td><code>Enter</code>,<code>Space</code></td><td>Activates the button</td></tr></tbody></table>',3)),t("p",f,[e[0]||(e[0]=s("For comprehensive details on keyboard support for buttons, refer to our ")),t("a",{href:`${o(a)}/foundations/accessibility/using-keyboard/`,target:"_blank"},"Keyboard Control Guide.",8,y)]),e[3]||(e[3]=i('<p class="-text">Visit <a href="https://webaim.org/techniques/keyboard/" target="_blank">WebAIM</a> for keyboard techniques.</p><div class="chi-grid"><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for developers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>A <code>button</code> tag operates without requiring any special configurations. It&#39;s advisable to utilize <code>button</code> whenever possible, although alternative elements can be used if supplemented with <code>role=&quot;button&quot;</code> and JavaScript to emulate button functionality.</li><li>Similar to hyperlinks, you can incorporate <code>class=&quot;visuallyhidden&quot;</code> along with descriptive text to provide additional context regarding the button&#39;s purpose.</li><li>Ensure consistency between visual labels and programmatic labels.</li><li>Conceal SVG icons from screen readers when attached to buttons that possess textual labels.</li><li>Emphasize button states significance, not solely focusing on button styling. Solely toggling classes to visually manage component states may not effectively communicate these states to users of assistive technologies.</li><li>In instances where buttons lack text, it&#39;s imperative to append <code>aria-label</code> with a descriptive explanation of the button.</li></ul></div></div></div></div><div class="chi-col -w-sm--12 -w-md--6 -w-lg--6 -mb--3"><div class="chi-card -widget"><div class="chi-card__header"><div class="chi-card__title -text--normal">Guidance for designers</div></div><div class="chi-card__content"><div class="chi-card__caption"><ul class="-text"><li>Ensure that the visual appearance and functional behavior of buttons are consistent across states and contexts.</li><li>Ensure sufficient color contrast between the button background and text to improve readability, especially for users with visual impairments. Additionally, avoid relying solely on color as the only means of conveying information or indicating button states.</li><li>Design distinct visual indicators for focus and hover states to assist users in navigating interactive elements, particularly for keyboard and mouse users.</li><li>Touch Targets: Design buttons with an adequate size and spacing. </li><li>Use spacing, typography, and visual cues effectively.</li></ul></div></div></div></div></div><p class="-text"> Find live examples in the <a href="https://a11y-style-guide.com/style-guide/section-forms.html#kssref-forms-checkboxes" target="_blank">A11y style guide</a>. </p><h3>Roles and attributes</h3><p class="-text"> Below are some key considerations to ensure that our components are fully accessible in various scenarios within your interfaces. These points outline the necessary roles and attributes to keep in mind.</p><table class="chi-table"><thead><tr><th class="-pr--10">Attribute </th><th>Element</th><th>Usage</th></tr></thead><tbody><tr><td><code>aria-label</code></td><td><code>div</code></td><td>Specifies a textual value used to label an interactive element. This attribute is mandatory for buttons lacking textual content.</td></tr><tr><td><code>aria-labelledby</code></td><td><code>div</code></td><td>The attribute <code>aria-labelledby</code> designates the element or elements responsible for labeling the applied element. It is essential for buttons lacking text content.</td></tr></tbody></table><h3>Resources</h3><ul class="-text"><li><a href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/" target="_blank">W3 Button Example: </a>Contains comprehensive details regarding the accessibility behavior of the button.</li><li><a href="https://a11y-style-guide.com/style-guide/section-general.html" target="_blank">A11y Style Guide: </a>Gives core recommendations for accessible buttons. </li><li><a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role" target="_blank">Mozilla Resources for Developers: </a>Find examples of accessible buttons.</li></ul><h3>Other recommendations</h3>',9)),t("p",_,[e[1]||(e[1]=s("Explore additional accessibility tips in the general ")),t("a",{href:`${o(a)}/foundations/accessibility/overview`,target:"_blank"},"Accessibility Guide.",8,w)]),e[4]||(e[4]=i('<h3>WCAG 2.2 Guidelines</h3><ul class="-text"><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#non-text-content" target="_blank">Non-text Content: </a>All non-text content that is presented to the user has a text alternative that serves the equivalent purpose. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-content-structure-separation-programmatic" target="_blank">Info and Relationships: </a>Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-navigation-mechanisms-descriptive" target="_blank">Headings and Labels: </a>Headings and labels describe topic or purpose. (Level AA)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-minimize-error-cues" target="_blank">Labels or Instructions: </a>Labels or instructions are provided when content requires user input. (Level A)</li><li><a href="https://www.w3.org/WAI/WCAG22/quickref/?versions=2.2#qr-ensure-compat-rsv" target="_blank">Name, Role, Value: </a>For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (Level A) </li></ul>',2))],64))}}),N=l({__name:"index",setup(d){return(u,e)=>{const h=p;return c(),g(h,{"hide-builder":"",title:"Button",description:"Buttons are used to trigger actions in forms, modals, and more.","properties-tag":"chi-button"},{examples:n(()=>[r(b)]),accessibility:n(()=>[r(x)]),_:1})}}});export{N as default};
