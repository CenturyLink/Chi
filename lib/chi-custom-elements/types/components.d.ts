/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { AccordionSizes, IconSizes, LabelSizes, MarketingIconSizes, PickerPillSizes, PickerSizes, PriceSizes, SkeletonSizes, TabsSizes, TextInputSizes } from "./constants/size";
import { AccordionItem, ChiMarketingIconModes, Country, DropdownMenuItem, DropdownMenuMultiItem, DropdownSelectModes, FontWeight, FormWrapperCheckbox, FormWrapperRadio, GeneralPositions, PickerInputTypes, PickerOption, SearchInputModes, SkeletonTypes, TabTrigger, Tag } from "./constants/types";
import { AlertColors, IconColors, TooltipColors } from "./constants/color";
import { ChiStates } from "./constants/states";
import { AppLayoutFormats, DataLocales, DateFormats, DatePickerModes, FormWrapperLayouts, FormWrapperTypes, TextInputTypes, TimePickerFormats, TimePickerTimeSteps } from "./constants/constants";
import { Placement } from "popper.js";
import { CountryCode } from "libphonenumber-js";
import { ChiStates as ChiStates1 } from "./components";
export { AccordionSizes, IconSizes, LabelSizes, MarketingIconSizes, PickerPillSizes, PickerSizes, PriceSizes, SkeletonSizes, TabsSizes, TextInputSizes } from "./constants/size";
export { AccordionItem, ChiMarketingIconModes, Country, DropdownMenuItem, DropdownMenuMultiItem, DropdownSelectModes, FontWeight, FormWrapperCheckbox, FormWrapperRadio, GeneralPositions, PickerInputTypes, PickerOption, SearchInputModes, SkeletonTypes, TabTrigger, Tag } from "./constants/types";
export { AlertColors, IconColors, TooltipColors } from "./constants/color";
export { ChiStates } from "./constants/states";
export { AppLayoutFormats, DataLocales, DateFormats, DatePickerModes, FormWrapperLayouts, FormWrapperTypes, TextInputTypes, TimePickerFormats, TimePickerTimeSteps } from "./constants/constants";
export { Placement } from "popper.js";
export { CountryCode } from "libphonenumber-js";
export { ChiStates as ChiStates1 } from "./components";
export namespace Components {
    interface ChiAccordion {
        /**
          * To provide data for accordions
         */
        "accordions": AccordionItem[];
        /**
          * to set card layout
         */
        "card": boolean;
        /**
          * To hide one accordion (index), more than one (array of indexes) or all (no argument)
         */
        "hide": (accordions?: number | number[]) => Promise<void>;
        /**
          * to set portal layout (temporary)
         */
        "portal": boolean;
        /**
          * To show one accordion (index), more than one (array of indexes) or all (no argument)
         */
        "show": (accordions?: number | number[]) => Promise<void>;
        /**
          * to set accordion size { sm, md, lg, xl }. Size sm is not supported in Card
         */
        "size": AccordionSizes;
        /**
          * To toggle one accordion (index), more than one (array of indexes) or all (no argument)
         */
        "toggle": (accordions?: number | number[]) => Promise<void>;
        /**
          * to truncate long accordion titles
         */
        "truncated": boolean;
    }
    interface ChiAlert {
        /**
          * To define alert title
         */
        "alertTitle"?: string;
        /**
          * to center the alert content.
         */
        "center": boolean;
        /**
          * to make the alert dismissible.
         */
        "closable": boolean;
        /**
          * to set alert state.
         */
        "color": AlertColors;
        /**
          * to set the alert expiration time (seconds).
         */
        "expirationTime"?: number;
        /**
          * to avoid the necessity of adding <chi-icon> to alert markup.
         */
        "icon": string;
        /**
          * to hide the alert when dismissed.
         */
        "mutable": boolean;
        /**
          * to set alert size { sm, md, lg }.
         */
        "size": string;
        /**
          * To render alert with Spinner
         */
        "spinner": boolean;
        /**
          * to set alert type { bubble, banner, toast }.
         */
        "type": string;
    }
    interface ChiBadge {
        /**
          * to set color of a badge { primary, success, warning, danger, dark, muted, secondary, light, accent-1, accent-2, accent-3, accent-4, accent-5 }.
         */
        "color": string;
        /**
          * to set size of a badge { xs or sm }.
         */
        "size": string;
        /**
          * to transform the badge text { uppercase, lowercase, capitalize }.
         */
        "textTransform": string;
        /**
          * to set weight of the badge text { normal, semi-bold, bold }.
         */
        "textWeight": string;
        /**
          * to set variant of a badge { outline, flat }.
         */
        "variant": string;
    }
    interface ChiBrand {
        /**
          * to set brand color { black, white, inverse }.
         */
        "color": string;
        /**
          * to set logo of brand { lumen, centurylink, brightspeed, colt }.
         */
        "logo": string;
        /**
          * to set size of brand.
         */
        "size": string;
        /**
          * to set brand type { black, white, inverse }.
         */
        "type": string;
    }
    interface ChiButton {
        /**
          * to provide alternative text in case of icon buttons.
         */
        "alternativeText": string;
        /**
          * to center align the text.
         */
        "center": boolean;
        /**
          * to set button color { primary, secondary, danger, dark, light }.
         */
        "color": string;
        /**
          * to disable chi-button.
         */
        "disabled": boolean;
        "extraClass": string;
        /**
          * to render a button to fill the parent space.
         */
        "fluid": boolean;
        /**
          * to set button size { xs, sm, md, lg, xl }.
         */
        "size": string;
        /**
          * to set button type { float, close, icon }.
         */
        "type": string;
        /**
          * to render a button with uppercase text.
         */
        "uppercase": boolean;
        /**
          * to set variant of a button { outline, flat }.
         */
        "variant": string;
    }
    interface ChiCarousel {
        /**
          * To set the autoplay for the carousel
         */
        "autoplay": boolean;
        /**
          * To render Carousel with dot controllers
         */
        "dots": boolean;
        /**
          * To set the interval for the autoplay
         */
        "interval": number;
        /**
          * To render Carousel without Button Controllers
         */
        "noButtonControllers": boolean;
        /**
          * To render Carousel with pagination indicators
         */
        "pagination": boolean;
        /**
          * To render Carousel with a single item per view
         */
        "single": boolean;
    }
    interface ChiCheckbox {
        /**
          * To define -hover, -focus statuses
         */
        "_status": string;
        /**
          * To render the checkbox in checked state
         */
        "checked"?: boolean;
        /**
          * To disable the checkbox
         */
        "disabled"?: boolean;
        /**
          * To add indeterminate state to checkbox
         */
        "indeterminate"?: boolean;
        /**
          * To indicate if info icon should be displayed.
         */
        "infoIcon": boolean;
        /**
          * To provide message for info icon popover.
         */
        "infoIconMessage": string;
        /**
          * To provide checkbox label as a string
         */
        "label": string;
        /**
          * To render the checkbox input with a respective name attribute
         */
        "name": string;
        /**
          * To indicate which form field is required
         */
        "required": boolean;
        /**
          * To indicate the state
         */
        "state"?: ChiStates;
    }
    interface ChiCopyText {
        /**
          * Color of the Icon.
         */
        "color"?: IconColors;
        /**
          * To disable the copy button
         */
        "disabled"?: boolean;
        /**
          * Size of the icon
         */
        "size"?: IconSizes;
        /**
          * Text to be copied to clipboard
         */
        "text": string;
    }
    interface ChiDate {
        /**
          * To specify which dates to disable
         */
        "excludedDates": string;
        /**
          * To specify which days of week to disable
         */
        "excludedWeekdays": string;
        /**
          * Date format used in the attributes and how it will be shown to the user.
         */
        "format": DateFormats;
        /**
          * Gets date
         */
        "getDate": () => Promise<string>;
        /**
          * Locale to use in date picker
         */
        "locale": DataLocales;
        /**
          * Maximum eligible date
         */
        "max": string;
        /**
          * Minimum eligible date
         */
        "min": string;
        /**
          * To allow the user to select multiple dates
         */
        "multiple": boolean;
        /**
          * Sets date
         */
        "setDate": (date: any) => Promise<void>;
        /**
          * Selected date in the date picker
         */
        "value": string;
    }
    interface ChiDatePicker {
        /**
          * Indicates whether the dropdown calendar is open or closed
         */
        "active": boolean;
        /**
          * to disable chi-date-picker.
         */
        "disabled": boolean;
        /**
          * Displaying seconds column
         */
        "displaySeconds"?: boolean;
        /**
          * To specify which dates to disable
         */
        "excludedDates": string;
        /**
          * To specify which days of week to disable
         */
        "excludedWeekdays": string;
        /**
          * Date format used in the attributes and how it will be shown to the user.
         */
        "format": DateFormats;
        /**
          * Gets date
         */
        "getDate": () => Promise<string>;
        /**
          * To display an additional helper text message below the Date Picker
         */
        "helperMessage"?: string;
        /**
          * Locale to use in date picker
         */
        "locale": DataLocales;
        /**
          * Maximum eligible date
         */
        "max": string;
        /**
          * Minimum eligible date
         */
        "min": string;
        /**
          * Renders minutes in stepped format. Defaults to 15 min steps if no value is provided (see examples in docs).
         */
        "minutesStep"?: TimePickerTimeSteps;
        /**
          * To render Date Picker with Time Picker
         */
        "mode": DatePickerModes;
        /**
          * To allow the user to select multiple dates
         */
        "multiple": boolean;
        /**
          * Resets date
         */
        "resetDate": () => Promise<void>;
        /**
          * Sets date
         */
        "setDate": (date: any) => Promise<void>;
        /**
          * To define state color of Date Picker
         */
        "state"?: ChiStates;
        /**
          * To specify format for the Time Picker. Applicable only if mode is equal to 'datetime'
         */
        "timeFormat"?: TimePickerFormats;
        /**
          * Selected date in the date picker
         */
        "value": string;
    }
    interface ChiDrawer {
        /**
          * to open or close the drawer
         */
        "active": boolean;
        /**
          * to add a backdrop behind the drawer, which covers the viewport
         */
        "backdrop": string;
        /**
          * To define drawer title. Not compatible with noHeader
         */
        "drawerTitle": string;
        /**
          * Hides the drawer
         */
        "hide": () => Promise<void>;
        /**
          * to remove the space for the header
         */
        "noHeader": boolean;
        /**
          * To render Drawer without a close button
         */
        "nonClosable": boolean;
        /**
          * to define portal style of the Drawer header
         */
        "portal": boolean;
        /**
          * to set position of the drawer { top, right, bottom or left }
         */
        "position": string;
        /**
          * to prevent closing when the user clicked outside the Drawer
         */
        "preventAutoHide": boolean;
        /**
          * Shows the drawer.
         */
        "show": () => Promise<void>;
        /**
          * Toggles active state (show/hide)
         */
        "toggle": () => Promise<void>;
    }
    interface ChiDropdown {
        /**
          * To set the state of Dropdown
         */
        "active": boolean;
        /**
          * To animate the chevron of Dropdown
         */
        "animateChevron"?: boolean;
        /**
          * To provide the value of base-style button as trigger of the Dropdown
         */
        "button"?: string;
        /**
          * To set the color of the button. The value is directly passed to chi-button element if present  { primary, secondary, danger, dark, light }.
         */
        "color": string;
        /**
          * To enable the description of Dropdown menu item
         */
        "description"?: boolean;
        /**
          * to disable chi-button.
         */
        "disabled": boolean;
        /**
          * To render Dropdowns that span the full width of the parent container
         */
        "fluid": boolean;
        /**
          * To set weight of the button text { normal }.
         */
        "fontWeight"?: FontWeight;
        /**
          * To display an additional helper text message below the Dropdown
         */
        "helperMessage": string;
        /**
          * Hides the dropdown
         */
        "hide": () => Promise<void>;
        /**
          * To configure activation on hover of the Dropdown with base-style button trigger
         */
        "hover": boolean;
        /**
          * To provide the name of an icon to display as trigger of the Dropdown
         */
        "icon"?: string;
        /**
          * To provide icon tooltip message
         */
        "iconTooltipMessage"?: string;
        /**
          * Dropdown menu items
         */
        "items"?: DropdownMenuMultiItem[];
        /**
          * To set position of the Dropdown
         */
        "position": Placement;
        /**
          * To prevent hiding of the Dropdown when clicking outside its bounds
         */
        "preventAutoHide": boolean;
        /**
          * To prevent emitting the event chiDropdownItemSelected when an item is clicked
         */
        "preventItemSelected": boolean;
        /**
          * To provide selector of an external reference element
         */
        "reference": string;
        /**
          * Resets selection
         */
        "resetSelection": () => Promise<void>;
        /**
          * To retain the selection of the menu item and display it as the trigger
         */
        "retainSelection"?: boolean;
        /**
          * To apply select-like functionality and styles
         */
        "selectMode"?: DropdownSelectModes;
        /**
          * Shows the dropdown
         */
        "show": () => Promise<void>;
        /**
          * to set button size { xs, sm, md, lg, xl }.
         */
        "size": string;
        /**
          * To define state color of Dropdown
         */
        "state": ChiStates;
        /**
          * Toggles active state (show/hide)
         */
        "toggle": () => Promise<void>;
        "updatePopper": () => Promise<void>;
        /**
          * to render a button with uppercase text.
         */
        "uppercase": boolean;
        /**
          * To set the variant of the button. The value is directly passed to chi-button element if present { outline, flat }
         */
        "variant": string;
        /**
          * To provide number of items in the dropdown to be displayed, and apply scroll if needed
         */
        "visibleItems"?: number;
    }
    interface ChiExpansionPanel {
        /**
          * to set the panel style to bordered
         */
        "bordered": boolean;
        /**
          * to set the title of the panel
         */
        "epanelTitle": string;
        /**
          * to set expansion panel state. Possible values are: {'done', 'active', 'pending' (default value), and 'disabled'}
         */
        "state": string;
        /**
          * to render a state icon within the panel
         */
        "stateIcon": boolean;
        /**
          * to render a state tooltip
         */
        "stateIconTooltip": string;
        /**
          * to set a step number next to the title of the panel
         */
        "step": string;
    }
    interface ChiFormWrapper {
        /**
          * To set helper message
         */
        "helperMessage"?: string;
        /**
          * to set a lagend for all fields
         */
        "label"?: string;
        /**
          * to set layout { stacked, inline }.
         */
        "layout"?: FormWrapperLayouts;
        /**
          * to set options
         */
        "options": FormWrapperCheckbox[] | FormWrapperRadio[];
        /**
          * To set state success, warning or danger
         */
        "state"?: ChiStates;
        /**
          * to set form element type { checkbox, radio }.
         */
        "type": FormWrapperTypes;
    }
    interface ChiHelperMessage {
        /**
          * To define state color of message text
         */
        "state"?: ChiStates;
    }
    interface ChiIcon {
        /**
          * OPTIONAL. Color of the Icon.
         */
        "color"?: IconColors;
        /**
          * OPTIONAL classes
         */
        "extraClass"?: string;
        /**
          * Icon to be rendered.
         */
        "icon": string;
        /**
          * OPTIONAL. Size of the Icon.
         */
        "size": IconSizes;
    }
    interface ChiLabel {
        /**
          * To indicate ID of target form control web component.
         */
        "for": string;
        /**
          * To indicate if info icon should be displayed.
         */
        "infoIcon": boolean;
        /**
          * To provide message for info icon popover.
         */
        "infoIconMessage": string;
        /**
          * To indicate which form field is optional.
         */
        "optional": boolean;
        /**
          * To indicate which form field is required.
         */
        "required": boolean;
        /**
          * OPTIONAL. Size of the label. { xs, sm, md, lg, xl }.
         */
        "size": LabelSizes;
    }
    interface ChiLink {
        /**
          * To set hover state
         */
        "_hover": boolean;
        /**
          * to provide alternative text in case of icon links.
         */
        "alternativeText": string;
        /**
          * to render a link as a prominent call to action.
         */
        "cta": boolean;
        /**
          * to disable a link.
         */
        "disabled": boolean;
        /**
          * to prompt users to save a page or document instead of navigating to it.
         */
        "download": string;
        /**
          * to set a link's destination url.
         */
        "href": string;
        /**
          * to set the language of a link's destination url.
         */
        "hreflang": string;
        /**
          * to remove a link's underline on hover.
         */
        "noHoverUnderline": boolean;
        /**
          * to remove a link's underline.
         */
        "noUnderline": boolean;
        /**
          * to set the relationship between the current page and the linked page.
         */
        "rel": string;
        /**
          * to set size of a link { xs, sm, md, lg, xl }.
         */
        "size": string;
        /**
          * to set target of a link.
         */
        "target": string;
    }
    interface ChiMain {
        /**
          * To define app layout back link
         */
        "backlink": string;
        /**
          * to set a links destination url
         */
        "backlinkHref": string;
        /**
          * to set app layout format { base, no-margin, fixed-width }.
         */
        "format": AppLayoutFormats;
        /**
          * To define app layout header background
         */
        "headerBackground": boolean;
        /**
          * To define app layout subtitle
         */
        "subtitle": string;
    }
    interface ChiMarketingIcon {
        /**
          * OPTIONAL classes
         */
        "extraClass"?: string;
        /**
          * Icon to be rendered.
         */
        "icon": string;
        /**
          * OPTIONAL. Size of the Icon { xs, sm, md, lg }.
         */
        "size": MarketingIconSizes;
        /**
          * To render Marketing icon as filled or outline
         */
        "variant"?: ChiMarketingIconModes;
    }
    interface ChiNumberInput {
        /**
          * used to determine if component is disabled or not
         */
        "disabled"?: boolean;
        /**
          * used to set component's expanded mode
         */
        "expanded"?: boolean;
        /**
          * To display an additional helper text message below the Number Input
         */
        "helperMessage"?: string;
        /**
          * used to provide an input style like 'danger'. Mostly used for testing purposes
         */
        "inputstyle"?: ChiStates;
        /**
          * used to set a maximum allowed value
         */
        "max": number;
        /**
          * used to set a minimum allowed value
         */
        "min": number;
        /**
          * If set, component value won't be updated by itself.
         */
        "preventValueMutation": boolean;
        /**
          * used to determine if component is required or not
         */
        "required"?: boolean;
        /**
          * used to determine component's size
         */
        "size"?: string;
        /**
          * used to provide an input state like 'hover' or 'focus'. Mostly used for testing purposes
         */
        "state"?: string;
        /**
          * used to set a step to indicate the expected granularity
         */
        "step": number;
        /**
          * used to hold the value of the number input
         */
        "value": string;
    }
    interface ChiPagination {
        /**
          * To define aria label of pagination
         */
        "ariaLabel": string;
        /**
          * To define compact style of pagination
         */
        "compact": boolean;
        /**
          * To define current page of pagination
         */
        "currentPage": number;
        /**
          * To add First page / Last page icon buttons
         */
        "firstLast": boolean;
        /**
          * To render inverse styled pagination
         */
        "inverse": boolean;
        /**
          * To add jump to page text input
         */
        "pageJumper": boolean;
        /**
          * To allow use select number of items to show per page
         */
        "pageSize": boolean;
        /**
          * To define number of pages to render
         */
        "pages": number;
        /**
          * To show number of result items
         */
        "results": number;
        /**
          * To define size of pagination elements
         */
        "size": string;
    }
    interface ChiPhoneInput {
        /**
          * To set a default country as a two letter ISO country code
         */
        "defaultCountry": CountryCode;
        /**
          * To disable Phone input
         */
        "disabled": boolean;
        /**
          * To define dynamic value of Phone input
         */
        "dynamicValue": boolean;
        /**
          * To define two letter ISO country codes to exclude from Phone input dropdown
         */
        "excludedCountries"?: string;
        /**
          * To display an additional helper text message below the Phone input
         */
        "helperMessage"?: string;
        /**
          * To set only numbers in the Phone Input
         */
        "inputMask": boolean;
        /**
          * To define placeholder of Phone input
         */
        "placeholder"?: string;
        /**
          * To define size of Phone input
         */
        "size": TextInputSizes;
        /**
          * To define state color of Phone input
         */
        "state"?: ChiStates;
        /**
          * To define value of Phone input
         */
        "value": string;
    }
    interface ChiPicker {
        /**
          * To set helper message
         */
        "helperMessage"?: string;
        /**
          * To indicate if info icon should be displayed.
         */
        "infoIcon": boolean;
        /**
          * To provide message for info icon popover.
         */
        "infoIconMessage": string;
        /**
          * To set a legend for all fields
         */
        "label"?: string;
        /**
          * To indicate the form field is optional.
         */
        "optional": boolean;
        /**
          * To set options
         */
        "options": PickerOption[];
        /**
          * To set pill layout of options
         */
        "pill": boolean;
        /**
          * To indicate the form field is required.
         */
        "required": boolean;
        /**
          * To show checkbox or radio
         */
        "showInput"?: boolean;
        /**
          * Picker size { md, lg }.
         */
        "size": PickerSizes | PickerPillSizes;
        /**
          * To set state of helper message
         */
        "state"?: ChiStates1;
        /**
          * To define input type, radio (single selection) or checkbox (multiple selection)
         */
        "type": PickerInputTypes;
    }
    interface ChiPopover {
        /**
          * to open or close the popover
         */
        "active": boolean;
        /**
          * to add an arrow between the popover and the reference element
         */
        "arrow": boolean;
        /**
          * to add a close button to the popover
         */
        "closable": boolean;
        /**
          * to allow the user to manually change the position of the popover
         */
        "drag": boolean;
        /**
          * Hides the popover
         */
        "hide": () => Promise<void>;
        /**
          * To define modal style of the Popover
         */
        "modal": boolean;
        /**
          * To define popover title
         */
        "popoverTitle": string;
        /**
          * To define portal style of the Popover
         */
        "portal": boolean;
        /**
          * to set position of the popover { top, top-start, top-end, right, right-start, right-end, bottom, bottom-start, bottom-end, left, left-start, left-end }
         */
        "position": Placement;
        /**
          * Prevents closing the popover when clicking out of its bounds
         */
        "preventAutoHide": boolean;
        /**
          * CSS Selector to the reference Element. I.e. #id > p
         */
        "reference": string;
        /**
          * Shows the popover.
         */
        "show": () => Promise<void>;
        /**
          * Toggles active state (show/hide)
         */
        "toggle": () => Promise<void>;
        /**
          * To define popover variant { text, custom }
         */
        "variant": string;
    }
    interface ChiPrice {
        /**
          * To set the value of the Currency
         */
        "currency"?: string;
        /**
          * Price size { 'sm', 'md', 'lg' }
         */
        "size"?: PriceSizes;
        /**
          * To set the value of the Price
         */
        "value": string | number;
    }
    interface ChiProgress {
        /**
          * to set the max value of a progress bar.
         */
        "max": number;
        /**
          * to indicate a progress bar state { info, warning, danger, success }.
         */
        "state": string;
        /**
          * to set the value of a progress bar.
         */
        "value": number;
    }
    interface ChiRadioButton {
        /**
          * To render the radiobutton in checked state
         */
        "checked"?: boolean;
        /**
          * To disable the radiobutton
         */
        "disabled"?: boolean;
        /**
          * To provide radiobutton label as a string
         */
        "label": string;
        /**
          * To render the radiobutton input with a respective name attribute
         */
        "name": string;
        /**
          * To indicate the state
         */
        "state"?: ChiStates;
    }
    interface ChiSearchInput {
        /**
          * To define -hover, -focus statuses
         */
        "_status": string;
        /**
          * To disable Search input
         */
        "disabled": boolean;
        /**
          * To display an additional helper text message below the Text input
         */
        "helperMessage": string;
        /**
          * Hide the autocomplete menu list
         */
        "hideList": () => Promise<void>;
        /**
          * To set the list of items to be used in the dropdown menu in autocomplete mode
         */
        "menuItems": DropdownMenuItem[];
        /**
          * To set the mode to search input
         */
        "mode"?: SearchInputModes;
        /**
          * To define name of Search input
         */
        "name": string;
        /**
          * To define placeholder of Search input
         */
        "placeholder": string;
        /**
          * To disable Value attribute mutation
         */
        "preventValueMutation": boolean;
        /**
          * To render Search Input in readonly mode
         */
        "readonly": boolean;
        /**
          * Show the autocomplete menu list
         */
        "showList": () => Promise<void>;
        /**
          * To define size of Search input
         */
        "size"?: TextInputSizes;
        /**
          * To define state color of Search input
         */
        "state": ChiStates;
        /**
          * To define value of Search input
         */
        "value": string;
        /**
          * To provide number of items in the dropdown to be displayed, and apply scroll if needed
         */
        "visibleItems"?: number;
    }
    interface ChiSkeleton {
        /**
          * Size of the skeleton: { xs, sm, md, lg, xl }.
         */
        "size": SkeletonSizes;
        /**
          * Applies type classes to the skeleton.
         */
        "type": SkeletonTypes;
    }
    interface ChiSpinner {
        /**
          * to render spinners on dark or light backgrounds.
         */
        "backdrop": string;
        /**
          * to set color of a spinner { primary, dark, success, warning, danger, muted }.
         */
        "color": string;
        /**
          * to set size of a spinner { xs, sm, sm--2, sm--3, md, lg, xl, xxl }.
         */
        "size": string;
    }
    interface ChiSwitch {
        /**
          * used to check the toggle switch.
         */
        "checked": boolean;
        /**
          * used to disable the toggle switch.
         */
        "disabled": boolean;
        "extraClass": string;
        /**
          * used to disable the toggle labels.
         */
        "hideLabel": boolean;
        /**
          * to set a label for the toggle switch.
         */
        "label": string;
        /**
          * OPTIONAL. Size of the label. { xs, sm }.
         */
        "size": string;
    }
    interface ChiTabs {
        /**
          * To provide ID of the active tab
         */
        "activeTab": string;
        /**
          * To enable border
         */
        "border": boolean;
        /**
          * To add extra classes to ul
         */
        "extraClass": string;
        /**
          * To set inverse style
         */
        "inverse": boolean;
        /**
          * To configure See more Dropdown trigger message
         */
        "seeMoreMessage": string;
        /**
          * To set tab size { xs, sm, md, lg, xl }.
         */
        "size"?: TabsSizes;
        /**
          * To enable animation of the border
         */
        "slidingBorder": boolean;
        /**
          * To enable solid style of Tabs
         */
        "solid": boolean;
        /**
          * To provide the data for Tabs
         */
        "tabs": TabTrigger[];
        /**
          * To enable vertical variant of Tabs
         */
        "vertical": boolean;
    }
    interface ChiTags {
        /**
          * To define -hover, -focus statuses
         */
        "_status": string;
        /**
          * To define placeholder of Text input
         */
        "placeholder": string;
        /**
          * To add tags
         */
        "tags": Tag[];
    }
    interface ChiTextInput {
        /**
          * To define -hover, -focus statuses
         */
        "_status": string;
        /**
          * To show copy text icon
         */
        "copyText": boolean;
        /**
          * To disable Text input
         */
        "disabled": boolean;
        /**
          * Extra classes to apply to input
         */
        "extraClass": string;
        /**
          * To display an additional helper text message below the Text input
         */
        "helperMessage": string;
        /**
          * To add a left positioned icon
         */
        "iconLeft": string;
        /**
          * To define color of left icon
         */
        "iconLeftColor": IconColors;
        /**
          * To add a right positioned icon
         */
        "iconRight": string;
        /**
          * To define color of right icon
         */
        "iconRightColor": IconColors;
        /**
          * To define name of Text input
         */
        "name": string;
        /**
          * To define placeholder of Text input
         */
        "placeholder": string;
        /**
          * To disable Value attribute mutation
         */
        "preventValueMutation": boolean;
        /**
          * To prevent the Text input value from being changed
         */
        "readonly": boolean;
        /**
          * To define size of Text input
         */
        "size"?: TextInputSizes;
        /**
          * To render Text Input with Spinner
         */
        "spinner": boolean;
        /**
          * To define state color of Text input
         */
        "state": ChiStates;
        /**
          * To define type of Text input
         */
        "type": TextInputTypes;
        /**
          * To define value of Text input
         */
        "value": string;
    }
    interface ChiTextarea {
        /**
          * To define -hover, -focus statuses
         */
        "_status": '-hover' | '-focus';
        /**
          * To show copy text icon
         */
        "copyText": boolean;
        /**
          * To disable Textarea
         */
        "disabled": boolean;
        /**
          * To display an additional helper text message below the Textarea
         */
        "helperMessage": string;
        /**
          * To add a left positioned icon
         */
        "iconLeft": string;
        /**
          * To define color of left icon
         */
        "iconLeftColor": IconColors;
        /**
          * To add a right positioned icon
         */
        "iconRight": string;
        /**
          * To define color of right icon
         */
        "iconRightColor": IconColors;
        /**
          * To define name of Textarea
         */
        "name": string;
        /**
          * To define placeholder of Textarea
         */
        "placeholder": string;
        /**
          * To prevent Textarea value from being changed
         */
        "readonly": boolean;
        /**
          * To define size of Textarea
         */
        "size"?: TextInputSizes;
        /**
          * To define state color of Textarea
         */
        "state": ChiStates;
        /**
          * To read value of Textarea
         */
        "value": string;
    }
    interface ChiTime {
        /**
          * To disable specific hours
         */
        "_excludedHours"?: string;
        /**
          * To disable specific minutes
         */
        "_excludedMinutes"?: string;
        /**
          * To disable specific seconds
         */
        "_excludedSeconds"?: string;
        /**
          * Displaying seconds column
         */
        "displaySeconds": boolean;
        /**
          * To render Time Picker in 24 hours format
         */
        "format": TimePickerFormats;
        /**
          * Renders minutes in stepped format. Defaults to 15 min steps if no value is provided (see examples in docs).
         */
        "minutesStep"?: TimePickerTimeSteps;
        /**
          * Renders seconds in stepped format. Defaults to 10 seconds if no value is provided (see examples in docs).
         */
        "secondsStep"?: TimePickerTimeSteps;
        /**
          * @deprecated Use minutesStep and secondsStep instead. To render Minutes and Seconds columns in 15 min and 10 second steps.
         */
        "stepped"?: boolean;
        /**
          * Selected time in the time picker
         */
        "value": string;
    }
    interface ChiTimePicker {
        /**
          * To specify excluded hours.
         */
        "_excludedHours": string;
        /**
          * To specify excluded minutes.
         */
        "_excludedMinutes": string;
        /**
          * To specify excluded seconds.
         */
        "_excludedSeconds": string;
        /**
          * Indicates whether the time picker popover is open or closed
         */
        "active": boolean;
        /**
          * To disable chi-time-picker.
         */
        "disabled": boolean;
        /**
          * Displaying seconds column
         */
        "displaySeconds": boolean;
        /**
          * To define format of Time Picker.
         */
        "format": TimePickerFormats;
        /**
          * Gets time
         */
        "getTime": () => Promise<string>;
        /**
          * Renders minutes in stepped format. Defaults to 15 min steps if no value is provided (see examples in docs).
         */
        "minutesStep"?: TimePickerTimeSteps;
        /**
          * Renders seconds in stepped format. Defaults to 10 seconds if no value is provided (see examples in docs).
         */
        "secondsStep"?: TimePickerTimeSteps;
        /**
          * Sets time
         */
        "setTime": (time: string) => Promise<void>;
        /**
          * Selected time of Time Picker
         */
        "value": string;
    }
    interface ChiTooltip {
        /**
          * to set the background color of the tooltip { base, light }.
         */
        "color"?: TooltipColors;
        /**
          * Hides the tooltip
         */
        "hide": () => Promise<void>;
        /**
          * to set the tooltip message to display { string }.
         */
        "message": string;
        /**
          * to set position of the tooltip { top, right, bottom, left }.
         */
        "position"?: GeneralPositions;
        /**
          * Shows the tooltip
         */
        "show": () => Promise<void>;
        /**
          * to set the class chi-tooltip__wrapper
         */
        "wrapper"?: boolean;
    }
}
export interface ChiAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiAccordionElement;
}
export interface ChiAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiAlertElement;
}
export interface ChiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiButtonElement;
}
export interface ChiCarouselCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiCarouselElement;
}
export interface ChiCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiCheckboxElement;
}
export interface ChiCopyTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiCopyTextElement;
}
export interface ChiDateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiDateElement;
}
export interface ChiDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiDatePickerElement;
}
export interface ChiDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiDrawerElement;
}
export interface ChiDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiDropdownElement;
}
export interface ChiFormWrapperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiFormWrapperElement;
}
export interface ChiMainCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiMainElement;
}
export interface ChiNumberInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiNumberInputElement;
}
export interface ChiPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiPaginationElement;
}
export interface ChiPhoneInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiPhoneInputElement;
}
export interface ChiPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiPickerElement;
}
export interface ChiPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiPopoverElement;
}
export interface ChiRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiRadioButtonElement;
}
export interface ChiSearchInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiSearchInputElement;
}
export interface ChiSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiSwitchElement;
}
export interface ChiTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiTabsElement;
}
export interface ChiTagsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiTagsElement;
}
export interface ChiTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiTextInputElement;
}
export interface ChiTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiTextareaElement;
}
export interface ChiTimeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiTimeElement;
}
export interface ChiTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChiTooltipElement;
}
declare global {
    interface HTMLChiAccordionElementEventMap {
        "chiAccordionShow": AccordionItem;
        "chiAccordionHide": AccordionItem;
        "chiAccordionsChanged": AccordionItem[];
    }
    interface HTMLChiAccordionElement extends Components.ChiAccordion, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiAccordionElementEventMap>(type: K, listener: (this: HTMLChiAccordionElement, ev: ChiAccordionCustomEvent<HTMLChiAccordionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiAccordionElementEventMap>(type: K, listener: (this: HTMLChiAccordionElement, ev: ChiAccordionCustomEvent<HTMLChiAccordionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiAccordionElement: {
        prototype: HTMLChiAccordionElement;
        new (): HTMLChiAccordionElement;
    };
    interface HTMLChiAlertElementEventMap {
        "dismissAlert": void;
    }
    interface HTMLChiAlertElement extends Components.ChiAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiAlertElementEventMap>(type: K, listener: (this: HTMLChiAlertElement, ev: ChiAlertCustomEvent<HTMLChiAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiAlertElementEventMap>(type: K, listener: (this: HTMLChiAlertElement, ev: ChiAlertCustomEvent<HTMLChiAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiAlertElement: {
        prototype: HTMLChiAlertElement;
        new (): HTMLChiAlertElement;
    };
    interface HTMLChiBadgeElement extends Components.ChiBadge, HTMLStencilElement {
    }
    var HTMLChiBadgeElement: {
        prototype: HTMLChiBadgeElement;
        new (): HTMLChiBadgeElement;
    };
    interface HTMLChiBrandElement extends Components.ChiBrand, HTMLStencilElement {
    }
    var HTMLChiBrandElement: {
        prototype: HTMLChiBrandElement;
        new (): HTMLChiBrandElement;
    };
    interface HTMLChiButtonElementEventMap {
        "chiClick": any;
        "chiMouseEnter": any;
        "chiMouseLeave": any;
    }
    interface HTMLChiButtonElement extends Components.ChiButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiButtonElementEventMap>(type: K, listener: (this: HTMLChiButtonElement, ev: ChiButtonCustomEvent<HTMLChiButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiButtonElementEventMap>(type: K, listener: (this: HTMLChiButtonElement, ev: ChiButtonCustomEvent<HTMLChiButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiButtonElement: {
        prototype: HTMLChiButtonElement;
        new (): HTMLChiButtonElement;
    };
    interface HTMLChiCarouselElementEventMap {
        "chiViewChange": number;
    }
    interface HTMLChiCarouselElement extends Components.ChiCarousel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiCarouselElementEventMap>(type: K, listener: (this: HTMLChiCarouselElement, ev: ChiCarouselCustomEvent<HTMLChiCarouselElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiCarouselElementEventMap>(type: K, listener: (this: HTMLChiCarouselElement, ev: ChiCarouselCustomEvent<HTMLChiCarouselElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiCarouselElement: {
        prototype: HTMLChiCarouselElement;
        new (): HTMLChiCarouselElement;
    };
    interface HTMLChiCheckboxElementEventMap {
        "chiChange": string | boolean;
    }
    interface HTMLChiCheckboxElement extends Components.ChiCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiCheckboxElementEventMap>(type: K, listener: (this: HTMLChiCheckboxElement, ev: ChiCheckboxCustomEvent<HTMLChiCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiCheckboxElementEventMap>(type: K, listener: (this: HTMLChiCheckboxElement, ev: ChiCheckboxCustomEvent<HTMLChiCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiCheckboxElement: {
        prototype: HTMLChiCheckboxElement;
        new (): HTMLChiCheckboxElement;
    };
    interface HTMLChiCopyTextElementEventMap {
        "chiCopy": string;
    }
    interface HTMLChiCopyTextElement extends Components.ChiCopyText, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiCopyTextElementEventMap>(type: K, listener: (this: HTMLChiCopyTextElement, ev: ChiCopyTextCustomEvent<HTMLChiCopyTextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiCopyTextElementEventMap>(type: K, listener: (this: HTMLChiCopyTextElement, ev: ChiCopyTextCustomEvent<HTMLChiCopyTextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiCopyTextElement: {
        prototype: HTMLChiCopyTextElement;
        new (): HTMLChiCopyTextElement;
    };
    interface HTMLChiDateElementEventMap {
        "chiDateChange": any;
    }
    interface HTMLChiDateElement extends Components.ChiDate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiDateElementEventMap>(type: K, listener: (this: HTMLChiDateElement, ev: ChiDateCustomEvent<HTMLChiDateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiDateElementEventMap>(type: K, listener: (this: HTMLChiDateElement, ev: ChiDateCustomEvent<HTMLChiDateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiDateElement: {
        prototype: HTMLChiDateElement;
        new (): HTMLChiDateElement;
    };
    interface HTMLChiDatePickerElementEventMap {
        "chiDateChange": any;
        "chiDateInvalid": any;
    }
    interface HTMLChiDatePickerElement extends Components.ChiDatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiDatePickerElementEventMap>(type: K, listener: (this: HTMLChiDatePickerElement, ev: ChiDatePickerCustomEvent<HTMLChiDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiDatePickerElementEventMap>(type: K, listener: (this: HTMLChiDatePickerElement, ev: ChiDatePickerCustomEvent<HTMLChiDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiDatePickerElement: {
        prototype: HTMLChiDatePickerElement;
        new (): HTMLChiDatePickerElement;
    };
    interface HTMLChiDrawerElementEventMap {
        "chiDrawerShow": any;
        "chiDrawerHide": any;
        "chiDrawerShown": any;
        "chiDrawerHidden": any;
    }
    interface HTMLChiDrawerElement extends Components.ChiDrawer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiDrawerElementEventMap>(type: K, listener: (this: HTMLChiDrawerElement, ev: ChiDrawerCustomEvent<HTMLChiDrawerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiDrawerElementEventMap>(type: K, listener: (this: HTMLChiDrawerElement, ev: ChiDrawerCustomEvent<HTMLChiDrawerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiDrawerElement: {
        prototype: HTMLChiDrawerElement;
        new (): HTMLChiDrawerElement;
    };
    interface HTMLChiDropdownElementEventMap {
        "chiDropdownHide": any;
        "chiDropdownShow": any;
        "chiDropdownKeyDown": any;
        "chiDropdownItemSelected": any;
        "chiDropdownItemDeselected": any;
        "chiDropdownSelectionReset": any;
        "chiDropdownValueChanged": any;
    }
    interface HTMLChiDropdownElement extends Components.ChiDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiDropdownElementEventMap>(type: K, listener: (this: HTMLChiDropdownElement, ev: ChiDropdownCustomEvent<HTMLChiDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiDropdownElementEventMap>(type: K, listener: (this: HTMLChiDropdownElement, ev: ChiDropdownCustomEvent<HTMLChiDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiDropdownElement: {
        prototype: HTMLChiDropdownElement;
        new (): HTMLChiDropdownElement;
    };
    interface HTMLChiExpansionPanelElement extends Components.ChiExpansionPanel, HTMLStencilElement {
    }
    var HTMLChiExpansionPanelElement: {
        prototype: HTMLChiExpansionPanelElement;
        new (): HTMLChiExpansionPanelElement;
    };
    interface HTMLChiFormWrapperElementEventMap {
        "chiChange": FormWrapperCheckbox[] | FormWrapperRadio[];
    }
    interface HTMLChiFormWrapperElement extends Components.ChiFormWrapper, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiFormWrapperElementEventMap>(type: K, listener: (this: HTMLChiFormWrapperElement, ev: ChiFormWrapperCustomEvent<HTMLChiFormWrapperElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiFormWrapperElementEventMap>(type: K, listener: (this: HTMLChiFormWrapperElement, ev: ChiFormWrapperCustomEvent<HTMLChiFormWrapperElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiFormWrapperElement: {
        prototype: HTMLChiFormWrapperElement;
        new (): HTMLChiFormWrapperElement;
    };
    interface HTMLChiHelperMessageElement extends Components.ChiHelperMessage, HTMLStencilElement {
    }
    var HTMLChiHelperMessageElement: {
        prototype: HTMLChiHelperMessageElement;
        new (): HTMLChiHelperMessageElement;
    };
    interface HTMLChiIconElement extends Components.ChiIcon, HTMLStencilElement {
    }
    var HTMLChiIconElement: {
        prototype: HTMLChiIconElement;
        new (): HTMLChiIconElement;
    };
    interface HTMLChiLabelElement extends Components.ChiLabel, HTMLStencilElement {
    }
    var HTMLChiLabelElement: {
        prototype: HTMLChiLabelElement;
        new (): HTMLChiLabelElement;
    };
    interface HTMLChiLinkElement extends Components.ChiLink, HTMLStencilElement {
    }
    var HTMLChiLinkElement: {
        prototype: HTMLChiLinkElement;
        new (): HTMLChiLinkElement;
    };
    interface HTMLChiMainElementEventMap {
        "chiBacklinkClick": any;
    }
    interface HTMLChiMainElement extends Components.ChiMain, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiMainElementEventMap>(type: K, listener: (this: HTMLChiMainElement, ev: ChiMainCustomEvent<HTMLChiMainElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiMainElementEventMap>(type: K, listener: (this: HTMLChiMainElement, ev: ChiMainCustomEvent<HTMLChiMainElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiMainElement: {
        prototype: HTMLChiMainElement;
        new (): HTMLChiMainElement;
    };
    interface HTMLChiMarketingIconElement extends Components.ChiMarketingIcon, HTMLStencilElement {
    }
    var HTMLChiMarketingIconElement: {
        prototype: HTMLChiMarketingIconElement;
        new (): HTMLChiMarketingIconElement;
    };
    interface HTMLChiNumberInputElementEventMap {
        "chiChange": string;
        "chiInput": string;
        "chiNumberInvalid": void;
        "chiFocus": any;
        "chiBlur": any;
        "chiClick": any;
    }
    interface HTMLChiNumberInputElement extends Components.ChiNumberInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiNumberInputElementEventMap>(type: K, listener: (this: HTMLChiNumberInputElement, ev: ChiNumberInputCustomEvent<HTMLChiNumberInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiNumberInputElementEventMap>(type: K, listener: (this: HTMLChiNumberInputElement, ev: ChiNumberInputCustomEvent<HTMLChiNumberInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiNumberInputElement: {
        prototype: HTMLChiNumberInputElement;
        new (): HTMLChiNumberInputElement;
    };
    interface HTMLChiPaginationElementEventMap {
        "chiPageChange": string;
        "chiPageSizeChange": string;
    }
    interface HTMLChiPaginationElement extends Components.ChiPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiPaginationElementEventMap>(type: K, listener: (this: HTMLChiPaginationElement, ev: ChiPaginationCustomEvent<HTMLChiPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiPaginationElementEventMap>(type: K, listener: (this: HTMLChiPaginationElement, ev: ChiPaginationCustomEvent<HTMLChiPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiPaginationElement: {
        prototype: HTMLChiPaginationElement;
        new (): HTMLChiPaginationElement;
    };
    interface HTMLChiPhoneInputElementEventMap {
        "chiChange": string;
        "chiInput": string;
        "chiNumberInvalid": void;
        "chiCountrySelected": Country;
    }
    interface HTMLChiPhoneInputElement extends Components.ChiPhoneInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiPhoneInputElementEventMap>(type: K, listener: (this: HTMLChiPhoneInputElement, ev: ChiPhoneInputCustomEvent<HTMLChiPhoneInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiPhoneInputElementEventMap>(type: K, listener: (this: HTMLChiPhoneInputElement, ev: ChiPhoneInputCustomEvent<HTMLChiPhoneInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiPhoneInputElement: {
        prototype: HTMLChiPhoneInputElement;
        new (): HTMLChiPhoneInputElement;
    };
    interface HTMLChiPickerElementEventMap {
        "chiChange": PickerOption[];
    }
    interface HTMLChiPickerElement extends Components.ChiPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiPickerElementEventMap>(type: K, listener: (this: HTMLChiPickerElement, ev: ChiPickerCustomEvent<HTMLChiPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiPickerElementEventMap>(type: K, listener: (this: HTMLChiPickerElement, ev: ChiPickerCustomEvent<HTMLChiPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiPickerElement: {
        prototype: HTMLChiPickerElement;
        new (): HTMLChiPickerElement;
    };
    interface HTMLChiPopoverElementEventMap {
        "chiPopoverShow": any;
        "chiPopoverHide": any;
        "chiPopoverShown": any;
        "chiPopoverHidden": any;
    }
    interface HTMLChiPopoverElement extends Components.ChiPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiPopoverElementEventMap>(type: K, listener: (this: HTMLChiPopoverElement, ev: ChiPopoverCustomEvent<HTMLChiPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiPopoverElementEventMap>(type: K, listener: (this: HTMLChiPopoverElement, ev: ChiPopoverCustomEvent<HTMLChiPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiPopoverElement: {
        prototype: HTMLChiPopoverElement;
        new (): HTMLChiPopoverElement;
    };
    interface HTMLChiPriceElement extends Components.ChiPrice, HTMLStencilElement {
    }
    var HTMLChiPriceElement: {
        prototype: HTMLChiPriceElement;
        new (): HTMLChiPriceElement;
    };
    interface HTMLChiProgressElement extends Components.ChiProgress, HTMLStencilElement {
    }
    var HTMLChiProgressElement: {
        prototype: HTMLChiProgressElement;
        new (): HTMLChiProgressElement;
    };
    interface HTMLChiRadioButtonElementEventMap {
        "chiBlur": string | boolean;
        "chiChange": string | boolean;
        "chiFocus": string | boolean;
    }
    interface HTMLChiRadioButtonElement extends Components.ChiRadioButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiRadioButtonElementEventMap>(type: K, listener: (this: HTMLChiRadioButtonElement, ev: ChiRadioButtonCustomEvent<HTMLChiRadioButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiRadioButtonElementEventMap>(type: K, listener: (this: HTMLChiRadioButtonElement, ev: ChiRadioButtonCustomEvent<HTMLChiRadioButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiRadioButtonElement: {
        prototype: HTMLChiRadioButtonElement;
        new (): HTMLChiRadioButtonElement;
    };
    interface HTMLChiSearchInputElementEventMap {
        "chiChange": string;
        "chiInput": string;
        "chiFocus": any;
        "chiBlur": any;
        "chiClean": any;
        "chiSearch": string;
        "chiSearchInputItemSelected": DropdownMenuItem;
    }
    interface HTMLChiSearchInputElement extends Components.ChiSearchInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiSearchInputElementEventMap>(type: K, listener: (this: HTMLChiSearchInputElement, ev: ChiSearchInputCustomEvent<HTMLChiSearchInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiSearchInputElementEventMap>(type: K, listener: (this: HTMLChiSearchInputElement, ev: ChiSearchInputCustomEvent<HTMLChiSearchInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiSearchInputElement: {
        prototype: HTMLChiSearchInputElement;
        new (): HTMLChiSearchInputElement;
    };
    interface HTMLChiSkeletonElement extends Components.ChiSkeleton, HTMLStencilElement {
    }
    var HTMLChiSkeletonElement: {
        prototype: HTMLChiSkeletonElement;
        new (): HTMLChiSkeletonElement;
    };
    interface HTMLChiSpinnerElement extends Components.ChiSpinner, HTMLStencilElement {
    }
    var HTMLChiSpinnerElement: {
        prototype: HTMLChiSpinnerElement;
        new (): HTMLChiSpinnerElement;
    };
    interface HTMLChiSwitchElementEventMap {
        "toggle": any;
    }
    interface HTMLChiSwitchElement extends Components.ChiSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiSwitchElementEventMap>(type: K, listener: (this: HTMLChiSwitchElement, ev: ChiSwitchCustomEvent<HTMLChiSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiSwitchElementEventMap>(type: K, listener: (this: HTMLChiSwitchElement, ev: ChiSwitchCustomEvent<HTMLChiSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiSwitchElement: {
        prototype: HTMLChiSwitchElement;
        new (): HTMLChiSwitchElement;
    };
    interface HTMLChiTabsElementEventMap {
        "chiTabChange": TabTrigger;
    }
    interface HTMLChiTabsElement extends Components.ChiTabs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiTabsElementEventMap>(type: K, listener: (this: HTMLChiTabsElement, ev: ChiTabsCustomEvent<HTMLChiTabsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiTabsElementEventMap>(type: K, listener: (this: HTMLChiTabsElement, ev: ChiTabsCustomEvent<HTMLChiTabsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiTabsElement: {
        prototype: HTMLChiTabsElement;
        new (): HTMLChiTabsElement;
    };
    interface HTMLChiTagsElementEventMap {
        "chiChange": Tag[];
    }
    interface HTMLChiTagsElement extends Components.ChiTags, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiTagsElementEventMap>(type: K, listener: (this: HTMLChiTagsElement, ev: ChiTagsCustomEvent<HTMLChiTagsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiTagsElementEventMap>(type: K, listener: (this: HTMLChiTagsElement, ev: ChiTagsCustomEvent<HTMLChiTagsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiTagsElement: {
        prototype: HTMLChiTagsElement;
        new (): HTMLChiTagsElement;
    };
    interface HTMLChiTextInputElementEventMap {
        "chiChange": string;
        "chiInput": string;
        "chiFocus": any;
        "chiBlur": any;
    }
    interface HTMLChiTextInputElement extends Components.ChiTextInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiTextInputElementEventMap>(type: K, listener: (this: HTMLChiTextInputElement, ev: ChiTextInputCustomEvent<HTMLChiTextInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiTextInputElementEventMap>(type: K, listener: (this: HTMLChiTextInputElement, ev: ChiTextInputCustomEvent<HTMLChiTextInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiTextInputElement: {
        prototype: HTMLChiTextInputElement;
        new (): HTMLChiTextInputElement;
    };
    interface HTMLChiTextareaElementEventMap {
        "chiChange": string;
        "chiInput": string;
        "chiFocus": any;
        "chiBlur": any;
    }
    interface HTMLChiTextareaElement extends Components.ChiTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiTextareaElementEventMap>(type: K, listener: (this: HTMLChiTextareaElement, ev: ChiTextareaCustomEvent<HTMLChiTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiTextareaElementEventMap>(type: K, listener: (this: HTMLChiTextareaElement, ev: ChiTextareaCustomEvent<HTMLChiTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiTextareaElement: {
        prototype: HTMLChiTextareaElement;
        new (): HTMLChiTextareaElement;
    };
    interface HTMLChiTimeElementEventMap {
        "chiTimeChange": any;
    }
    interface HTMLChiTimeElement extends Components.ChiTime, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiTimeElementEventMap>(type: K, listener: (this: HTMLChiTimeElement, ev: ChiTimeCustomEvent<HTMLChiTimeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiTimeElementEventMap>(type: K, listener: (this: HTMLChiTimeElement, ev: ChiTimeCustomEvent<HTMLChiTimeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiTimeElement: {
        prototype: HTMLChiTimeElement;
        new (): HTMLChiTimeElement;
    };
    interface HTMLChiTimePickerElement extends Components.ChiTimePicker, HTMLStencilElement {
    }
    var HTMLChiTimePickerElement: {
        prototype: HTMLChiTimePickerElement;
        new (): HTMLChiTimePickerElement;
    };
    interface HTMLChiTooltipElementEventMap {
        "chiTooltipShow": void;
        "chiTooltipHide": void;
    }
    interface HTMLChiTooltipElement extends Components.ChiTooltip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChiTooltipElementEventMap>(type: K, listener: (this: HTMLChiTooltipElement, ev: ChiTooltipCustomEvent<HTMLChiTooltipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChiTooltipElementEventMap>(type: K, listener: (this: HTMLChiTooltipElement, ev: ChiTooltipCustomEvent<HTMLChiTooltipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChiTooltipElement: {
        prototype: HTMLChiTooltipElement;
        new (): HTMLChiTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "chi-accordion": HTMLChiAccordionElement;
        "chi-alert": HTMLChiAlertElement;
        "chi-badge": HTMLChiBadgeElement;
        "chi-brand": HTMLChiBrandElement;
        "chi-button": HTMLChiButtonElement;
        "chi-carousel": HTMLChiCarouselElement;
        "chi-checkbox": HTMLChiCheckboxElement;
        "chi-copy-text": HTMLChiCopyTextElement;
        "chi-date": HTMLChiDateElement;
        "chi-date-picker": HTMLChiDatePickerElement;
        "chi-drawer": HTMLChiDrawerElement;
        "chi-dropdown": HTMLChiDropdownElement;
        "chi-expansion-panel": HTMLChiExpansionPanelElement;
        "chi-form-wrapper": HTMLChiFormWrapperElement;
        "chi-helper-message": HTMLChiHelperMessageElement;
        "chi-icon": HTMLChiIconElement;
        "chi-label": HTMLChiLabelElement;
        "chi-link": HTMLChiLinkElement;
        "chi-main": HTMLChiMainElement;
        "chi-marketing-icon": HTMLChiMarketingIconElement;
        "chi-number-input": HTMLChiNumberInputElement;
        "chi-pagination": HTMLChiPaginationElement;
        "chi-phone-input": HTMLChiPhoneInputElement;
        "chi-picker": HTMLChiPickerElement;
        "chi-popover": HTMLChiPopoverElement;
        "chi-price": HTMLChiPriceElement;
        "chi-progress": HTMLChiProgressElement;
        "chi-radio-button": HTMLChiRadioButtonElement;
        "chi-search-input": HTMLChiSearchInputElement;
        "chi-skeleton": HTMLChiSkeletonElement;
        "chi-spinner": HTMLChiSpinnerElement;
        "chi-switch": HTMLChiSwitchElement;
        "chi-tabs": HTMLChiTabsElement;
        "chi-tags": HTMLChiTagsElement;
        "chi-text-input": HTMLChiTextInputElement;
        "chi-textarea": HTMLChiTextareaElement;
        "chi-time": HTMLChiTimeElement;
        "chi-time-picker": HTMLChiTimePickerElement;
        "chi-tooltip": HTMLChiTooltipElement;
    }
}
declare namespace LocalJSX {
    interface ChiAccordion {
        /**
          * To provide data for accordions
         */
        "accordions"?: AccordionItem[];
        /**
          * to set card layout
         */
        "card"?: boolean;
        /**
          * Custom event when accordion is hidden from accordion trigger
         */
        "onChiAccordionHide"?: (event: ChiAccordionCustomEvent<AccordionItem>) => void;
        /**
          * Custom event when accordion is shown from accordion trigger
         */
        "onChiAccordionShow"?: (event: ChiAccordionCustomEvent<AccordionItem>) => void;
        /**
          * Custom event when accordions change. Emits all accordions in accordion.
         */
        "onChiAccordionsChanged"?: (event: ChiAccordionCustomEvent<AccordionItem[]>) => void;
        /**
          * to set portal layout (temporary)
         */
        "portal"?: boolean;
        /**
          * to set accordion size { sm, md, lg, xl }. Size sm is not supported in Card
         */
        "size"?: AccordionSizes;
        /**
          * to truncate long accordion titles
         */
        "truncated"?: boolean;
    }
    interface ChiAlert {
        /**
          * To define alert title
         */
        "alertTitle"?: string;
        /**
          * to center the alert content.
         */
        "center"?: boolean;
        /**
          * to make the alert dismissible.
         */
        "closable"?: boolean;
        /**
          * to set alert state.
         */
        "color"?: AlertColors;
        /**
          * to set the alert expiration time (seconds).
         */
        "expirationTime"?: number;
        /**
          * to avoid the necessity of adding <chi-icon> to alert markup.
         */
        "icon"?: string;
        /**
          * to hide the alert when dismissed.
         */
        "mutable"?: boolean;
        /**
          * custom event when trying to dismiss an alert.
         */
        "onDismissAlert"?: (event: ChiAlertCustomEvent<void>) => void;
        /**
          * to set alert size { sm, md, lg }.
         */
        "size"?: string;
        /**
          * To render alert with Spinner
         */
        "spinner"?: boolean;
        /**
          * to set alert type { bubble, banner, toast }.
         */
        "type"?: string;
    }
    interface ChiBadge {
        /**
          * to set color of a badge { primary, success, warning, danger, dark, muted, secondary, light, accent-1, accent-2, accent-3, accent-4, accent-5 }.
         */
        "color"?: string;
        /**
          * to set size of a badge { xs or sm }.
         */
        "size"?: string;
        /**
          * to transform the badge text { uppercase, lowercase, capitalize }.
         */
        "textTransform"?: string;
        /**
          * to set weight of the badge text { normal, semi-bold, bold }.
         */
        "textWeight"?: string;
        /**
          * to set variant of a badge { outline, flat }.
         */
        "variant"?: string;
    }
    interface ChiBrand {
        /**
          * to set brand color { black, white, inverse }.
         */
        "color"?: string;
        /**
          * to set logo of brand { lumen, centurylink, brightspeed, colt }.
         */
        "logo"?: string;
        /**
          * to set size of brand.
         */
        "size"?: string;
        /**
          * to set brand type { black, white, inverse }.
         */
        "type"?: string;
    }
    interface ChiButton {
        /**
          * to provide alternative text in case of icon buttons.
         */
        "alternativeText"?: string;
        /**
          * to center align the text.
         */
        "center"?: boolean;
        /**
          * to set button color { primary, secondary, danger, dark, light }.
         */
        "color"?: string;
        /**
          * to disable chi-button.
         */
        "disabled"?: boolean;
        "extraClass"?: string;
        /**
          * to render a button to fill the parent space.
         */
        "fluid"?: boolean;
        /**
          * to emit a custom event when button is clicked.
         */
        "onChiClick"?: (event: ChiButtonCustomEvent<any>) => void;
        /**
          * to emit a custom event when the mouse pointer is moved onto the button.
         */
        "onChiMouseEnter"?: (event: ChiButtonCustomEvent<any>) => void;
        /**
          * to emit a custom event when the mouse pointer is moved out of the button.
         */
        "onChiMouseLeave"?: (event: ChiButtonCustomEvent<any>) => void;
        /**
          * to set button size { xs, sm, md, lg, xl }.
         */
        "size"?: string;
        /**
          * to set button type { float, close, icon }.
         */
        "type"?: string;
        /**
          * to render a button with uppercase text.
         */
        "uppercase"?: boolean;
        /**
          * to set variant of a button { outline, flat }.
         */
        "variant"?: string;
    }
    interface ChiCarousel {
        /**
          * To set the autoplay for the carousel
         */
        "autoplay"?: boolean;
        /**
          * To render Carousel with dot controllers
         */
        "dots"?: boolean;
        /**
          * To set the interval for the autoplay
         */
        "interval"?: number;
        /**
          * To render Carousel without Button Controllers
         */
        "noButtonControllers"?: boolean;
        /**
          * Triggered when the user navigates to another view
         */
        "onChiViewChange"?: (event: ChiCarouselCustomEvent<number>) => void;
        /**
          * To render Carousel with pagination indicators
         */
        "pagination"?: boolean;
        /**
          * To render Carousel with a single item per view
         */
        "single"?: boolean;
    }
    interface ChiCheckbox {
        /**
          * To define -hover, -focus statuses
         */
        "_status"?: string;
        /**
          * To render the checkbox in checked state
         */
        "checked"?: boolean;
        /**
          * To disable the checkbox
         */
        "disabled"?: boolean;
        /**
          * To add indeterminate state to checkbox
         */
        "indeterminate"?: boolean;
        /**
          * To indicate if info icon should be displayed.
         */
        "infoIcon"?: boolean;
        /**
          * To provide message for info icon popover.
         */
        "infoIconMessage"?: string;
        /**
          * To provide checkbox label as a string
         */
        "label"?: string;
        /**
          * To render the checkbox input with a respective name attribute
         */
        "name"?: string;
        /**
          * Triggered when the user selects or deselects the checkbox
         */
        "onChiChange"?: (event: ChiCheckboxCustomEvent<string | boolean>) => void;
        /**
          * To indicate which form field is required
         */
        "required"?: boolean;
        /**
          * To indicate the state
         */
        "state"?: ChiStates;
    }
    interface ChiCopyText {
        /**
          * Color of the Icon.
         */
        "color"?: IconColors;
        /**
          * To disable the copy button
         */
        "disabled"?: boolean;
        /**
          * Triggered when the user clicks on copy
         */
        "onChiCopy"?: (event: ChiCopyTextCustomEvent<string>) => void;
        /**
          * Size of the icon
         */
        "size"?: IconSizes;
        /**
          * Text to be copied to clipboard
         */
        "text": string;
    }
    interface ChiDate {
        /**
          * To specify which dates to disable
         */
        "excludedDates"?: string;
        /**
          * To specify which days of week to disable
         */
        "excludedWeekdays"?: string;
        /**
          * Date format used in the attributes and how it will be shown to the user.
         */
        "format"?: DateFormats;
        /**
          * Locale to use in date picker
         */
        "locale"?: DataLocales;
        /**
          * Maximum eligible date
         */
        "max"?: string;
        /**
          * Minimum eligible date
         */
        "min"?: string;
        /**
          * To allow the user to select multiple dates
         */
        "multiple"?: boolean;
        /**
          * Date change value event
         */
        "onChiDateChange"?: (event: ChiDateCustomEvent<any>) => void;
        /**
          * Selected date in the date picker
         */
        "value"?: string;
    }
    interface ChiDatePicker {
        /**
          * Indicates whether the dropdown calendar is open or closed
         */
        "active"?: boolean;
        /**
          * to disable chi-date-picker.
         */
        "disabled"?: boolean;
        /**
          * Displaying seconds column
         */
        "displaySeconds"?: boolean;
        /**
          * To specify which dates to disable
         */
        "excludedDates"?: string;
        /**
          * To specify which days of week to disable
         */
        "excludedWeekdays"?: string;
        /**
          * Date format used in the attributes and how it will be shown to the user.
         */
        "format"?: DateFormats;
        /**
          * To display an additional helper text message below the Date Picker
         */
        "helperMessage"?: string;
        /**
          * Locale to use in date picker
         */
        "locale"?: DataLocales;
        /**
          * Maximum eligible date
         */
        "max"?: string;
        /**
          * Minimum eligible date
         */
        "min"?: string;
        /**
          * Renders minutes in stepped format. Defaults to 15 min steps if no value is provided (see examples in docs).
         */
        "minutesStep"?: TimePickerTimeSteps;
        /**
          * To render Date Picker with Time Picker
         */
        "mode"?: DatePickerModes;
        /**
          * To allow the user to select multiple dates
         */
        "multiple"?: boolean;
        /**
          * Date change value event
         */
        "onChiDateChange"?: (event: ChiDatePickerCustomEvent<any>) => void;
        /**
          * Triggered if the date value introduced by the user is invalid
         */
        "onChiDateInvalid"?: (event: ChiDatePickerCustomEvent<any>) => void;
        /**
          * To define state color of Date Picker
         */
        "state"?: ChiStates;
        /**
          * To specify format for the Time Picker. Applicable only if mode is equal to 'datetime'
         */
        "timeFormat"?: TimePickerFormats;
        /**
          * Selected date in the date picker
         */
        "value"?: string;
    }
    interface ChiDrawer {
        /**
          * to open or close the drawer
         */
        "active"?: boolean;
        /**
          * to add a backdrop behind the drawer, which covers the viewport
         */
        "backdrop"?: string;
        /**
          * To define drawer title. Not compatible with noHeader
         */
        "drawerTitle"?: string;
        /**
          * to remove the space for the header
         */
        "noHeader"?: boolean;
        /**
          * To render Drawer without a close button
         */
        "nonClosable"?: boolean;
        /**
          * Drawer has been hidden to the user. The animation has completed.
         */
        "onChiDrawerHidden"?: (event: ChiDrawerCustomEvent<any>) => void;
        /**
          * Drawer hide method has executed, but the closing animation has not started yet
         */
        "onChiDrawerHide"?: (event: ChiDrawerCustomEvent<any>) => void;
        /**
          * Drawer show method has executed, but the showing animation has not started yet
         */
        "onChiDrawerShow"?: (event: ChiDrawerCustomEvent<any>) => void;
        /**
          * Drawer has been shown to the user and is fully visible. The animation has completed.
         */
        "onChiDrawerShown"?: (event: ChiDrawerCustomEvent<any>) => void;
        /**
          * to define portal style of the Drawer header
         */
        "portal"?: boolean;
        /**
          * to set position of the drawer { top, right, bottom or left }
         */
        "position"?: string;
        /**
          * to prevent closing when the user clicked outside the Drawer
         */
        "preventAutoHide"?: boolean;
    }
    interface ChiDropdown {
        /**
          * To set the state of Dropdown
         */
        "active"?: boolean;
        /**
          * To animate the chevron of Dropdown
         */
        "animateChevron"?: boolean;
        /**
          * To provide the value of base-style button as trigger of the Dropdown
         */
        "button"?: string;
        /**
          * To set the color of the button. The value is directly passed to chi-button element if present  { primary, secondary, danger, dark, light }.
         */
        "color"?: string;
        /**
          * To enable the description of Dropdown menu item
         */
        "description"?: boolean;
        /**
          * to disable chi-button.
         */
        "disabled"?: boolean;
        /**
          * To render Dropdowns that span the full width of the parent container
         */
        "fluid"?: boolean;
        /**
          * To set weight of the button text { normal }.
         */
        "fontWeight"?: FontWeight;
        /**
          * To display an additional helper text message below the Dropdown
         */
        "helperMessage"?: string;
        /**
          * To configure activation on hover of the Dropdown with base-style button trigger
         */
        "hover"?: boolean;
        /**
          * To provide the name of an icon to display as trigger of the Dropdown
         */
        "icon"?: string;
        /**
          * To provide icon tooltip message
         */
        "iconTooltipMessage"?: string;
        /**
          * Dropdown menu items
         */
        "items"?: DropdownMenuMultiItem[];
        /**
          * Triggered when hiding the Dropdown
         */
        "onChiDropdownHide"?: (event: ChiDropdownCustomEvent<any>) => void;
        /**
          * Triggered when an item is deselected in the dropdown menu
         */
        "onChiDropdownItemDeselected"?: (event: ChiDropdownCustomEvent<any>) => void;
        /**
          * Triggered when select an item in the dropdown menu
         */
        "onChiDropdownItemSelected"?: (event: ChiDropdownCustomEvent<any>) => void;
        /**
          * Triggered when press key to up/down the Dropdown menu items
         */
        "onChiDropdownKeyDown"?: (event: ChiDropdownCustomEvent<any>) => void;
        /**
          * Triggered when Dropdown's selection is reset
         */
        "onChiDropdownSelectionReset"?: (event: ChiDropdownCustomEvent<any>) => void;
        /**
          * Triggered when showing the Dropdown
         */
        "onChiDropdownShow"?: (event: ChiDropdownCustomEvent<any>) => void;
        /**
          * Triggered when selected items have changed in the dropdown menu. Payload is an array of strings.
         */
        "onChiDropdownValueChanged"?: (event: ChiDropdownCustomEvent<any>) => void;
        /**
          * To set position of the Dropdown
         */
        "position"?: Placement;
        /**
          * To prevent hiding of the Dropdown when clicking outside its bounds
         */
        "preventAutoHide"?: boolean;
        /**
          * To prevent emitting the event chiDropdownItemSelected when an item is clicked
         */
        "preventItemSelected"?: boolean;
        /**
          * To provide selector of an external reference element
         */
        "reference"?: string;
        /**
          * To retain the selection of the menu item and display it as the trigger
         */
        "retainSelection"?: boolean;
        /**
          * To apply select-like functionality and styles
         */
        "selectMode"?: DropdownSelectModes;
        /**
          * to set button size { xs, sm, md, lg, xl }.
         */
        "size"?: string;
        /**
          * To define state color of Dropdown
         */
        "state"?: ChiStates;
        /**
          * to render a button with uppercase text.
         */
        "uppercase"?: boolean;
        /**
          * To set the variant of the button. The value is directly passed to chi-button element if present { outline, flat }
         */
        "variant"?: string;
        /**
          * To provide number of items in the dropdown to be displayed, and apply scroll if needed
         */
        "visibleItems"?: number;
    }
    interface ChiExpansionPanel {
        /**
          * to set the panel style to bordered
         */
        "bordered"?: boolean;
        /**
          * to set the title of the panel
         */
        "epanelTitle"?: string;
        /**
          * to set expansion panel state. Possible values are: {'done', 'active', 'pending' (default value), and 'disabled'}
         */
        "state"?: string;
        /**
          * to render a state icon within the panel
         */
        "stateIcon"?: boolean;
        /**
          * to render a state tooltip
         */
        "stateIconTooltip"?: string;
        /**
          * to set a step number next to the title of the panel
         */
        "step"?: string;
    }
    interface ChiFormWrapper {
        /**
          * To set helper message
         */
        "helperMessage"?: string;
        /**
          * to set a lagend for all fields
         */
        "label"?: string;
        /**
          * to set layout { stacked, inline }.
         */
        "layout"?: FormWrapperLayouts;
        "onChiChange"?: (event: ChiFormWrapperCustomEvent<FormWrapperCheckbox[] | FormWrapperRadio[]>) => void;
        /**
          * to set options
         */
        "options": FormWrapperCheckbox[] | FormWrapperRadio[];
        /**
          * To set state success, warning or danger
         */
        "state"?: ChiStates;
        /**
          * to set form element type { checkbox, radio }.
         */
        "type": FormWrapperTypes;
    }
    interface ChiHelperMessage {
        /**
          * To define state color of message text
         */
        "state"?: ChiStates;
    }
    interface ChiIcon {
        /**
          * OPTIONAL. Color of the Icon.
         */
        "color"?: IconColors;
        /**
          * OPTIONAL classes
         */
        "extraClass"?: string;
        /**
          * Icon to be rendered.
         */
        "icon"?: string;
        /**
          * OPTIONAL. Size of the Icon.
         */
        "size"?: IconSizes;
    }
    interface ChiLabel {
        /**
          * To indicate ID of target form control web component.
         */
        "for"?: string;
        /**
          * To indicate if info icon should be displayed.
         */
        "infoIcon"?: boolean;
        /**
          * To provide message for info icon popover.
         */
        "infoIconMessage"?: string;
        /**
          * To indicate which form field is optional.
         */
        "optional"?: boolean;
        /**
          * To indicate which form field is required.
         */
        "required"?: boolean;
        /**
          * OPTIONAL. Size of the label. { xs, sm, md, lg, xl }.
         */
        "size"?: LabelSizes;
    }
    interface ChiLink {
        /**
          * To set hover state
         */
        "_hover"?: boolean;
        /**
          * to provide alternative text in case of icon links.
         */
        "alternativeText"?: string;
        /**
          * to render a link as a prominent call to action.
         */
        "cta"?: boolean;
        /**
          * to disable a link.
         */
        "disabled"?: boolean;
        /**
          * to prompt users to save a page or document instead of navigating to it.
         */
        "download"?: string;
        /**
          * to set a link's destination url.
         */
        "href"?: string;
        /**
          * to set the language of a link's destination url.
         */
        "hreflang"?: string;
        /**
          * to remove a link's underline on hover.
         */
        "noHoverUnderline"?: boolean;
        /**
          * to remove a link's underline.
         */
        "noUnderline"?: boolean;
        /**
          * to set the relationship between the current page and the linked page.
         */
        "rel"?: string;
        /**
          * to set size of a link { xs, sm, md, lg, xl }.
         */
        "size"?: string;
        /**
          * to set target of a link.
         */
        "target"?: string;
    }
    interface ChiMain {
        /**
          * To define app layout back link
         */
        "backlink"?: string;
        /**
          * to set a links destination url
         */
        "backlinkHref"?: string;
        /**
          * to set app layout format { base, no-margin, fixed-width }.
         */
        "format"?: AppLayoutFormats;
        /**
          * To define app layout header background
         */
        "headerBackground"?: boolean;
        /**
          * The user has clicked the backlink
         */
        "onChiBacklinkClick"?: (event: ChiMainCustomEvent<any>) => void;
        /**
          * To define app layout subtitle
         */
        "subtitle"?: string;
    }
    interface ChiMarketingIcon {
        /**
          * OPTIONAL classes
         */
        "extraClass"?: string;
        /**
          * Icon to be rendered.
         */
        "icon"?: string;
        /**
          * OPTIONAL. Size of the Icon { xs, sm, md, lg }.
         */
        "size"?: MarketingIconSizes;
        /**
          * To render Marketing icon as filled or outline
         */
        "variant"?: ChiMarketingIconModes;
    }
    interface ChiNumberInput {
        /**
          * used to determine if component is disabled or not
         */
        "disabled"?: boolean;
        /**
          * used to set component's expanded mode
         */
        "expanded"?: boolean;
        /**
          * To display an additional helper text message below the Number Input
         */
        "helperMessage"?: string;
        /**
          * used to provide an input style like 'danger'. Mostly used for testing purposes
         */
        "inputstyle"?: ChiStates;
        /**
          * used to set a maximum allowed value
         */
        "max"?: number;
        /**
          * used to set a minimum allowed value
         */
        "min"?: number;
        /**
          * Triggered when the element has lost focus.
         */
        "onChiBlur"?: (event: ChiNumberInputCustomEvent<any>) => void;
        /**
          * Triggered when an alteration to the element's value is committed by the user
         */
        "onChiChange"?: (event: ChiNumberInputCustomEvent<string>) => void;
        /**
          * Triggered when the user clicks on increment/decrement button.
         */
        "onChiClick"?: (event: ChiNumberInputCustomEvent<any>) => void;
        /**
          * Triggered when the user sets focus on the element.
         */
        "onChiFocus"?: (event: ChiNumberInputCustomEvent<any>) => void;
        /**
          * Triggered when the user changed the element's value but did not commit the change yet
         */
        "onChiInput"?: (event: ChiNumberInputCustomEvent<string>) => void;
        /**
          * Triggered when the element's value committed by the user is an invalid number
         */
        "onChiNumberInvalid"?: (event: ChiNumberInputCustomEvent<void>) => void;
        /**
          * If set, component value won't be updated by itself.
         */
        "preventValueMutation"?: boolean;
        /**
          * used to determine if component is required or not
         */
        "required"?: boolean;
        /**
          * used to determine component's size
         */
        "size"?: string;
        /**
          * used to provide an input state like 'hover' or 'focus'. Mostly used for testing purposes
         */
        "state"?: string;
        /**
          * used to set a step to indicate the expected granularity
         */
        "step"?: number;
        /**
          * used to hold the value of the number input
         */
        "value"?: string;
    }
    interface ChiPagination {
        /**
          * To define aria label of pagination
         */
        "ariaLabel"?: string;
        /**
          * To define compact style of pagination
         */
        "compact"?: boolean;
        /**
          * To define current page of pagination
         */
        "currentPage"?: number;
        /**
          * To add First page / Last page icon buttons
         */
        "firstLast"?: boolean;
        /**
          * To render inverse styled pagination
         */
        "inverse"?: boolean;
        /**
          * Triggered when the user navigates to another page by clicking pagination item buttons or changing value of Page Jumper input
         */
        "onChiPageChange"?: (event: ChiPaginationCustomEvent<string>) => void;
        /**
          * Triggered when the user changes items per page value
         */
        "onChiPageSizeChange"?: (event: ChiPaginationCustomEvent<string>) => void;
        /**
          * To add jump to page text input
         */
        "pageJumper"?: boolean;
        /**
          * To allow use select number of items to show per page
         */
        "pageSize"?: boolean;
        /**
          * To define number of pages to render
         */
        "pages"?: number;
        /**
          * To show number of result items
         */
        "results"?: number;
        /**
          * To define size of pagination elements
         */
        "size"?: string;
    }
    interface ChiPhoneInput {
        /**
          * To set a default country as a two letter ISO country code
         */
        "defaultCountry"?: CountryCode;
        /**
          * To disable Phone input
         */
        "disabled"?: boolean;
        /**
          * To define dynamic value of Phone input
         */
        "dynamicValue"?: boolean;
        /**
          * To define two letter ISO country codes to exclude from Phone input dropdown
         */
        "excludedCountries"?: string;
        /**
          * To display an additional helper text message below the Phone input
         */
        "helperMessage"?: string;
        /**
          * To set only numbers in the Phone Input
         */
        "inputMask"?: boolean;
        /**
          * Triggered when an alteration to the element's value is committed by the user
         */
        "onChiChange"?: (event: ChiPhoneInputCustomEvent<string>) => void;
        /**
          * Triggered when the user selected a country in the dropdown
         */
        "onChiCountrySelected"?: (event: ChiPhoneInputCustomEvent<Country>) => void;
        /**
          * Triggered when the user changed the element's value but did not commit the change yet
         */
        "onChiInput"?: (event: ChiPhoneInputCustomEvent<string>) => void;
        /**
          * Triggered when the element's value committed by the user is an invalid phone number for the selected prefix
         */
        "onChiNumberInvalid"?: (event: ChiPhoneInputCustomEvent<void>) => void;
        /**
          * To define placeholder of Phone input
         */
        "placeholder"?: string;
        /**
          * To define size of Phone input
         */
        "size"?: TextInputSizes;
        /**
          * To define state color of Phone input
         */
        "state"?: ChiStates;
        /**
          * To define value of Phone input
         */
        "value"?: string;
    }
    interface ChiPicker {
        /**
          * To set helper message
         */
        "helperMessage"?: string;
        /**
          * To indicate if info icon should be displayed.
         */
        "infoIcon"?: boolean;
        /**
          * To provide message for info icon popover.
         */
        "infoIconMessage"?: string;
        /**
          * To set a legend for all fields
         */
        "label"?: string;
        /**
          * Emitted when any option is selected or unselected
         */
        "onChiChange"?: (event: ChiPickerCustomEvent<PickerOption[]>) => void;
        /**
          * To indicate the form field is optional.
         */
        "optional"?: boolean;
        /**
          * To set options
         */
        "options": PickerOption[];
        /**
          * To set pill layout of options
         */
        "pill"?: boolean;
        /**
          * To indicate the form field is required.
         */
        "required"?: boolean;
        /**
          * To show checkbox or radio
         */
        "showInput"?: boolean;
        /**
          * Picker size { md, lg }.
         */
        "size"?: PickerSizes | PickerPillSizes;
        /**
          * To set state of helper message
         */
        "state"?: ChiStates1;
        /**
          * To define input type, radio (single selection) or checkbox (multiple selection)
         */
        "type"?: PickerInputTypes;
    }
    interface ChiPopover {
        /**
          * to open or close the popover
         */
        "active"?: boolean;
        /**
          * to add an arrow between the popover and the reference element
         */
        "arrow"?: boolean;
        /**
          * to add a close button to the popover
         */
        "closable"?: boolean;
        /**
          * to allow the user to manually change the position of the popover
         */
        "drag"?: boolean;
        /**
          * To define modal style of the Popover
         */
        "modal"?: boolean;
        /**
          * Popover has been hidden to the user. The animation has completed.
         */
        "onChiPopoverHidden"?: (event: ChiPopoverCustomEvent<any>) => void;
        /**
          * Popover hide method has executed, but the closing animation has not started yet
         */
        "onChiPopoverHide"?: (event: ChiPopoverCustomEvent<any>) => void;
        /**
          * Popover show method has executed, but the showing animation has not started yet
         */
        "onChiPopoverShow"?: (event: ChiPopoverCustomEvent<any>) => void;
        /**
          * Popover has been shown to the user and is fully visible. The animation has completed.
         */
        "onChiPopoverShown"?: (event: ChiPopoverCustomEvent<any>) => void;
        /**
          * To define popover title
         */
        "popoverTitle"?: string;
        /**
          * To define portal style of the Popover
         */
        "portal"?: boolean;
        /**
          * to set position of the popover { top, top-start, top-end, right, right-start, right-end, bottom, bottom-start, bottom-end, left, left-start, left-end }
         */
        "position"?: Placement;
        /**
          * Prevents closing the popover when clicking out of its bounds
         */
        "preventAutoHide"?: boolean;
        /**
          * CSS Selector to the reference Element. I.e. #id > p
         */
        "reference"?: string;
        /**
          * To define popover variant { text, custom }
         */
        "variant"?: string;
    }
    interface ChiPrice {
        /**
          * To set the value of the Currency
         */
        "currency"?: string;
        /**
          * Price size { 'sm', 'md', 'lg' }
         */
        "size"?: PriceSizes;
        /**
          * To set the value of the Price
         */
        "value": string | number;
    }
    interface ChiProgress {
        /**
          * to set the max value of a progress bar.
         */
        "max"?: number;
        /**
          * to indicate a progress bar state { info, warning, danger, success }.
         */
        "state"?: string;
        /**
          * to set the value of a progress bar.
         */
        "value"?: number;
    }
    interface ChiRadioButton {
        /**
          * To render the radiobutton in checked state
         */
        "checked"?: boolean;
        /**
          * To disable the radiobutton
         */
        "disabled"?: boolean;
        /**
          * To provide radiobutton label as a string
         */
        "label"?: string;
        /**
          * To render the radiobutton input with a respective name attribute
         */
        "name"?: string;
        /**
          * Triggered when the radio-button has lost the focus
         */
        "onChiBlur"?: (event: ChiRadioButtonCustomEvent<string | boolean>) => void;
        /**
          * Triggered when the user selects or deselects the radio-button
         */
        "onChiChange"?: (event: ChiRadioButtonCustomEvent<string | boolean>) => void;
        /**
          * Triggered when the radio-button has the focus
         */
        "onChiFocus"?: (event: ChiRadioButtonCustomEvent<string | boolean>) => void;
        /**
          * To indicate the state
         */
        "state"?: ChiStates;
    }
    interface ChiSearchInput {
        /**
          * To define -hover, -focus statuses
         */
        "_status"?: string;
        /**
          * To disable Search input
         */
        "disabled"?: boolean;
        /**
          * To display an additional helper text message below the Text input
         */
        "helperMessage"?: string;
        /**
          * To set the list of items to be used in the dropdown menu in autocomplete mode
         */
        "menuItems"?: DropdownMenuItem[];
        /**
          * To set the mode to search input
         */
        "mode"?: SearchInputModes;
        /**
          * To define name of Search input
         */
        "name"?: string;
        /**
          * Triggered when the element has lost focus.
         */
        "onChiBlur"?: (event: ChiSearchInputCustomEvent<any>) => void;
        /**
          * Triggered when an alteration to the element's value is committed by the user
         */
        "onChiChange"?: (event: ChiSearchInputCustomEvent<string>) => void;
        /**
          * Triggered when the user clicked the X button.
         */
        "onChiClean"?: (event: ChiSearchInputCustomEvent<any>) => void;
        /**
          * Triggered when the user sets focus on the element.
         */
        "onChiFocus"?: (event: ChiSearchInputCustomEvent<any>) => void;
        /**
          * Triggered when the user changed the element's value but did not commit the change yet
         */
        "onChiInput"?: (event: ChiSearchInputCustomEvent<string>) => void;
        /**
          * Triggered when the user clicked the Search button.
         */
        "onChiSearch"?: (event: ChiSearchInputCustomEvent<string>) => void;
        /**
          * Triggered when the user clicked in one of the autocomplete elements
         */
        "onChiSearchInputItemSelected"?: (event: ChiSearchInputCustomEvent<DropdownMenuItem>) => void;
        /**
          * To define placeholder of Search input
         */
        "placeholder"?: string;
        /**
          * To disable Value attribute mutation
         */
        "preventValueMutation"?: boolean;
        /**
          * To render Search Input in readonly mode
         */
        "readonly"?: boolean;
        /**
          * To define size of Search input
         */
        "size"?: TextInputSizes;
        /**
          * To define state color of Search input
         */
        "state"?: ChiStates;
        /**
          * To define value of Search input
         */
        "value"?: string;
        /**
          * To provide number of items in the dropdown to be displayed, and apply scroll if needed
         */
        "visibleItems"?: number;
    }
    interface ChiSkeleton {
        /**
          * Size of the skeleton: { xs, sm, md, lg, xl }.
         */
        "size"?: SkeletonSizes;
        /**
          * Applies type classes to the skeleton.
         */
        "type"?: SkeletonTypes;
    }
    interface ChiSpinner {
        /**
          * to render spinners on dark or light backgrounds.
         */
        "backdrop"?: string;
        /**
          * to set color of a spinner { primary, dark, success, warning, danger, muted }.
         */
        "color"?: string;
        /**
          * to set size of a spinner { xs, sm, sm--2, sm--3, md, lg, xl, xxl }.
         */
        "size"?: string;
    }
    interface ChiSwitch {
        /**
          * used to check the toggle switch.
         */
        "checked"?: boolean;
        /**
          * used to disable the toggle switch.
         */
        "disabled"?: boolean;
        "extraClass"?: string;
        /**
          * used to disable the toggle labels.
         */
        "hideLabel"?: boolean;
        /**
          * to set a label for the toggle switch.
         */
        "label"?: string;
        /**
          * emitting a custom event toggle.
         */
        "onToggle"?: (event: ChiSwitchCustomEvent<any>) => void;
        /**
          * OPTIONAL. Size of the label. { xs, sm }.
         */
        "size"?: string;
    }
    interface ChiTabs {
        /**
          * To provide ID of the active tab
         */
        "activeTab"?: string;
        /**
          * To enable border
         */
        "border"?: boolean;
        /**
          * To add extra classes to ul
         */
        "extraClass"?: string;
        /**
          * To set inverse style
         */
        "inverse"?: boolean;
        /**
          * Triggered when the user activates a tab
         */
        "onChiTabChange"?: (event: ChiTabsCustomEvent<TabTrigger>) => void;
        /**
          * To configure See more Dropdown trigger message
         */
        "seeMoreMessage"?: string;
        /**
          * To set tab size { xs, sm, md, lg, xl }.
         */
        "size"?: TabsSizes;
        /**
          * To enable animation of the border
         */
        "slidingBorder"?: boolean;
        /**
          * To enable solid style of Tabs
         */
        "solid"?: boolean;
        /**
          * To provide the data for Tabs
         */
        "tabs"?: TabTrigger[];
        /**
          * To enable vertical variant of Tabs
         */
        "vertical"?: boolean;
    }
    interface ChiTags {
        /**
          * To define -hover, -focus statuses
         */
        "_status"?: string;
        /**
          * Triggered when the user selects or deselects an option
         */
        "onChiChange"?: (event: ChiTagsCustomEvent<Tag[]>) => void;
        /**
          * To define placeholder of Text input
         */
        "placeholder"?: string;
        /**
          * To add tags
         */
        "tags"?: Tag[];
    }
    interface ChiTextInput {
        /**
          * To define -hover, -focus statuses
         */
        "_status"?: string;
        /**
          * To show copy text icon
         */
        "copyText"?: boolean;
        /**
          * To disable Text input
         */
        "disabled"?: boolean;
        /**
          * Extra classes to apply to input
         */
        "extraClass"?: string;
        /**
          * To display an additional helper text message below the Text input
         */
        "helperMessage"?: string;
        /**
          * To add a left positioned icon
         */
        "iconLeft"?: string;
        /**
          * To define color of left icon
         */
        "iconLeftColor"?: IconColors;
        /**
          * To add a right positioned icon
         */
        "iconRight"?: string;
        /**
          * To define color of right icon
         */
        "iconRightColor"?: IconColors;
        /**
          * To define name of Text input
         */
        "name"?: string;
        /**
          * Triggered when the element has lost focus.
         */
        "onChiBlur"?: (event: ChiTextInputCustomEvent<any>) => void;
        /**
          * Triggered when an alteration to the element's value is committed by the user
         */
        "onChiChange"?: (event: ChiTextInputCustomEvent<string>) => void;
        /**
          * Triggered when the user sets focus on the element.
         */
        "onChiFocus"?: (event: ChiTextInputCustomEvent<any>) => void;
        /**
          * Triggered when the user changed the element's value but did not commit the change yet
         */
        "onChiInput"?: (event: ChiTextInputCustomEvent<string>) => void;
        /**
          * To define placeholder of Text input
         */
        "placeholder"?: string;
        /**
          * To disable Value attribute mutation
         */
        "preventValueMutation"?: boolean;
        /**
          * To prevent the Text input value from being changed
         */
        "readonly"?: boolean;
        /**
          * To define size of Text input
         */
        "size"?: TextInputSizes;
        /**
          * To render Text Input with Spinner
         */
        "spinner"?: boolean;
        /**
          * To define state color of Text input
         */
        "state"?: ChiStates;
        /**
          * To define type of Text input
         */
        "type"?: TextInputTypes;
        /**
          * To define value of Text input
         */
        "value"?: string;
    }
    interface ChiTextarea {
        /**
          * To define -hover, -focus statuses
         */
        "_status"?: '-hover' | '-focus';
        /**
          * To show copy text icon
         */
        "copyText"?: boolean;
        /**
          * To disable Textarea
         */
        "disabled"?: boolean;
        /**
          * To display an additional helper text message below the Textarea
         */
        "helperMessage"?: string;
        /**
          * To add a left positioned icon
         */
        "iconLeft"?: string;
        /**
          * To define color of left icon
         */
        "iconLeftColor"?: IconColors;
        /**
          * To add a right positioned icon
         */
        "iconRight"?: string;
        /**
          * To define color of right icon
         */
        "iconRightColor"?: IconColors;
        /**
          * To define name of Textarea
         */
        "name"?: string;
        /**
          * Triggered when the element has lost focus.
         */
        "onChiBlur"?: (event: ChiTextareaCustomEvent<any>) => void;
        /**
          * Triggered when an alteration to the element's value is committed by the user
         */
        "onChiChange"?: (event: ChiTextareaCustomEvent<string>) => void;
        /**
          * Triggered when the user sets focus on the element.
         */
        "onChiFocus"?: (event: ChiTextareaCustomEvent<any>) => void;
        /**
          * Triggered when the user changed the element's value but did not commit the change yet
         */
        "onChiInput"?: (event: ChiTextareaCustomEvent<string>) => void;
        /**
          * To define placeholder of Textarea
         */
        "placeholder"?: string;
        /**
          * To prevent Textarea value from being changed
         */
        "readonly"?: boolean;
        /**
          * To define size of Textarea
         */
        "size"?: TextInputSizes;
        /**
          * To define state color of Textarea
         */
        "state"?: ChiStates;
        /**
          * To read value of Textarea
         */
        "value"?: string;
    }
    interface ChiTime {
        /**
          * To disable specific hours
         */
        "_excludedHours"?: string;
        /**
          * To disable specific minutes
         */
        "_excludedMinutes"?: string;
        /**
          * To disable specific seconds
         */
        "_excludedSeconds"?: string;
        /**
          * Displaying seconds column
         */
        "displaySeconds"?: boolean;
        /**
          * To render Time Picker in 24 hours format
         */
        "format"?: TimePickerFormats;
        /**
          * Renders minutes in stepped format. Defaults to 15 min steps if no value is provided (see examples in docs).
         */
        "minutesStep"?: TimePickerTimeSteps;
        /**
          * Time change value event
         */
        "onChiTimeChange"?: (event: ChiTimeCustomEvent<any>) => void;
        /**
          * Renders seconds in stepped format. Defaults to 10 seconds if no value is provided (see examples in docs).
         */
        "secondsStep"?: TimePickerTimeSteps;
        /**
          * @deprecated Use minutesStep and secondsStep instead. To render Minutes and Seconds columns in 15 min and 10 second steps.
         */
        "stepped"?: boolean;
        /**
          * Selected time in the time picker
         */
        "value"?: string;
    }
    interface ChiTimePicker {
        /**
          * To specify excluded hours.
         */
        "_excludedHours"?: string;
        /**
          * To specify excluded minutes.
         */
        "_excludedMinutes"?: string;
        /**
          * To specify excluded seconds.
         */
        "_excludedSeconds"?: string;
        /**
          * Indicates whether the time picker popover is open or closed
         */
        "active"?: boolean;
        /**
          * To disable chi-time-picker.
         */
        "disabled"?: boolean;
        /**
          * Displaying seconds column
         */
        "displaySeconds"?: boolean;
        /**
          * To define format of Time Picker.
         */
        "format"?: TimePickerFormats;
        /**
          * Renders minutes in stepped format. Defaults to 15 min steps if no value is provided (see examples in docs).
         */
        "minutesStep"?: TimePickerTimeSteps;
        /**
          * Renders seconds in stepped format. Defaults to 10 seconds if no value is provided (see examples in docs).
         */
        "secondsStep"?: TimePickerTimeSteps;
        /**
          * Selected time of Time Picker
         */
        "value"?: string;
    }
    interface ChiTooltip {
        /**
          * to set the background color of the tooltip { base, light }.
         */
        "color"?: TooltipColors;
        /**
          * to set the tooltip message to display { string }.
         */
        "message": string;
        /**
          * triggered when the Tooltip hide method has been executed.
         */
        "onChiTooltipHide"?: (event: ChiTooltipCustomEvent<void>) => void;
        /**
          * triggered when the Tooltip show method has been executed.
         */
        "onChiTooltipShow"?: (event: ChiTooltipCustomEvent<void>) => void;
        /**
          * to set position of the tooltip { top, right, bottom, left }.
         */
        "position"?: GeneralPositions;
        /**
          * to set the class chi-tooltip__wrapper
         */
        "wrapper"?: boolean;
    }
    interface IntrinsicElements {
        "chi-accordion": ChiAccordion;
        "chi-alert": ChiAlert;
        "chi-badge": ChiBadge;
        "chi-brand": ChiBrand;
        "chi-button": ChiButton;
        "chi-carousel": ChiCarousel;
        "chi-checkbox": ChiCheckbox;
        "chi-copy-text": ChiCopyText;
        "chi-date": ChiDate;
        "chi-date-picker": ChiDatePicker;
        "chi-drawer": ChiDrawer;
        "chi-dropdown": ChiDropdown;
        "chi-expansion-panel": ChiExpansionPanel;
        "chi-form-wrapper": ChiFormWrapper;
        "chi-helper-message": ChiHelperMessage;
        "chi-icon": ChiIcon;
        "chi-label": ChiLabel;
        "chi-link": ChiLink;
        "chi-main": ChiMain;
        "chi-marketing-icon": ChiMarketingIcon;
        "chi-number-input": ChiNumberInput;
        "chi-pagination": ChiPagination;
        "chi-phone-input": ChiPhoneInput;
        "chi-picker": ChiPicker;
        "chi-popover": ChiPopover;
        "chi-price": ChiPrice;
        "chi-progress": ChiProgress;
        "chi-radio-button": ChiRadioButton;
        "chi-search-input": ChiSearchInput;
        "chi-skeleton": ChiSkeleton;
        "chi-spinner": ChiSpinner;
        "chi-switch": ChiSwitch;
        "chi-tabs": ChiTabs;
        "chi-tags": ChiTags;
        "chi-text-input": ChiTextInput;
        "chi-textarea": ChiTextarea;
        "chi-time": ChiTime;
        "chi-time-picker": ChiTimePicker;
        "chi-tooltip": ChiTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "chi-accordion": LocalJSX.ChiAccordion & JSXBase.HTMLAttributes<HTMLChiAccordionElement>;
            "chi-alert": LocalJSX.ChiAlert & JSXBase.HTMLAttributes<HTMLChiAlertElement>;
            "chi-badge": LocalJSX.ChiBadge & JSXBase.HTMLAttributes<HTMLChiBadgeElement>;
            "chi-brand": LocalJSX.ChiBrand & JSXBase.HTMLAttributes<HTMLChiBrandElement>;
            "chi-button": LocalJSX.ChiButton & JSXBase.HTMLAttributes<HTMLChiButtonElement>;
            "chi-carousel": LocalJSX.ChiCarousel & JSXBase.HTMLAttributes<HTMLChiCarouselElement>;
            "chi-checkbox": LocalJSX.ChiCheckbox & JSXBase.HTMLAttributes<HTMLChiCheckboxElement>;
            "chi-copy-text": LocalJSX.ChiCopyText & JSXBase.HTMLAttributes<HTMLChiCopyTextElement>;
            "chi-date": LocalJSX.ChiDate & JSXBase.HTMLAttributes<HTMLChiDateElement>;
            "chi-date-picker": LocalJSX.ChiDatePicker & JSXBase.HTMLAttributes<HTMLChiDatePickerElement>;
            "chi-drawer": LocalJSX.ChiDrawer & JSXBase.HTMLAttributes<HTMLChiDrawerElement>;
            "chi-dropdown": LocalJSX.ChiDropdown & JSXBase.HTMLAttributes<HTMLChiDropdownElement>;
            "chi-expansion-panel": LocalJSX.ChiExpansionPanel & JSXBase.HTMLAttributes<HTMLChiExpansionPanelElement>;
            "chi-form-wrapper": LocalJSX.ChiFormWrapper & JSXBase.HTMLAttributes<HTMLChiFormWrapperElement>;
            "chi-helper-message": LocalJSX.ChiHelperMessage & JSXBase.HTMLAttributes<HTMLChiHelperMessageElement>;
            "chi-icon": LocalJSX.ChiIcon & JSXBase.HTMLAttributes<HTMLChiIconElement>;
            "chi-label": LocalJSX.ChiLabel & JSXBase.HTMLAttributes<HTMLChiLabelElement>;
            "chi-link": LocalJSX.ChiLink & JSXBase.HTMLAttributes<HTMLChiLinkElement>;
            "chi-main": LocalJSX.ChiMain & JSXBase.HTMLAttributes<HTMLChiMainElement>;
            "chi-marketing-icon": LocalJSX.ChiMarketingIcon & JSXBase.HTMLAttributes<HTMLChiMarketingIconElement>;
            "chi-number-input": LocalJSX.ChiNumberInput & JSXBase.HTMLAttributes<HTMLChiNumberInputElement>;
            "chi-pagination": LocalJSX.ChiPagination & JSXBase.HTMLAttributes<HTMLChiPaginationElement>;
            "chi-phone-input": LocalJSX.ChiPhoneInput & JSXBase.HTMLAttributes<HTMLChiPhoneInputElement>;
            "chi-picker": LocalJSX.ChiPicker & JSXBase.HTMLAttributes<HTMLChiPickerElement>;
            "chi-popover": LocalJSX.ChiPopover & JSXBase.HTMLAttributes<HTMLChiPopoverElement>;
            "chi-price": LocalJSX.ChiPrice & JSXBase.HTMLAttributes<HTMLChiPriceElement>;
            "chi-progress": LocalJSX.ChiProgress & JSXBase.HTMLAttributes<HTMLChiProgressElement>;
            "chi-radio-button": LocalJSX.ChiRadioButton & JSXBase.HTMLAttributes<HTMLChiRadioButtonElement>;
            "chi-search-input": LocalJSX.ChiSearchInput & JSXBase.HTMLAttributes<HTMLChiSearchInputElement>;
            "chi-skeleton": LocalJSX.ChiSkeleton & JSXBase.HTMLAttributes<HTMLChiSkeletonElement>;
            "chi-spinner": LocalJSX.ChiSpinner & JSXBase.HTMLAttributes<HTMLChiSpinnerElement>;
            "chi-switch": LocalJSX.ChiSwitch & JSXBase.HTMLAttributes<HTMLChiSwitchElement>;
            "chi-tabs": LocalJSX.ChiTabs & JSXBase.HTMLAttributes<HTMLChiTabsElement>;
            "chi-tags": LocalJSX.ChiTags & JSXBase.HTMLAttributes<HTMLChiTagsElement>;
            "chi-text-input": LocalJSX.ChiTextInput & JSXBase.HTMLAttributes<HTMLChiTextInputElement>;
            "chi-textarea": LocalJSX.ChiTextarea & JSXBase.HTMLAttributes<HTMLChiTextareaElement>;
            "chi-time": LocalJSX.ChiTime & JSXBase.HTMLAttributes<HTMLChiTimeElement>;
            "chi-time-picker": LocalJSX.ChiTimePicker & JSXBase.HTMLAttributes<HTMLChiTimePickerElement>;
            "chi-tooltip": LocalJSX.ChiTooltip & JSXBase.HTMLAttributes<HTMLChiTooltipElement>;
        }
    }
}
