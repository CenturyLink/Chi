import{r as i,h as t}from"./p-99c091ba.js";import{b as r}from"./p-1ef4f618.js";import{t as s}from"./p-0a178b06.js";const e=class{constructor(t){i(this,t),this.currency="$",this.size="md",this.pricePattern=/^-?[0-9]+(\.[0-9]{1,2})?$/}_isValidPrice(i){return null!=i&&!Number.isNaN(i)&&this.pricePattern.test(i.toString())}_formatValuePrice(i){const t=i.toString().split("."),r=Number(t[0]).toString();let s=t[1]||"00";return 1===s.length&&(s+="0"),[r,s]}valueValidation(i){if(!this._isValidPrice(i))throw new Error(`'${i}' is not a valid Price format.`)}sizeValidation(i){if(!r.includes(i))throw new Error(`'${i}' is not a valid size for Price. Valid values are sm, md or lg.`)}get formattedPrice(){return this._isValidPrice(this.value)?this._formatValuePrice(this.value):null}componentWillLoad(){this.valueValidation(this.value),this.sizeValidation(this.size)}render(){const i=this.formattedPrice;if(!i)return null;const[r,e]=i;return t("div",{class:{[s.PRICE]:!0,[`-${this.size}`]:!!this.size},"aria-label":`Price: ${this.currency||""}${r}${e||""}`},this.currency&&t("sup",{"aria-hidden":"true"},this.currency),r,e&&t("sup",{"aria-hidden":"true"},e))}static get watchers(){return{value:["valueValidation"],size:["sizeValidation"]}}};export{e as chi_price}