const t=[];for(let r=0;r<256;++r)t.push((r+256).toString(16).slice(1));let r;const o=new Uint8Array(16),e={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};function n(n,u,f){if(e.randomUUID&&!u&&!n)return e.randomUUID();const p=(n=n||{}).random??n.rng?.()??function(){if(!r){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");r=crypto.getRandomValues.bind(crypto)}return r(o)}();if(p.length<16)throw new Error("Random bytes length must be >= 16");if(p[6]=15&p[6]|64,p[8]=63&p[8]|128,u){if((f=f||0)<0||f+16>u.length)throw new RangeError(`UUID byte range ${f}:${f+15} is out of buffer bounds`);for(let t=0;t<16;++t)u[f+t]=p[t];return u}return function(r,o=0){return(t[r[o+0]]+t[r[o+1]]+t[r[o+2]]+t[r[o+3]]+"-"+t[r[o+4]]+t[r[o+5]]+"-"+t[r[o+6]]+t[r[o+7]]+"-"+t[r[o+8]]+t[r[o+9]]+"-"+t[r[o+10]]+t[r[o+11]]+t[r[o+12]]+t[r[o+13]]+t[r[o+14]]+t[r[o+15]]).toLowerCase()}(p)}export{n as v}